-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0A96;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8245;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 825B;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4AA5;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4AA2;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4AA2;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 1279;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 5279;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4AA3;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0A96;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 		OUT 	RESETPOS
           01D : 8047;  -- 		CALL	InitializeVars
           01E : 8056;  -- 		CALL	InitializeMap
           01F : 80B2;  -- 		CALL	InitialSearch
           020 : 0A96;  -- 		LOAD	ZERO
           021 : 2822;  -- 		JUMP	MainLoopForever
           022 : 811E;  -- 		CALL	FindAndTagClosestObject
           023 : 8010;  -- 		CALL	WaitForUser
           024 : 98C3;  -- 		OUT 	RESETPOS
           025 : 2822;  -- 		JUMP	MainLoopForever
           026 : 0A96;  -- 		LOAD   Zero         ; Stop everything.
           027 : 9883;  -- 		OUT    LVELCMD
           028 : 988B;  -- 		OUT    RVELCMD
           029 : 98B2;  -- 		OUT    SONAREN
           02A : 082D;  -- 		LOAD   DEAD         ; An indication that we are dead
           02B : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           02C : 282C;  -- 		JUMP   Forever      ; Do this forever.
           02D : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           02E : 0000;  -- TravelDist:		DW 0
           02F : 98C3;  -- 		OUT		RESETPOS
           030 : 0AA6;  -- 		LOAD	MASK5
           031 : 98B2;  -- 		OUT		SONAREN
           032 : 90AD;  -- 		IN		DIST5
           033 : 102E;  -- 		STORE	TravelDist
           034 : 22B9;  -- 		SUB		MaxShort
           035 : 3046;  -- 		JNEG	NewFound
           036 : 90C0;  -- 		IN		XPOS
           037 : 22B8;  -- 		SUB		MaxLong
           038 : 403E;  -- 		JZERO	TurnAroundGoHome
           039 : 303E;  -- 		JNEG	TurnAroundGoHome
           03A : 0AB2;  -- 		LOAD 	FSlow
           03B : 9883;  -- 		OUT  	LVELCMD     ; send velocity to left and right wheels
           03C : 988B;  -- 		OUT   	RVELCMD
           03D : 2832;  -- 		JUMP	NewKeepCheck
           03E : 0A96;  -- 		LOAD	ZERO
           03F : 6F4C;  -- 		ADDI	-180
           040 : 127B;  -- 		STORE	Angle
           041 : 81C5;  -- 		CALL	Rotate
           042 : 0AB2;  -- 		LOAD 	FSlow
           043 : 9883;  -- 		OUT  	LVELCMD
           044 : 988B;  -- 		OUT   	RVELCMD
           045 : 2842;  -- 		JUMP	GoingHome
           046 : 8026;  -- 		CALL	Die
           047 : 9000;  -- 		IN		SWITCHES
           048 : 4AA1;  -- 		AND		MASK0
           049 : 1282;  -- 		STORE 	AlongLongWall
           04A : 404C;  -- 		JZERO	PositiveThetaLoad
           04B : 384E;  -- 		JPOS	ZeroThetaLoad
           04C : 0A97;  -- 		LOAD	ONE
           04D : 2850;  -- 		JUMP	ThetaStore
           04E : 0A96;  -- 		LOAD	ZERO
           04F : 2850;  -- 		JUMP 	ThetaStore
           050 : 1283;  -- 		STORE	ObjectsPosTheta
           051 : 8800;  -- 		RETURN
           052 : 0000;  -- InitMaxDist:			DW 0
           053 : 0000;  -- InitArraySize:		DW 0
           054 : 0000;  -- InitFillCounter:	DW 0
           055 : 0000;  -- InitFillIndex:		DW 0
           056 : 0A96;  -- 	LOAD		ZERO
           057 : 1054;  -- 	STORE		InitFillCounter
           058 : 0A82;  -- 	LOAD		AlongLongWall
           059 : 385B;  -- 	JPOS		InitLong
           05A : 2862;  -- 	JUMP		InitShort
           05B : 0AB8;  -- 	LOAD		MaxLong
           05C : 6015;  -- 	SHIFT		-5
           05D : 6801;  -- 	ADDI		1
           05E : 1053;  -- 	STORE 		InitArraySize
           05F : 0AB9;  -- 	LOAD		MaxShort
           060 : 1052;  -- 	STORE		InitMaxDist
           061 : 2868;  -- 	JUMP		DistFillLoop
           062 : 0AB9;  -- 	LOAD		MaxShort
           063 : 6015;  -- 	SHIFT		-5
           064 : 6801;  -- 	ADDI 		1
           065 : 1053;  -- 	STORE 		InitArraySize
           066 : 0AB8;  -- 	LOAD		MaxLong
           067 : 1052;  -- 	STORE		InitMaxDist
           068 : 0854;  -- 	LOAD		InitFillCounter
           069 : 2053;  -- 	SUB			InitArraySize
           06A : 4075;  -- 	JZERO		ArrayFilled
           06B : 3875;  -- 	JPOS		ArrayFilled
           06C : 0A89;  -- 	LOAD		CellArrI
           06D : 1854;  -- 	ADD			InitFillCounter
           06E : 1055;  -- 	STORE 		InitFillIndex
           06F : 0852;  -- 	LOAD		InitMaxDist
           070 : 7855;  -- 	ISTORE		InitFillIndex
           071 : 0854;  -- 	LOAD		InitFillCounter
           072 : 6801;  -- 	ADDI		1
           073 : 1054;  -- 	STORE		InitFillCounter
           074 : 2868;  -- 	JUMP		DistFillLoop
           075 : 8800;  -- 	RETURN
           076 : 0000;  -- TagPos:				DW 0
           077 : 0000;  -- TagIndex:			DW 0
           078 : 0000;  -- LeftTagIndex:	DW 0
           079 : 0000;  -- RightTagIndex: DW 0
           07A : 0000;  -- UpdateDist:		DW 0
           07B : 0000;  -- TagArraySize:	DW 0
           07C : 0A82;  -- 	LOAD		AlongLongWall
           07D : 387F;  -- 	JPOS		UpdLong
           07E : 2886;  -- 	JUMP		UpdShort
           07F : 0AB8;  -- 	LOAD		MaxLong
           080 : 6015;  -- 	SHIFT		-5
           081 : 6801;  -- 	ADDI		1
           082 : 107B;  -- 	STORE 	TagArraySize
           083 : 0AB9;  -- 	LOAD		MaxShort
           084 : 107A;  -- 	STORE		UpdateDist
           085 : 288C;  -- 	JUMP		FillTagP
           086 : 0AB9;  -- 	LOAD		MaxShort
           087 : 6015;  -- 	SHIFT		-5
           088 : 6801;  -- 	ADDI		1
           089 : 107B;  -- 	STORE 	TagArraySize
           08A : 0AB8;  -- 	LOAD		MaxLong
           08B : 107A;  -- 	STORE		UpdateDist
           08C : 0876;  -- 	LOAD 		TagPos
           08D : 6015;  -- 	SHIFT		-5
           08E : 1A89;  -- 	ADD			CellArrI
           08F : 1077;  -- 	STORE		TagIndex
           090 : 087A;  -- 	LOAD		UpdateDist
           091 : 1077;  -- 	STORE		TagIndex
           092 : 0877;  -- 	LOAD		TagIndex
           093 : 6801;  -- 	ADDI		1
           094 : 1079;  -- 	STORE		RightTagIndex
           095 : 0877;  -- 	LOAD		TagIndex
           096 : 6FFF;  -- 	ADDI		-1
           097 : 1078;  -- 	STORE		LeftTagIndex
           098 : 0878;  -- 	LOAD		LeftTagIndex
           099 : 2289;  -- 	SUB			CellArrI
           09A : 30A4;  -- 	JNEG		KeepRight
           09B : 7078;  -- 	ILOAD		LeftTagIndex
           09C : 207A;  -- 	SUB			UpdateDist
           09D : 40A4;  -- 	JZERO		KeepRight
           09E : 087A;  -- 	LOAD		UpdateDist
           09F : 7878;  -- 	ISTORE	LeftTagIndex
           0A0 : 0878;  -- 	LOAD		LeftTagIndex
           0A1 : 6FFF;  -- 	ADDI		-1
           0A2 : 1078;  -- 	STORE		LeftTagIndex
           0A3 : 2898;  -- 	JUMP		KeepLeft
           0A4 : 0A89;  -- 	LOAD		CellArrI
           0A5 : 187B;  -- 	ADD			TagArraySize
           0A6 : 2079;  -- 	SUB			RightTagIndex
           0A7 : 30B1;  -- 	JNEG		TagUpdated
           0A8 : 7079;  -- 	ILOAD		RightTagIndex
           0A9 : 207A;  -- 	SUB			UpdateDist
           0AA : 40B1;  -- 	JZERO		TagUpdated
           0AB : 087A;  -- 	LOAD		UpdateDist
           0AC : 7879;  -- 	ISTORE	RightTagIndex
           0AD : 0879;  -- 	LOAD		RightTagIndex
           0AE : 6801;  -- 	ADDI		1
           0AF : 1079;  -- 	STORE		RightTagIndex
           0B0 : 28A4;  -- 	JUMP		KeepRight
           0B1 : 8800;  -- 	RETURN
           0B2 : 0AA3;  -- 		LOAD	MASK2
           0B3 : 1AA4;  -- 		ADD		MASK3
           0B4 : 0A97;  -- 		LOAD	ONE
           0B5 : 127F;  -- 		STORE	XDir
           0B6 : 80CC;  -- 		CALL 	UpdateMap
           0B7 : 0A82;  -- 		LOAD	AlongLongWall
           0B8 : 40BD;  -- 		JZERO	LoadShortDistance
           0B9 : 38BA;  -- 		JPOS	LoadLongDistance
           0BA : 90C0;  -- 		IN		XPOS
           0BB : 22B8;  -- 		SUB		MaxLong
           0BC : 28C0;  -- 		JUMP	DistanceCheck
           0BD : 90C0;  -- 		IN		XPOS
           0BE : 22B9;  -- 		SUB		MaxShort
           0BF : 28C0;  -- 		JUMP 	DistanceCheck
           0C0 : 38C7;  -- 		JPOS	DoneForward
           0C1 : 0A96;  -- 		LOAD	ZERO
           0C2 : 11F9;  -- 		STORE	DTheta
           0C3 : 0AB4;  -- 		LOAD	FMid
           0C4 : 11FA;  -- 		STORE	DVel
           0C5 : 81FB;  -- 		CALL	ControlMovement
           0C6 : 28B6;  -- 		JUMP	KeepGoingForward
           0C7 : 81AE;  -- 		CALL	StopMovement
           0C8 : 0AAF;  -- 		LOAD	Deg180
           0C9 : 127B;  -- 		STORE	Angle
           0CA : 81C5;  -- 		CALL	Rotate
           0CB : 8800;  -- 		RETURN
           0CC : 0A82;  --  	LOAD 	AlongLongWall
           0CD : 5A7F;  --  	XOR 	XDir
           0CE : 38D7;  -- 	JPOS 	ELHS ; If 1
           0CF : 40D0;  -- 	JZERO  	ERHS ; If 0
           0D0 : 0AA6;  -- 	 	LOAD	MASK5
           0D1 : 98B2;  -- 	 	OUT 	SONAREN
           0D2 : 90AD;  -- 	 	IN 		DIST5
           0D3 : 1287;  -- 	 	STORE	Cell
           0D4 : 81AB;  -- 	 	CALL	KillSonars
           0D5 : 80DE;  -- 		CALL	UpdateCell
           0D6 : 8800;  -- 	 	RETURN
           0D7 : 0AA1;  -- 		LOAD	MASK0
           0D8 : 98B2;  -- 		OUT 	SONAREN
           0D9 : 90A8;  -- 		IN 		DIST0
           0DA : 1287;  -- 		STORE	Cell
           0DB : 81AB;  -- 	 	CALL	KillSonars
           0DC : 80DE;  -- 	 	CALL	UpdateCell
           0DD : 8800;  -- 		RETURN
           0DE : 90C0;  --  	IN		XPOS
           0DF : 6015;  -- 	SHIFT 	-5
           0E0 : 1A89;  -- 	ADD		CellArrI
           0E1 : 128A;  -- 	STORE 	XposIndex
           0E2 : 80E4;  -- 	CALL	FilterAndAggregate
           0E3 : 8800;  -- 	RETURN
           0E4 : 0A82;  -- 		LOAD	AlongLongWall
           0E5 : 40E7;  -- 		JZERO	FilterLoadLong
           0E6 : 38E9;  -- 		JPOS	FilterLoadShort
           0E7 : 0AB8;  -- 		LOAD	MaxLong
           0E8 : 28EB;  -- 		JUMP	FilterData
           0E9 : 0AB9;  -- 		LOAD	MaxShort
           0EA : 28EB;  -- 		JUMP	FilterData
           0EB : 2287;  -- 		SUB		Cell
           0EC : 40F9;  -- 		JZERO	FilterReturn
           0ED : 30F9;  -- 		JNEG	FilterReturn
           0EE : 728A;  -- 		ILOAD	XposIndex
           0EF : 2287;  -- 		SUB		Cell
           0F0 : 38F3;  -- 		JPOS	StoreFilteredData
           0F1 : 40F9;  -- 		JZERO	FilterReturn
           0F2 : 38F9;  -- 		JPOS	FilterReturn
           0F3 : 0A87;  -- 		LOAD	Cell
           0F4 : 6013;  -- 		SHIFT	-3
           0F5 : 1287;  -- 		STORE	Cell
           0F6 : 728A;  -- 		ILOAD	XposIndex
           0F7 : 2287;  -- 		SUB		Cell
           0F8 : 7A8A;  -- 		ISTORE	XposIndex
           0F9 : 90C0;  -- 		IN		XPOS
           0FA : 9804;  -- 		OUT		SSEG1
           0FB : 728A;  -- 		ILOAD	XposIndex
           0FC : 9805;  -- 		OUT		SSEG2
           0FD : 8800;  -- 		RETURN
           0FE : 0A96;  -- 		LOAD		ZERO
           0FF : 1054;  -- 		STORE		InitFillCounter
           100 : 0AB8;  -- 		LOAD		MaxLong
           101 : 1281;  -- 		STORE		ObjectYDist
           102 : 0854;  -- 		LOAD		InitFillCounter
           103 : 2053;  -- 		SUB			InitArraySize
           104 : 4118;  -- 		JZERO		ClosestDone
           105 : 3918;  -- 		JPOS		ClosestDone
           106 : 0A89;  -- 		LOAD		CellArrI
           107 : 1854;  -- 		ADD			InitFillCounter
           108 : 1055;  -- 		STORE 		InitFillIndex
           109 : 0854;  -- 		LOAD		InitFillCounter
           10A : 6801;  -- 		ADDI		1
           10B : 1054;  -- 		STORE		InitFillCounter
           10C : 7055;  -- 		ILOAD		InitFillIndex
           10D : 2281;  -- 		SUB			ObjectYDist
           10E : 3111;  -- 		JNEG		NewClosestFound
           10F : 3902;  -- 		JPOS		ClosestDistLoop
           110 : 4102;  -- 		JZERO		ClosestDistLoop
           111 : 7055;  -- 		ILOAD		InitFillIndex
           112 : 1281;  -- 		STORE		ObjectYDist
           113 : 0854;  -- 		LOAD		InitFillCounter
           114 : 6005;  -- 		SHIFT		5
           115 : 6FF1;  -- 		ADDI		-15
           116 : 1280;  -- 		STORE		ObjectXDist
           117 : 2902;  -- 		JUMP		ClosestDistLoop
           118 : 0A80;  -- 		LOAD		ObjectXDist
           119 : 9804;  -- 		OUT			SSEG1
           11A : 0A81;  -- 		LOAD		ObjectYDist
           11B : 9805;  -- 		OUT			SSEG2
           11C : 8010;  -- 		CALL		WaitForUser
           11D : 8800;  -- 		RETURN
           11E : 80FE;  -- 		CALL	FindClosestObject
           11F : 90C0;  -- 		IN	 	XPOS
           120 : 2280;  -- 		SUB 	ObjectXDist
           121 : 3124;  -- 		JNEG	GoRight
           122 : 413D;  -- 		JZERO 	AtObjectX
           123 : 3927;  -- 		JPOS	GoLeft
           124 : 0A97;  -- 		LOAD 	ONE
           125 : 127F;  -- 		STORE 	XDir
           126 : 2929;  -- 		JUMP 	MoveLoop
           127 : 0A96;  -- 		LOAD 	ZERO
           128 : 127F;  -- 		STORE 	XDir
           129 : 80CC;  -- 		CALL 	UpdateMap
           12A : 0A7F;  -- 		LOAD 	XDir
           12B : 4132;  -- 		JZERO 	CheckLess
           12C : 392D;  -- 		JPOS	CheckGreat
           12D : 90C0;  -- 		IN		XPOS
           12E : 2280;  -- 		SUB		ObjectXDist
           12F : 413D;  -- 		JZERO 	AtObjectX
           130 : 393D;  -- 		JPOS	AtObjectX
           131 : 2937;  -- 		JUMP	KeepGoingInDirection
           132 : 90C0;  -- 		IN		XPOS
           133 : 2280;  -- 		SUB		ObjectXDist
           134 : 413D;  -- 		JZERO 	AtObjectX
           135 : 313D;  -- 		JNEG	AtObjectX
           136 : 2937;  -- 		JUMP	KeepGoingInDirection
           137 : B8B4;  -- 		LOADI	180
           138 : 11F9;  -- 		STORE	DTheta
           139 : 0AB4;  -- 		LOAD	FMid
           13A : 11FA;  -- 		STORE	DVel
           13B : 81FB;  -- 		CALL	ControlMovement
           13C : 2929;  -- 		JUMP	MoveLoop
           13D : 81AE;  -- 		CALL	StopMovement
           13E : 0A82;  -- 		LOAD	AlongLongWall
           13F : 4141;  -- 		JZERO	RotatePosForTag
           140 : 3943;  -- 		JPOS	RotateNegForTag
           141 : B85A;  -- 		LOADI	90
           142 : 2945;  -- 		JUMP	RotateAndTagIt
           143 : BFA6;  -- 		LOADI 	-90
           144 : 2945;  -- 		JUMP	RotateAndTagIt
           145 : 127B;  -- 		STORE 	Angle
           146 : 81C5;  -- 		CALL	ROTATE
           147 : 81AE;  -- 		CALL	StopMovement
           148 : 807C;  -- 		CALL	TagArrayUpdate
           149 : 8157;  -- 		CALL 	Tag
           14A : 8800;  -- 		RETURN
           14B : 8026;  -- 	CALL 	Die
           14C : 8800;  -- 	RETURN
           14D : 81EA;  -- 	CALL 	GoToWall
           14E : B85A;  -- 	LOADI 	90
           14F : 127B;  -- 	STORE 	Angle
           150 : 0A83;  -- 	LOAD 	ObjectsPosTheta
           151 : 4154;  -- 	JZERO 	HomeRotate
           152 : BFA6;  -- 	LOADI 	-90
           153 : 127B;  -- 	STORE 	Angle
           154 : 81C5;  -- 	CALL  	Rotate
           155 : 81EA;  -- 	CALL 	GoToWall
           156 : 294B;  -- 	JUMP 	BackAtHome
           157 : 1279;  -- 	STORE 	Temp
           158 : 90C1;  -- 	IN   	YPOS
           159 : 1285;  -- 	STORE 	EncoderY
           15A : B8C2;  -- 	LOADI 	THETA
           15B : 11F9;  -- 	STORE 	DTheta
           15C : 0AB4;  -- 	LOAD 	FMid
           15D : 11FA;  -- 	STORE 	DVel
           15E : 81FB;  -- 	CALL 	ControlMovement
           15F : 90C1;  -- 	IN 		YPOS
           160 : 8219;  -- 	CALL 	Abs
           161 : 2285;  -- 	SUB 	EncoderY
           162 : 2287;  -- 	SUB 	Cell
           163 : 6FF6;  -- 	ADDI 	-10
           164 : 315E;  -- 	JNEG 	TagIt
           165 : 90C1;  -- 	IN 		YPOS
           166 : 8219;  -- 	CALL 	Abs
           167 : 6FE2;  -- 	ADDI 	-30
           168 : 1285;  -- 	STORE 	EncoderY
           169 : 0AB5;  -- 	LOAD 	RMid
           16A : 11FA;  -- 	STORE 	DVel
           16B : 81FB;  -- 	CALL ControlMovement
           16C : 90C1;  -- 	IN 		YPOS
           16D : 8219;  -- 	CALL 	Abs
           16E : 2285;  -- 	SUB 	EncoderY
           16F : 396B;  -- 	JPOS 	MoveBack
           170 : B8B4;  -- 	LOADI 	180
           171 : 81C5;  -- 	CALL 	Rotate
           172 : 814D;  -- 	CALL 	GoHome
           173 : 082A;  -- Middle:			DW 2090
           174 : 80CC;  -- 		CALL 	UpdateMap
           175 : 08C0;  -- 		LOAD 	XPOS
           176 : 1FD6;  -- 		ADD 	-2090
           177 : 3179;  -- 		JNEG 	NotAtMiddle
           178 : 297D;  -- 		JUMP 	AtMiddle
           179 : 0AB4;  -- 		LOAD	FMid
           17A : 9883;  -- 		OUT		LVELCMD
           17B : 988B;  -- 		OUT		RVELCMD
           17C : 2974;  -- 		JUMP  CheckIfMiddle
           17D : 0A96;  -- 	LOAD	ZERO
           17E : 9883;  -- 	OUT		LVELCMD
           17F : 988B;  -- 	OUT		RVELCMD
           180 : 0AA3;  -- 	LOAD	MASK2
           181 : 98B2;  -- 	OUT		SONAREN
           182 : 0AA4;  -- 	LOAD	MASK3
           183 : 98B2;  -- 	OUT		SONAREN
           184 : 80CC;  -- 		CALL 	UpdateMap
           185 : 08AA;  -- 		LOAD	DIST2
           186 : 6C6D;  -- 		ADDI	-915
           187 : 3189;  -- 		JNEG	TwoGot
           188 : 2992;  -- 		JUMP	Rotate10
           189 : 0A97;  -- 		LOAD	ONE
           18A : 08AB;  -- 		LOAD	DIST3
           18B : 6C6D;  -- 		ADDI	-915
           18C : 318E;  -- 		JNEG	ThreeGot
           18D : 2992;  -- 		JUMP	Rotate10
           18E : 0A96;  -- 		LOAD	ZERO
           18F : 9883;  -- 		OUT		LVELCMD
           190 : 988B;  -- 		OUT		RVELCMD
           191 : 298E;  -- 		JUMP	ThreeGot
           192 : 0A96;  -- 		LOAD 	ZERO
           193 : 680C;  -- 		ADDI 	12
           194 : 127B;  -- 		STORE Angle
           195 : 29C5;  -- 		JUMP	Rotate
           196 : 2984;  -- 		JUMP	CheckMidObj
           197 : 7FFF;  -- c7FFF: DW &H7FFF
           198 : 0000;  -- m16sA: DW 0 ; multiplicand
           199 : 0000;  -- m16sB: DW 0 ; multipler
           19A : 0000;  -- m16sc: DW 0 ; carry
           19B : 0000;  -- mcnt16s: DW 0 ; counter
           19C : 0000;  -- mres16sL: DW 0 ; result low
           19D : 0000;  -- mres16sH: DW 0 ; result high
           19E : 005A;  -- Ang0:		DW 90
           19F : 002C;  -- Ang1:		DW 44
           1A0 : 000C;  -- Ang2:		DW 12
           1A1 : FFF4;  -- Ang3:		DW -12
           1A2 : FFD4;  -- Ang4:		DW -44
           1A3 : FFA6;  -- Ang5:		DW -90
           1A4 : FF70;  -- Ang6:		DW -144
           1A5 : 0090;  -- Ang7:		DW 144
           1A6 : 0000;  -- SensorToCheck: 	DW 0
           1A7 : 0000;  -- SensorAngle:		DW 0
           1A8 : 0000;  -- SensorDist: 		DW 0
           1A9 : 0000;  -- SensorIndex: 		DW 0
           1AA : 0000;  -- SensorUpdate:		DW 0
           1AB : 0A96;  -- 	LOAD	ZERO
           1AC : 98B2;  -- 	OUT		SONAREN
           1AD : 8800;  -- 	RETURN
           1AE : 0A96;  -- 	LOAD 	ZERO
           1AF : 9883;  -- 	OUT 	LVELCMD
           1B0 : 988B;  -- 	OUT 	RVELCMD
           1B1 : 8800;  -- 	RETURN
           1B2 : 1279;  -- 	STORE	Temp
           1B3 : B802;  -- 	LOADI 	2
           1B4 : 980A;  -- 	OUT		BEEP
           1B5 : B801;  -- 	LOADI	1
           1B6 : 127A;  -- 	STORE	WaitTime
           1B7 : 9802;  -- 	OUT		Timer
           1B8 : 9002;  -- 		IN 		Timer
           1B9 : 227A;  -- 		SUB 	WaitTime
           1BA : 31B8;  -- 		JNEG	BeepLoop
           1BB : B800;  -- 		LOADI	0
           1BC : 980A;  -- 		OUT		BEEP
           1BD : 0A79;  -- 		LOAD 	Temp
           1BE : 8800;  -- 		RETURN
           1BF : 31C2;  -- 	JNEG	M360N
           1C0 : 6E98;  -- 	ADDI 	-360
           1C1 : 29BF;  -- 	JUMP 	Mod360
           1C2 : 6968;  -- 		ADDI 	360
           1C3 : 31C2;  -- 		JNEG 	M360N
           1C4 : 8800;  -- 		RETURN
           1C5 : 1279;  -- 		STORE	Temp
           1C6 : 90C2;  -- 		IN 		THETA
           1C7 : 1A7B;  -- 		ADD 	Angle
           1C8 : 227E;  -- 		SUB 	ErrMargin
           1C9 : 81BF;  -- 		CALL 	Mod360
           1CA : 127C;  -- 		STORE 	LowErr
           1CB : 90C2;  -- 		IN 		THETA
           1CC : 1A7B;  -- 		ADD 	Angle
           1CD : 1A7E;  -- 		ADD 	ErrMargin
           1CE : 81BF;  -- 		CALL 	Mod360
           1CF : 127D;  -- 		STORE 	HighErr
           1D0 : 0A7B;  -- 		LOAD 	Angle
           1D1 : 31DD;  -- 		JNEG 	RotateCW ; else RotateCC
           1D2 : 0AB2;  -- 		LOAD 	FSlow
           1D3 : 988B;  -- 		OUT		RVELCMD
           1D4 : 0AB3;  -- 		LOAD 	RSlow
           1D5 : 9883;  -- 		OUT		LVELCMD
           1D6 : 90C2;  -- 		IN 		THETA
           1D7 : 227D;  -- 		SUB 	HighErr
           1D8 : 39D2;  -- 		JPOS	RotateCC
           1D9 : 90C2;  -- 		IN 		THETA
           1DA : 227C;  -- 		SUB  	LowErr
           1DB : 31D2;  -- 		JNEG	RotateCC
           1DC : 29E7;  -- 		JUMP 	RotateEnd
           1DD : 0AB3;  -- 		LOAD 	RSlow
           1DE : 988B;  -- 		OUT		RVELCMD
           1DF : 0AB2;  -- 		LOAD 	FSlow
           1E0 : 9883;  -- 		OUT		LVELCMD
           1E1 : 90C2;  -- 		IN 		THETA
           1E2 : 227D;  -- 		SUB 	HighErr
           1E3 : 39DD;  -- 		JPOS	RotateCW
           1E4 : 90C2;  -- 		IN 		THETA
           1E5 : 227C;  -- 		SUB  	LowErr
           1E6 : 31DD;  -- 		JNEG	RotateCW
           1E7 : 81AE;  -- 		CALL 	StopMovement
           1E8 : 0A79;  -- 		LOAD 	Temp
           1E9 : 8800;  -- 		RETURN
           1EA : 0AA3;  -- 	LOAD 	MASK2
           1EB : 52A4;  -- 	OR 		MASK3
           1EC : 98B2;  -- 	OUT 	SONAREN
           1ED : 90C2;  -- 	IN  	THETA
           1EE : 11F9;  -- 	STORE 	DTheta
           1EF : 0AB4;  -- 	LOAD 	FMid
           1F0 : 11FA;  -- 	STORE 	DVel
           1F1 : 81FB;  -- 	CALL ControlMovement
           1F2 : 90AA;  -- 	IN 		DIST2
           1F3 : 1A86;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           1F4 : 39F1;  -- 	JPOS 	CheckWall
           1F5 : 90AB;  -- 	IN 		DIST3
           1F6 : 1A86;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           1F7 : 39F1;  -- 	JPOS 	CheckWall
           1F8 : 81AE;  -- 	CALL 	StopMovement 	; stops movement
           1F9 : 0000;  -- DTheta:    DW 0
           1FA : 0000;  -- DVel:      DW 0
           1FB : 90C2;  -- 	IN     THETA
           1FC : 21F9;  -- 	SUB    DTheta      ; actual - desired angle
           1FD : 821A;  -- 	CALL   Neg         ; desired - actual angle
           1FE : 68B4;  -- 	ADDI   180
           1FF : 81BF;  -- 	CALL   Mod360
           200 : 6F4C;  -- 	ADDI   -180
           201 : 6002;  -- 	SHIFT  2
           202 : 120D;  -- 	STORE  CMAErr      ; hold temporarily
           203 : 09FA;  -- 	LOAD   DVel
           204 : 1A0D;  -- 	ADD    CMAErr
           205 : 820E;  -- 	CALL   CapVel      ; ensure velocity is valid
           206 : 988B;  -- 	OUT    RVELCMD
           207 : 0A0D;  -- 	LOAD   CMAErr
           208 : 821A;  -- 	CALL   Neg         ; left wheel gets negative differential
           209 : 19FA;  -- 	ADD    DVel
           20A : 820E;  -- 	CALL   CapVel
           20B : 9883;  -- 	OUT    LVELCMD
           20C : 8800;  -- 	RETURN
           20D : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           20E : 6E0C;  -- 	ADDI    -500
           20F : 3A15;  -- 	JPOS    CapVelHigh
           210 : 69F4;  -- 	ADDI    500
           211 : 69F4;  -- 	ADDI    500
           212 : 3217;  -- 	JNEG    CapVelLow
           213 : 6E0C;  -- 	ADDI    -500
           214 : 8800;  -- 	RETURN
           215 : B9F4;  -- 	LOADI   500
           216 : 8800;  -- 	RETURN
           217 : BE0C;  -- 	LOADI   -500
           218 : 8800;  -- 	RETURN
           219 : 3A1C;  -- 	JPOS   Abs_r
           21A : 5A95;  -- 	XOR    NegOne       ; Flip all bits
           21B : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           21C : 8800;  -- 	RETURN
           21D : B800;  -- 		LOADI  0
           21E : 119A;  -- 		STORE  m16sc        ; clear carry
           21F : 119D;  -- 		STORE  mres16sH     ; clear result
           220 : B810;  -- 		LOADI  16           ; load 16 to counter
           221 : 119B;  -- 		STORE  mcnt16s
           222 : 099A;  -- 		LOAD   m16sc        ; check the carry (from previous iteration)
           223 : 4227;  -- 		JZERO  Mult16s_noc  ; if no carry, move on
           224 : 099D;  -- 		LOAD   mres16sH     ; if a carry,
           225 : 1998;  -- 		ADD    m16sA        ;  add multiplicand to result H
           226 : 119D;  -- 		STORE  mres16sH
           227 : 0999;  -- 		LOAD   m16sB
           228 : 4A97;  -- 		AND    One          ; check bit 0 of multiplier
           229 : 119A;  -- 		STORE  m16sc        ; save as next carry
           22A : 422E;  -- 		JZERO  Mult16s_sh   ; if no carry, move on to shift
           22B : 099D;  -- 		LOAD   mres16sH     ; if bit 0 set,
           22C : 2198;  -- 		SUB    m16sA        ;  subtract multiplicand from result H
           22D : 119D;  -- 		STORE  mres16sH
           22E : 0999;  -- 		LOAD   m16sB
           22F : 6011;  -- 		SHIFT  -1           ; shift result L >>1
           230 : 4997;  -- 		AND    c7FFF        ; clear msb
           231 : 1199;  -- 		STORE  m16sB
           232 : 099D;  -- 		LOAD   mres16sH     ; load result H
           233 : 600F;  -- 		SHIFT  15           ; move lsb to msb
           234 : 5199;  -- 		OR     m16sB
           235 : 1199;  -- 		STORE  m16sB        ; result L now includes carry out from H
           236 : 099D;  -- 		LOAD   mres16sH
           237 : 6011;  -- 		SHIFT  -1
           238 : 119D;  -- 		STORE  mres16sH     ; shift result H >>1
           239 : 099B;  -- 		LOAD   mcnt16s
           23A : 6FFF;  -- 		ADDI   -1           ; check counter
           23B : 3A21;  -- 		JPOS   Mult16s_loop ; need to iterate 16 times
           23C : 0999;  -- 		LOAD   m16sB
           23D : 119C;  -- 		STORE  mres16sL     ; multiplier and result L shared a word
           23E : 8800;  -- 		RETURN              ; Done
           23F : 9802;  -- 	OUT    TIMER
           240 : 9002;  -- 	IN     TIMER
           241 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           242 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           243 : 3240;  -- 	JNEG   Wloop
           244 : 8800;  -- 	RETURN
           245 : 824D;  -- 	CALL   BlockI2C    ; wait for idle
           246 : 0ABB;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           247 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           248 : 0A96;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           249 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           24A : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           24B : 824D;  -- 	CALL   BlockI2C    ; wait for it to finish
           24C : 8800;  -- 	RETURN
           24D : 0A96;  -- 	LOAD   Zero
           24E : 1279;  -- 	STORE  Temp        ; Used to check for timeout
           24F : 0A79;  -- 	LOAD   Temp
           250 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           251 : 1279;  -- 	STORE  Temp
           252 : 4256;  -- 	JZERO  I2CError    ; Timeout occurred; error
           253 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           254 : 3A4F;  -- 	JPOS   BI2CL       ; If not 0, try again
           255 : 8800;  -- 	RETURN             ; Else return
           256 : 0A96;  -- 	LOAD   Zero
           257 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           258 : 9804;  -- 	OUT    SSEG1
           259 : 9805;  -- 	OUT    SSEG2       ; display error message
           25A : 2A56;  -- 	JUMP   I2CError
           25B : 8273;  -- 	CALL   GetBattLvl
           25C : 425B;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           25D : 22BA;  -- 	SUB    MinBatt
           25E : 3261;  -- 	JNEG   DeadBatt
           25F : 1ABA;  -- 	ADD    MinBatt     ; get original value back
           260 : 8800;  -- 	RETURN
           261 : 0A9A;  -- 	LOAD   Four
           262 : 980A;  -- 	OUT    BEEP        ; start beep sound
           263 : 8273;  -- 	CALL   GetBattLvl  ; get the battery level
           264 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           265 : 9805;  -- 	OUT    SSEG2
           266 : 9806;  -- 	OUT    LCD
           267 : 0A96;  -- 	LOAD   Zero
           268 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           269 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           26A : 9807;  -- 	OUT    XLEDS
           26B : 823F;  -- 	CALL   Wait1       ; 1 second
           26C : 0A96;  -- 	Load   Zero
           26D : 980A;  -- 	OUT    BEEP        ; stop beeping
           26E : 0A96;  -- 	LOAD   Zero
           26F : 9801;  -- 	OUT    LEDS        ; LEDs off
           270 : 9807;  -- 	OUT    XLEDS
           271 : 823F;  -- 	CALL   Wait1       ; 1 second
           272 : 2A61;  -- 	JUMP   DeadBatt    ; repeat forever
           273 : 0ABC;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           274 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           275 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           276 : 824D;  -- 	CALL   BlockI2C    ; wait for it to finish
           277 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           278 : 8800;  -- 	RETURN
           279 : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           27A : 0000;  -- WaitTime:			DW 0
           27B : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           27C : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           27D : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           27E : 0004;  -- ErrMargin: 			DW 4
           27F : 0000;  -- XDir:				DW 0		; Current direction on the X access robot is moving. 1 = right, 0 = left
           280 : 0000;  -- ObjectXDist:		DW 0 		; The x position of the next closest object
           281 : 0000;  -- ObjectYDist:		DW 0		; The absolute value of the y position of the next closest object
           282 : 0000;  -- AlongLongWall:		DW 0		; Boolean that signifies if robot is aligned along the longest wall
           283 : 0000;  -- ObjectsPosTheta:	DW 0		; Boolean that signifies if the robot has to turn in a positive angle to tag objects
           284 : 0000;  -- TagVelocity:		DW 0		; Number that signifies the speed and direction the robot has to go in to get to the next closest object along the wall
           285 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           286 : FF38;  -- WallThresh: 		DW -200 	; Defines distance away from wall before DE2Bot should stop moving (used in GoHome function)
           287 : 0000;  -- Cell: 				DW 0		; Initialize cell value
           288 : 0000;  -- CellCount:  		DW 0 		; How many values in the occupancy array
           289 : 064C;  -- CellArrI:   		DW &H64c	; Memory location (starting index) of the cell array
           28A : 0000;  -- XposIndex:			DW 0		; Initialize a temporary index for cell array indexing
           28B : 0000;  -- FilterVal:			DW 0		; Updated in the code to set up the max filter
           28C : 0000;  -- y_val:			DW 0
           28D : 0000;  -- THETAtemp2:		DW 0
           28E : 0000;  -- THETAtemp4:		DW 0
           28F : 0000;  -- THETA2:			DW 0
           290 : 0000;  -- THETA4:			DW 0
           291 : 0000;  -- THETA6:			DW 0
           292 : 0000;  -- TCOPY:			DW 0
           293 : 0000;  -- CosSum:			DW 0
           294 : FFFB;  -- NegFive:	DW -5
           295 : FFFF;  -- NegOne:   	DW -1
           296 : 0000;  -- Zero:     	DW 0
           297 : 0001;  -- One:      	DW 1
           298 : 0002;  -- Two:      	DW 2
           299 : 0003;  -- Three:    	DW 3
           29A : 0004;  -- Four:     	DW 4
           29B : 0005;  -- Five:     	DW 5
           29C : 0006;  -- Six:      	DW 6
           29D : 0007;  -- Seven:    	DW 7
           29E : 0008;  -- Eight:    	DW 8
           29F : 0009;  -- Nine:     	DW 9
           2A0 : 000A;  -- Ten:      	DW 10
           2A1 : 0001;  -- Mask0:    DW &B00000001
           2A2 : 0002;  -- Mask1:    DW &B00000010
           2A3 : 0004;  -- Mask2:    DW &B00000100
           2A4 : 0008;  -- Mask3:    DW &B00001000
           2A5 : 0010;  -- Mask4:    DW &B00010000
           2A6 : 0020;  -- Mask5:    DW &B00100000
           2A7 : 0040;  -- Mask6:    DW &B01000000
           2A8 : 0080;  -- Mask7:    DW &B10000000
           2A9 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           2AA : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           2AB : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           2AC : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           2AD : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           2AE : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           2AF : 00B4;  -- Deg180:   DW 180       ; 180
           2B0 : 010E;  -- Deg270:   DW 270       ; 270
           2B1 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           2B2 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           2B3 : FF9C;  -- RSlow:    DW -100
           2B4 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           2B5 : FEA2;  -- RMid:     DW -350
           2B6 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2B7 : FE0C;  -- RFast:    DW -500
           2B8 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           2B9 : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           2BA : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2BB : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2BC : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           64C : 0000;  -- DW		0	; Array start	
  END;
