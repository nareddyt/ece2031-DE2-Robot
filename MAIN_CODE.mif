-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0A97;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 81A1;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 81B7;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4AA6;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4AA3;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4AA3;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 126D;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 526D;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4AA4;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0A97;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT 	RESETPOS	
           01D : 8030;  -- 	CALL	InitializeVars
           01E : 8042;  -- 	CALL	InitializeMap
           01F : BA62;  -- 	LOADI 	610 ; Assume a certain distance
           020 : 1275;  -- 	STORE 	ObjectYDist ; This variable should have a particular value
           021 : B85A;  -- 	LOADI 	90
           022 : 126F;  -- 	STORE 	Angle
           023 : 8117;  -- 	CALL 	Rotate
           024 : 80A9;  -- 	CALL 	Tag
           025 : 8043;  -- 	CALL	InitialSearch
           026 : 807A;  -- 	CALL	FindAndTagClosestObject
           027 : 98C3;  -- 	OUT 	RESETPOS
           028 : 0A97;  -- 		LOAD   Zero         ; Stop everything.
           029 : 9883;  -- 		OUT    LVELCMD
           02A : 988B;  -- 		OUT    RVELCMD
           02B : 98B2;  -- 		OUT    SONAREN
           02C : 082F;  -- 		LOAD   DEAD         ; An indication that we are dead
           02D : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           02E : 282E;  -- 		JUMP   Forever      ; Do this forever.
           02F : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           030 : 9000;  -- 		IN		SWITCHES
           031 : 4AA2;  -- 		AND		MASK0
           032 : 1276;  -- 		STORE 	AlongLongWall
           033 : 383B;  -- 		JPOS 	LongWallInit
           034 : B85A;  -- 		LOADI	90
           035 : 127F;  -- 		STORE 	TagAng
           036 : B90E;  -- 		LOADI	270
           037 : 1280;  -- 		STORE 	WallAng
           038 : B8B4;  -- 		LOADI	180
           039 : 1281;  -- 		STORE 	HomeAng
           03A : 8800;  -- 		RETURN
           03B : B90E;  -- 		LOADI	270
           03C : 127F;  -- 		STORE 	TagAng
           03D : B85A;  -- 		LOADI	90
           03E : 1280;  -- 		STORE 	WallAng
           03F : B8B4;  -- 		LOADI	180
           040 : 1281;  -- 		STORE 	HomeAng
           041 : 8800;  -- 		RETURN
           042 : 0000;  -- 	DW 0
           043 : 0AA4;  -- 		LOAD	MASK2
           044 : 1AA5;  -- 		ADD		MASK3
           045 : 805D;  -- 		CALL 	UpdateMap
           046 : 0A76;  -- 		LOAD	AlongLongWall
           047 : 404C;  -- 		JZERO	LoadShortDistance
           048 : 3849;  -- 		JPOS	LoadLongDistance
           049 : 90C0;  -- 		IN		XPOS
           04A : 22B9;  -- 		SUB		MaxLong
           04B : 284F;  -- 		JUMP	DistanceCheck
           04C : 90C0;  -- 		IN		XPOS
           04D : 22BA;  -- 		SUB		MaxShort
           04E : 284F;  -- 		JUMP 	DistanceCheck
           04F : 3856;  -- 		JPOS	DoneForward
           050 : 0A97;  -- 		LOAD	ZERO
           051 : 1155;  -- 		STORE	DTheta
           052 : 0AB5;  -- 		LOAD	FMid
           053 : 1156;  -- 		STORE	DVel
           054 : 8157;  -- 		CALL	ControlMovement
           055 : 2845;  -- 		JUMP	KeepGoingForward
           056 : 0A97;  -- 		LOAD	ZERO
           057 : 9883;  -- 		OUT		LVELCMD
           058 : 988B;  -- 		OUT		RVELCMD
           059 : 0AB0;  -- 		LOAD	Deg180
           05A : 126F;  -- 		STORE	Angle
           05B : 8117;  -- 		CALL	Rotate
           05C : 8800;  -- 		RETURN
           05D : 0A76;  --  	LOAD 	AlongLongWall
           05E : 5A73;  --  	XOR 	XDir
           05F : 3868;  -- 	JPOS 	ELHS ; If 1, robot is set up for long axis traversal
           060 : 4061;  -- 	JZERO  	ERHS ; If 0, robot setup values for short axis traverse
           061 : 0AA7;  -- 	 	LOAD	MASK5
           062 : 98B2;  -- 	 	OUT 	SONAREN
           063 : 90AD;  -- 	 	IN 		DIST5
           064 : 127B;  -- 	 	STORE	Cell
           065 : 80FD;  -- 	 	CALL	KillSonars
           066 : 806F;  -- 		CALL	UpdateCell
           067 : 8800;  -- 	 	RETURN
           068 : 0AA2;  -- 		LOAD	MASK0
           069 : 98B2;  -- 		OUT 	SONAREN
           06A : 90A8;  -- 		IN 		DIST0
           06B : 127B;  -- 		STORE	Cell
           06C : 80FD;  -- 	 	CALL	KillSonars
           06D : 806F;  -- 	 	CALL	UpdateCell
           06E : 8800;  -- 		RETURN
           06F : 90C0;  --  	IN		XPOS
           070 : 6015;  -- 	SHIFT 	NEGFIVE
           071 : 1A7D;  -- 	ADD		CellArrI
           072 : 127E;  -- 	STORE 	XposIndex
           073 : 8075;  -- 	CALL	FilterAndAggregate
           074 : 8800;  -- 	RETURN
           075 : 8800;  -- 	RETURN
           076 : 0AA1;  -- 	LOAD	TEN
           077 : 1274;  -- 	STORE	ObjectXDist
           078 : 1275;  -- 	STORE	ObjectYDist
           079 : 8800;  -- 	RETURN
           07A : 8076;  -- 		CALL	FindClosestObject
           07B : 90C0;  -- 		IN	 	XPOS
           07C : 2274;  -- 		SUB 	ObjectXDist
           07D : 3080;  -- 		JNEG	GoRight
           07E : 4099;  -- 		JZERO 	AtObjectX
           07F : 3883;  -- 		JPOS	GoLeft
           080 : 0A98;  -- 		LOAD 	ONE
           081 : 1273;  -- 		STORE 	XDir
           082 : 2885;  -- 		JUMP 	MoveLoop
           083 : 0A97;  -- 		LOAD 	ZERO
           084 : 1273;  -- 		STORE 	XDir
           085 : 805D;  -- 		CALL 	UpdateMap
           086 : 0A73;  -- 		LOAD 	XDir
           087 : 408E;  -- 		JZERO 	CheckLess
           088 : 3889;  -- 		JPOS	CheckGreat
           089 : 90C0;  -- 		IN		XPOS
           08A : 2274;  -- 		SUB		ObjectXDist
           08B : 4099;  -- 		JZERO 	AtObjectX
           08C : 3899;  -- 		JPOS	AtObjectX
           08D : 2893;  -- 		JUMP	KeepGoingInDirection
           08E : 90C0;  -- 		IN		XPOS
           08F : 2274;  -- 		SUB		ObjectXDist
           090 : 4099;  -- 		JZERO 	AtObjectX
           091 : 3099;  -- 		JNEG	AtObjectX
           092 : 2893;  -- 		JUMP	KeepGoingInDirection
           093 : 0A97;  -- 		LOAD	ZERO
           094 : 1155;  -- 		STORE	DTheta
           095 : 0AB5;  -- 		LOAD	FMid
           096 : 1156;  -- 		STORE	DVel
           097 : 8157;  -- 		CALL	ControlMovement
           098 : 2885;  -- 		JUMP	MoveLoop
           099 : 0A97;  -- 		LOAD	ZERO
           09A : 9883;  -- 		OUT		LVELCMD
           09B : 988B;  -- 		OUT		RVELCMD
           09C : 8800;  -- 		RETURN
           09D : 2800;  -- 	JUMP 	Init
           09E : 8800;  -- 	RETURN
           09F : 813C;  -- 	CALL 	GoToWall
           0A0 : BFA6;  -- 	LOADI 	-90
           0A1 : 126F;  -- 	STORE 	Angle
           0A2 : 0A76;  -- 	LOAD 	AlongLongWall
           0A3 : 40A6;  -- 	JZERO 	HomeRotate
           0A4 : B85A;  -- 	LOADI 	90
           0A5 : 126F;  -- 	STORE 	Angle
           0A6 : 8117;  -- 	CALL  	Rotate
           0A7 : 814D;  -- 	CALL 	GoToWall2
           0A8 : 289D;  -- 	JUMP 	BackAtHome
           0A9 : 126D;  -- 	STORE 	Temp
           0AA : 90C1;  -- 	IN   	YPOS
           0AB : 1279;  -- 	STORE 	EncoderY
           0AC : 0A7F;  -- 	LOAD 	TagAng
           0AD : 1155;  -- 	STORE 	DTheta
           0AE : 0AB5;  -- 	LOAD 	FMid
           0AF : 1156;  -- 	STORE 	DVel
           0B0 : 8157;  -- 	CALL 	ControlMovement
           0B1 : 90C1;  -- 	IN 		YPOS
           0B2 : 8175;  -- 	CALL 	Abs
           0B3 : 2279;  -- 	SUB 	EncoderY
           0B4 : 2275;  -- 	SUB 	ObjectYDist
           0B5 : 6FF6;  -- 	ADDI 	-10
           0B6 : 30B0;  -- 	JNEG 	TagIt
           0B7 : 90C1;  -- 	IN 		YPOS
           0B8 : 8175;  -- 	CALL 	Abs
           0B9 : 6FE2;  -- 	ADDI 	-30
           0BA : 1279;  -- 	STORE 	EncoderY
           0BB : 0AB6;  -- 	LOAD 	RMid
           0BC : 1156;  -- 	STORE 	DVel
           0BD : 8157;  -- 	CALL ControlMovement
           0BE : 90C1;  -- 	IN 		YPOS
           0BF : 8175;  -- 	CALL 	Abs
           0C0 : 2279;  -- 	SUB 	EncoderY
           0C1 : 38BD;  -- 	JPOS 	MoveBack
           0C2 : B8B4;  -- 	LOADI 	180
           0C3 : 8117;  -- 	CALL 	Rotate
           0C4 : 809F;  -- 	CALL 	GoHome
           0C5 : 082A;  -- Middle:			DW 2090
           0C6 : 805D;  -- 		CALL 	UpdateMap
           0C7 : 08C0;  -- 		LOAD 	XPOS
           0C8 : 1FD6;  -- 		ADD 	-2090
           0C9 : 30CB;  -- 		JNEG 	NotAtMiddle
           0CA : 28CF;  -- 		JUMP 	AtMiddle
           0CB : 0AB5;  -- 		LOAD	FMid
           0CC : 9883;  -- 		OUT		LVELCMD
           0CD : 988B;  -- 		OUT		RVELCMD
           0CE : 28C6;  -- 		JUMP  CheckIfMiddle
           0CF : 0A97;  -- 	LOAD	ZERO
           0D0 : 9883;  -- 	OUT		LVELCMD
           0D1 : 988B;  -- 	OUT		RVELCMD
           0D2 : 0AA4;  -- 	LOAD	MASK2
           0D3 : 98B2;  -- 	OUT		SONAREN
           0D4 : 0AA5;  -- 	LOAD	MASK3
           0D5 : 98B2;  -- 	OUT		SONAREN
           0D6 : 805D;  -- 		CALL 	UpdateMap
           0D7 : 08AA;  -- 		LOAD	DIST2
           0D8 : 6C6D;  -- 		ADDI	-915
           0D9 : 30DB;  -- 		JNEG	TwoGot
           0DA : 28E4;  -- 		JUMP	Rotate10
           0DB : 0A98;  -- 		LOAD	ONE
           0DC : 08AB;  -- 		LOAD	DIST3
           0DD : 6C6D;  -- 		ADDI	-915
           0DE : 30E0;  -- 		JNEG	ThreeGot
           0DF : 28E4;  -- 		JUMP	Rotate10
           0E0 : 0A97;  -- 		LOAD	ZERO
           0E1 : 9883;  -- 		OUT		LVELCMD
           0E2 : 988B;  -- 		OUT		RVELCMD
           0E3 : 28E0;  -- 		JUMP	ThreeGot
           0E4 : 0A97;  -- 		LOAD 	ZERO
           0E5 : 680C;  -- 		ADDI 	12
           0E6 : 126F;  -- 		STORE Angle
           0E7 : 2917;  -- 		JUMP	Rotate
           0E8 : 28D6;  -- 		JUMP	CheckMidObj
           0E9 : 7FFF;  -- c7FFF: DW &H7FFF
           0EA : 0000;  -- m16sA: DW 0 ; multiplicand
           0EB : 0000;  -- m16sB: DW 0 ; multipler
           0EC : 0000;  -- m16sc: DW 0 ; carry
           0ED : 0000;  -- mcnt16s: DW 0 ; counter
           0EE : 0000;  -- mres16sL: DW 0 ; result low
           0EF : 0000;  -- mres16sH: DW 0 ; result high
           0F0 : 005A;  -- Ang0:		DW 90
           0F1 : 002C;  -- Ang1:		DW 44
           0F2 : 000C;  -- Ang2:		DW 12
           0F3 : FFF4;  -- Ang3:		DW -12
           0F4 : FFD4;  -- Ang4:		DW -44
           0F5 : FFA6;  -- Ang5:		DW -90
           0F6 : FF70;  -- Ang6:		DW -144
           0F7 : 0090;  -- Ang7:		DW 144
           0F8 : 0000;  -- SensorToCheck: 	DW 0
           0F9 : 0000;  -- SensorAngle:		DW 0
           0FA : 0000;  -- SensorDist: 		DW 0
           0FB : 0000;  -- SensorIndex: 		DW 0
           0FC : 0000;  -- SensorUpdate:		DW 0
           0FD : 0A97;  -- 	LOAD	ZERO
           0FE : 98B2;  -- 	OUT		SONAREN
           0FF : 8800;  -- 	RETURN
           100 : 0A97;  -- 	LOAD 	ZERO
           101 : 9883;  -- 	OUT 	LVELCMD
           102 : 988B;  -- 	OUT 	RVELCMD
           103 : 8800;  -- 	RETURN
           104 : 126D;  -- 	STORE	Temp
           105 : B802;  -- 	LOADI 	2
           106 : 980A;  -- 	OUT		BEEP
           107 : B801;  -- 	LOADI	1
           108 : 126E;  -- 	STORE	WaitTime
           109 : 9802;  -- 	OUT		Timer
           10A : 9002;  -- 		IN 		Timer
           10B : 226E;  -- 		SUB 	WaitTime
           10C : 310A;  -- 		JNEG	BeepLoop
           10D : B800;  -- 		LOADI	0
           10E : 980A;  -- 		OUT		BEEP
           10F : 0A6D;  -- 		LOAD 	Temp
           110 : 8800;  -- 		RETURN
           111 : 3114;  -- 	JNEG	M360N
           112 : 6E98;  -- 	ADDI 	-360
           113 : 2911;  -- 	JUMP 	Mod360
           114 : 6968;  -- 		ADDI 	360
           115 : 3114;  -- 		JNEG 	M360N
           116 : 8800;  -- 		RETURN
           117 : 126D;  -- 		STORE	Temp
           118 : 90C2;  -- 		IN 		THETA
           119 : 1A6F;  -- 		ADD 	Angle
           11A : 2272;  -- 		SUB 	ErrMargin
           11B : 8111;  -- 		CALL 	Mod360
           11C : 1270;  -- 		STORE 	LowErr
           11D : 90C2;  -- 		IN 		THETA
           11E : 1A6F;  -- 		ADD 	Angle
           11F : 1A72;  -- 		ADD 	ErrMargin
           120 : 8111;  -- 		CALL 	Mod360
           121 : 1271;  -- 		STORE 	HighErr
           122 : 0A6F;  -- 		LOAD 	Angle
           123 : 312F;  -- 		JNEG 	RotateCW ; else RotateCC
           124 : 0AB3;  -- 		LOAD 	FSlow
           125 : 988B;  -- 		OUT		RVELCMD
           126 : 0AB4;  -- 		LOAD 	RSlow
           127 : 9883;  -- 		OUT		LVELCMD
           128 : 90C2;  -- 		IN 		THETA
           129 : 2271;  -- 		SUB 	HighErr
           12A : 3924;  -- 		JPOS	RotateCC
           12B : 90C2;  -- 		IN 		THETA
           12C : 2270;  -- 		SUB  	LowErr
           12D : 3124;  -- 		JNEG	RotateCC
           12E : 2939;  -- 		JUMP 	RotateEnd
           12F : 0AB4;  -- 		LOAD 	RSlow
           130 : 988B;  -- 		OUT		RVELCMD
           131 : 0AB3;  -- 		LOAD 	FSlow
           132 : 9883;  -- 		OUT		LVELCMD
           133 : 90C2;  -- 		IN 		THETA
           134 : 2271;  -- 		SUB 	HighErr
           135 : 392F;  -- 		JPOS	RotateCW
           136 : 90C2;  -- 		IN 		THETA
           137 : 2270;  -- 		SUB  	LowErr
           138 : 312F;  -- 		JNEG	RotateCW
           139 : 8100;  -- 		CALL 	StopMovement
           13A : 0A6D;  -- 		LOAD 	Temp
           13B : 8800;  -- 		RETURN
           13C : 0AA4;  -- 	LOAD 	MASK2
           13D : 52A5;  -- 	OR 		MASK3
           13E : 98B2;  -- 	OUT 	SONAREN
           13F : 0A80;  -- 	LOAD  	WallAng
           140 : 1155;  -- 	STORE 	DTheta
           141 : 0AB5;  -- 	LOAD 	FMid
           142 : 1156;  -- 	STORE 	DVel
           143 : 8157;  -- 	CALL ControlMovement
           144 : 90AA;  -- 	IN 		DIST2
           145 : 1A7A;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           146 : 3943;  -- 	JPOS 	CheckWall
           147 : 90AB;  -- 	IN 		DIST3
           148 : 1A7A;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           149 : 3943;  -- 	JPOS 	CheckWall
           14A : 8100;  -- 	CALL 	StopMovement 	; stops movement
           14B : 80FD;  -- 	CALL 	KillSonars
           14C : 8800;  -- 	RETURN
           14D : 0AA4;  -- 	LOAD 	MASK2
           14E : 52A5;  -- 	OR 		MASK3
           14F : 98B2;  -- 	OUT 	SONAREN
           150 : 0A81;  -- 	LOAD  	HomeAng
           151 : 1155;  -- 	STORE 	DTheta
           152 : 0AB5;  -- 	LOAD 	FMid
           153 : 1156;  -- 	STORE 	DVel
           154 : 2943;  -- 	JUMP 	CheckWall
           155 : 0000;  -- DTheta:    DW 0
           156 : 0000;  -- DVel:      DW 0
           157 : 90C2;  -- 	IN     THETA
           158 : 2155;  -- 	SUB    DTheta      ; actual - desired angle
           159 : 8176;  -- 	CALL   Neg         ; desired - actual angle
           15A : 68B4;  -- 	ADDI   180
           15B : 8111;  -- 	CALL   Mod360
           15C : 6F4C;  -- 	ADDI   -180
           15D : 6002;  -- 	SHIFT  2
           15E : 1169;  -- 	STORE  CMAErr      ; hold temporarily
           15F : 0956;  -- 	LOAD   DVel
           160 : 1969;  -- 	ADD    CMAErr
           161 : 816A;  -- 	CALL   CapVel      ; ensure velocity is valid
           162 : 988B;  -- 	OUT    RVELCMD
           163 : 0969;  -- 	LOAD   CMAErr
           164 : 8176;  -- 	CALL   Neg         ; left wheel gets negative differential
           165 : 1956;  -- 	ADD    DVel
           166 : 816A;  -- 	CALL   CapVel
           167 : 9883;  -- 	OUT    LVELCMD
           168 : 8800;  -- 	RETURN
           169 : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           16A : 6E0C;  -- 	ADDI    -500
           16B : 3971;  -- 	JPOS    CapVelHigh
           16C : 69F4;  -- 	ADDI    500
           16D : 69F4;  -- 	ADDI    500
           16E : 3173;  -- 	JNEG    CapVelLow
           16F : 6E0C;  -- 	ADDI    -500
           170 : 8800;  -- 	RETURN
           171 : B9F4;  -- 	LOADI   500
           172 : 8800;  -- 	RETURN
           173 : BE0C;  -- 	LOADI   -500
           174 : 8800;  -- 	RETURN
           175 : 3978;  -- 	JPOS   Abs_r
           176 : 5A96;  -- 	XOR    NegOne       ; Flip all bits
           177 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           178 : 8800;  -- 	RETURN
           179 : B800;  -- 		LOADI  0
           17A : 10EC;  -- 		STORE  m16sc        ; clear carry
           17B : 10EF;  -- 		STORE  mres16sH     ; clear result
           17C : B810;  -- 		LOADI  16           ; load 16 to counter
           17D : 10ED;  -- 		STORE  mcnt16s
           17E : 08EC;  -- 		LOAD   m16sc        ; check the carry (from previous iteration)
           17F : 4183;  -- 		JZERO  Mult16s_noc  ; if no carry, move on
           180 : 08EF;  -- 		LOAD   mres16sH     ; if a carry,
           181 : 18EA;  -- 		ADD    m16sA        ;  add multiplicand to result H
           182 : 10EF;  -- 		STORE  mres16sH
           183 : 08EB;  -- 		LOAD   m16sB
           184 : 4A98;  -- 		AND    One          ; check bit 0 of multiplier
           185 : 10EC;  -- 		STORE  m16sc        ; save as next carry
           186 : 418A;  -- 		JZERO  Mult16s_sh   ; if no carry, move on to shift
           187 : 08EF;  -- 		LOAD   mres16sH     ; if bit 0 set,
           188 : 20EA;  -- 		SUB    m16sA        ;  subtract multiplicand from result H
           189 : 10EF;  -- 		STORE  mres16sH
           18A : 08EB;  -- 		LOAD   m16sB
           18B : 6011;  -- 		SHIFT  -1           ; shift result L >>1
           18C : 48E9;  -- 		AND    c7FFF        ; clear msb
           18D : 10EB;  -- 		STORE  m16sB
           18E : 08EF;  -- 		LOAD   mres16sH     ; load result H
           18F : 600F;  -- 		SHIFT  15           ; move lsb to msb
           190 : 50EB;  -- 		OR     m16sB
           191 : 10EB;  -- 		STORE  m16sB        ; result L now includes carry out from H
           192 : 08EF;  -- 		LOAD   mres16sH
           193 : 6011;  -- 		SHIFT  -1
           194 : 10EF;  -- 		STORE  mres16sH     ; shift result H >>1
           195 : 08ED;  -- 		LOAD   mcnt16s
           196 : 6FFF;  -- 		ADDI   -1           ; check counter
           197 : 397D;  -- 		JPOS   Mult16s_loop ; need to iterate 16 times
           198 : 08EB;  -- 		LOAD   m16sB
           199 : 10EE;  -- 		STORE  mres16sL     ; multiplier and result L shared a word
           19A : 8800;  -- 		RETURN              ; Done
           19B : 9802;  -- 	OUT    TIMER
           19C : 9002;  -- 	IN     TIMER
           19D : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           19E : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           19F : 319C;  -- 	JNEG   Wloop
           1A0 : 8800;  -- 	RETURN
           1A1 : 81A9;  -- 	CALL   BlockI2C    ; wait for idle
           1A2 : 0ABC;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1A3 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1A4 : 0A97;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1A5 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1A6 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1A7 : 81A9;  -- 	CALL   BlockI2C    ; wait for it to finish
           1A8 : 8800;  -- 	RETURN
           1A9 : 0A97;  -- 	LOAD   Zero
           1AA : 126D;  -- 	STORE  Temp        ; Used to check for timeout
           1AB : 0A6D;  -- 	LOAD   Temp
           1AC : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1AD : 126D;  -- 	STORE  Temp
           1AE : 41B2;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1AF : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1B0 : 39AB;  -- 	JPOS   BI2CL       ; If not 0, try again
           1B1 : 8800;  -- 	RETURN             ; Else return
           1B2 : 0A97;  -- 	LOAD   Zero
           1B3 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           1B4 : 9804;  -- 	OUT    SSEG1
           1B5 : 9805;  -- 	OUT    SSEG2       ; display error message
           1B6 : 29B2;  -- 	JUMP   I2CError
           1B7 : 81CF;  -- 	CALL   GetBattLvl
           1B8 : 41B7;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1B9 : 22BB;  -- 	SUB    MinBatt
           1BA : 31BD;  -- 	JNEG   DeadBatt
           1BB : 1ABB;  -- 	ADD    MinBatt     ; get original value back
           1BC : 8800;  -- 	RETURN
           1BD : 0A9B;  -- 	LOAD   Four
           1BE : 980A;  -- 	OUT    BEEP        ; start beep sound
           1BF : 81CF;  -- 	CALL   GetBattLvl  ; get the battery level
           1C0 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1C1 : 9805;  -- 	OUT    SSEG2
           1C2 : 9806;  -- 	OUT    LCD
           1C3 : 0A97;  -- 	LOAD   Zero
           1C4 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1C5 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1C6 : 9807;  -- 	OUT    XLEDS
           1C7 : 819B;  -- 	CALL   Wait1       ; 1 second
           1C8 : 0A97;  -- 	Load   Zero
           1C9 : 980A;  -- 	OUT    BEEP        ; stop beeping
           1CA : 0A97;  -- 	LOAD   Zero
           1CB : 9801;  -- 	OUT    LEDS        ; LEDs off
           1CC : 9807;  -- 	OUT    XLEDS
           1CD : 819B;  -- 	CALL   Wait1       ; 1 second
           1CE : 29BD;  -- 	JUMP   DeadBatt    ; repeat forever
           1CF : 0ABD;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1D0 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1D1 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1D2 : 81A9;  -- 	CALL   BlockI2C    ; wait for it to finish
           1D3 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1D4 : 8800;  -- 	RETURN
           1D5 : 08C2;  -- 		LOAD	THETA
           1D6 : 128A;  -- 		STORE 	TCOPY
           1D7 : 08C2;  -- 		LOAD 	THETA
           1D8 : 6F4C;  -- 		ADDI 	-180
           1D9 : 322C;  -- 		JNEG 	NEGSINE			; if THETA is in third or fourth quadrant, sine value will be output as negative
           1DA : 68B4;  -- 		ADDI	180
           1DB : 6FA6;  -- 		ADDI 	-90
           1DC : 3A29;  -- 		JPOS	QUAD2
           1DD : 685A;  -- 		ADDI	90
           1DE : 08C2;  -- 		LOAD 	THETA
           1DF : 10EA;  -- 		STORE 	m16sA
           1E0 : 10EB;  -- 		STORE 	m16sB
           1E1 : 8179;  -- 		CALL	Mult16s
           1E2 : 08EF;  -- 		LOAD    mres16sH
           1E3 : 6008;  -- 		SHIFT   8            ; move high word of result up 8 bits
           1E4 : 10EF;  -- 		STORE   mres16sH
           1E5 : 08EE;  -- 		LOAD    mres16sL
           1E6 : 6018;  -- 		SHIFT   -8           ; move low word of result down 8 bits
           1E7 : 4AAA;  -- 		AND     LowByte
           1E8 : 50EF;  -- 		OR      mres16sH     ; combine high and low words of result
           1E9 : 1285;  -- 		STORE	THETAtemp2	 ; equivalent to THETA ^ 2
           1EA : 1287;  -- 		STORE	THETA2
           1EB : 6011;  -- 		SHIFT	-1			 ; divide by 2
           1EC : 8176;  -- 		CALL 	Neg
           1ED : 1287;  -- 		STORE	THETA2
           1EE : 0A83;  -- 		LOAD 	THETAtemp
           1EF : 10EA;  -- 		STORE 	m16sA
           1F0 : 10EB;  -- 		STORE 	m16sB	
           1F1 : 8179;  -- 		CALL	Mult16s
           1F2 : 08EF;  -- 		LOAD    mres16sH
           1F3 : 6008;  -- 		SHIFT   8            ; move high word of result up 8 bits
           1F4 : 10EF;  -- 		STORE   mres16sH
           1F5 : 08EE;  -- 		LOAD    mres16sL
           1F6 : 6018;  -- 		SHIFT   -8           ; move low word of result down 8 bits
           1F7 : 4AAA;  -- 		AND     LowByte
           1F8 : 50EF;  -- 		OR      mres16sH     ; combine high and low words of resultv
           1F9 : 1286;  -- 		STORE 	THETAtemp4	 ; equivalent to THETA ^ 4
           1FA : 1288;  -- 		STORE 	THETA4
           1FB : B802;  -- 		LOADI 	2
           1FC : 6005;  -- 		SHIFT	5			 ; immediate of 2 ^ 5 = 32
           1FD : 6FF8;  -- 		ADDI 	-8			 ; 32 - 8 = 24
           1FE : 128E;  -- 		STORE 	d16sD
           1FF : 0A88;  -- 		LOAD 	THETA4
           200 : 128D;  -- 		STORE 	d16sN
           201 : 823C;  -- 		CALL	Div16s
           202 : 0A93;  -- 		LOAD	dres16sQ
           203 : 1288;  -- 		STORE 	THETA4
           204 : 0A86;  -- 		LOAD 	THETAtemp4	 ; performing THETA^6
           205 : 10EA;  -- 		STORE 	m16sA
           206 : 0A85;  -- 		LOAD	THETAtemp2
           207 : 10EB;  -- 		STORE 	m16sB
           208 : 8179;  -- 		CALL	Mult16s
           209 : 08EF;  -- 		LOAD    mres16sH
           20A : 6008;  -- 		SHIFT   8            ; move high word of result up 8 bits
           20B : 10EF;  -- 		STORE   mres16sH
           20C : 08EE;  -- 		LOAD    mres16sL
           20D : 6018;  -- 		SHIFT   -8           ; move low word of result down 8 bits
           20E : 4AAA;  -- 		AND     LowByte
           20F : 50EF;  -- 		OR      mres16sH     ; combine high and low words of result
           210 : 1289;  -- 		STORE	THETA6		 ; equivalent to THETA ^ 6
           211 : B802;  -- 		LOADI	2
           212 : 600A;  -- 		SHIFT	10			 ; immediate of 1024
           213 : 6ED0;  -- 		ADDI	-304		 ; 1024 - 304 = 720
           214 : 0A8E;  -- 		LOAD 	d16sD
           215 : 0A89;  -- 		LOAD 	THETA6
           216 : 128D;  -- 		STORE 	d16sN
           217 : 823C;  -- 		CALL	Div16s
           218 : 0A93;  -- 		LOAD	dres16sQ
           219 : 8176;  -- 		CALL	Neg
           21A : 1289;  -- 		STORE 	THETA6
           21B : B801;  -- 		LOADI	1
           21C : 1A87;  -- 		ADD		THETA2
           21D : 1A88;  -- 		ADD 	THETA4
           21E : 1A89;  -- 		ADD		THETA6
           21F : 128C;  -- 		STORE	x_val
           220 : 0A8A;  -- 		LOAD 	TCOPY
           221 : 6F4C;  -- 		ADDI	-180
           222 : 3A25;  -- 		JPOS	NEGYVAL
           223 : 128C;  -- 		STORE	x_val
           224 : 8800;  -- 		RETURN	
           225 : 0A8C;  -- 		LOAD 	x_val
           226 : 8176;  -- 		CALL	Neg			; negate x_val if in quadrants III o IV
           227 : 128C;  -- 		STORE 	x_val
           228 : 8800;  -- 		RETURN
           229 : 08C2;  -- 		LOAD 	THETA
           22A : 6FA6;  -- 		ADDI	-90
           22B : 29DE;  -- 		JUMP	THETAQUAD2		
           22C : B968;  -- 		LOADI	360
           22D : 20C2;  -- 		SUB		THETA
           22E : 29DE;  -- 		JUMP	THETANEGSINE
           22F : 08C2;  -- 		LOAD	THETA
           230 : 6FA6;  -- 		ADDI	-90		; finding other angle
           231 : 10C2;  -- 		STORE 	THETA
           232 : 81D5;  --  		CALL 	COSINE
           233 : 0A8C;  -- 		LOAD 	x_val	; OUTPUT OF COSINE
           234 : 1282;  -- 		STORE 	y_val	; by finding the cosine of the other angle, the sine of the original triangle can be found
           235 : 128D;  -- 		STORE 	d16sN
           236 : 0A84;  -- 		LOAD  	DISTX
           237 : 128D;  -- 		STORE 	d16sN
           238 : 823C;  -- 		CALL	Div16s
           239 : 0A93;  -- 		LOAD	dres16sQ
           23A : 1282;  -- 		STORE 	y_val
           23B : 8800;  -- 		RETURN
           23C : B800;  -- 	LOADI  0
           23D : 1294;  -- 	STORE  dres16sR     ; clear remainder result
           23E : 1291;  -- 	STORE  d16sC1       ; clear carry
           23F : 0A8D;  -- 	LOAD   d16sN
           240 : 5A8E;  -- 	XOR    d16sD
           241 : 128F;  -- 	STORE  d16sS        ; sign determination = N XOR D
           242 : B811;  -- 	LOADI  17
           243 : 1290;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           244 : 0A8E;  -- 	LOAD   d16sD
           245 : 8175;  -- 	CALL   Abs          ; take absolute value of denominator
           246 : 128E;  -- 	STORE  d16sD
           247 : 0A8D;  -- 	LOAD   d16sN
           248 : 8175;  -- 	CALL   Abs          ; take absolute value of numerator
           249 : 128D;  -- 	STORE  d16sN
           24A : 0A8D;  -- 	LOAD   d16sN
           24B : 601F;  -- 	SHIFT  -15          ; get msb
           24C : 4A98;  -- 	AND    One          ; only msb (because shift is arithmetic)
           24D : 1292;  -- 	STORE  d16sC2       ; store as carry
           24E : 0A8D;  -- 	LOAD   d16sN
           24F : 6001;  -- 	SHIFT  1            ; shift <<1
           250 : 5291;  -- 	OR     d16sC1       ; with carry
           251 : 128D;  -- 	STORE  d16sN
           252 : 0A90;  -- 	LOAD   d16sT
           253 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           254 : 4264;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           255 : 1290;  -- 	STORE  d16sT
           256 : 0A94;  -- 	LOAD   dres16sR
           257 : 6001;  -- 	SHIFT  1            ; shift remainder
           258 : 5292;  -- 	OR     d16sC2       ; with carry from other shift
           259 : 228E;  -- 	SUB    d16sD        ; subtract denominator from remainder
           25A : 325F;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           25B : 1294;  -- 	STORE  dres16sR
           25C : B801;  -- 	LOADI  1
           25D : 1291;  -- 	STORE  d16sC1       ; set carry
           25E : 2A4A;  -- 	JUMP   Div16s_loop
           25F : 1A8E;  -- 	ADD    d16sD        ; add denominator back in
           260 : 1294;  -- 	STORE  dres16sR
           261 : B800;  -- 	LOADI  0
           262 : 1291;  -- 	STORE  d16sC1       ; clear carry
           263 : 2A4A;  -- 	JUMP   Div16s_loop
           264 : 0A8D;  -- 	LOAD   d16sN
           265 : 1293;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           266 : 0A8F;  -- 	LOAD   d16sS        ; check the sign indicator
           267 : 3269;  -- 	JNEG   Div16s_neg
           268 : 8800;  -- 	RETURN
           269 : 0A93;  -- 	LOAD   dres16sQ     ; need to negate the result
           26A : 8176;  -- 	CALL   Neg
           26B : 1293;  -- 	STORE  dres16sQ
           26C : 8800;  -- 	RETURN	
           26D : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           26E : 0000;  -- WaitTime:			DW 0
           26F : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           270 : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           271 : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           272 : 0005;  -- ErrMargin: 			DW 5
           273 : 0000;  -- XDir:				DW 0		; Current direction on the X access robot is moving. 1 = right, 0 = left
           274 : 0000;  -- ObjectXDist:		DW 0 		; The x position of the next closest object
           275 : 0000;  -- ObjectYDist:		DW 0		; The absolute value of the y position of the next closest object
           276 : 0000;  -- AlongLongWall:		DW 0		; Boolean that signifies if robot is aligned along the longest wall
           277 : 0000;  -- ObjectsPosTheta:	DW 0		; Boolean that signifies if the robot has to turn in a positive angle to tag objects
           278 : 0000;  -- TagVelocity:		DW 0		; Number that signifies the speed and direction the robot has to go in to get to the next closest object along the wall
           279 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           27A : FF38;  -- WallThresh: 		DW -200 	; Defines distance away from wall before DE2Bot should stop moving (used in GoHome function)
           27B : 0000;  -- Cell: 				DW 0		; Initialize cell value
           27C : 0000;  -- CellCount:  		DW 0 		; How many values in the occupancy array
           27D : 044C;  -- CellArrI:   		DW &H44C	; Memory location (starting index) of the cell array
           27E : 0000;  -- XposIndex:			DW 0		; Initialize a temporary index for cell array indexing
           27F : 0000;  -- TagAng: 			DW 0		; Tells robot travel ang when tagging
           280 : 0000;  -- WallAng:			DW 0		; Tells robot travel ang when going to wall
           281 : 0000;  -- HomeAng:			DW 0		; Tells robot travel ang when going home
           282 : 0000;  -- y_val:				DW 0 
           283 : 0000;  -- THETAtemp:			DW 0
           284 : 0000;  -- distx:				DW 0
           285 : 0000;  -- THETAtemp2:			DW 0 
           286 : 0000;  -- THETAtemp4:			DW 0
           287 : 0000;  -- THETA2:				DW 0 
           288 : 0000;  -- THETA4:				DW 0
           289 : 0000;  -- THETA6:				DW 0 
           28A : 0000;  -- TCOPY:				DW 0
           28B : 0000;  -- CosSum:				DW 0
           28C : 0000;  -- x_val:				DW 0
           28D : 0000;  -- d16sN: 				DW 0 ; numerator
           28E : 0000;  -- d16sD: 				DW 0 ; denominator
           28F : 0000;  -- d16sS: 				DW 0 ; sign value
           290 : 0000;  -- d16sT:			    DW 0 ; temp counter
           291 : 0000;  -- d16sC1:				DW 0 ; carry value
           292 : 0000;  -- d16sC2: 			DW 0 ; carry value
           293 : 0000;  -- dres16sQ: 			DW 0 ; quotient result
           294 : 0000;  -- dres16sR: 			DW 0 ; remainder result
           295 : FFFB;  -- NegFive:	DW -5
           296 : FFFF;  -- NegOne:   	DW -1
           297 : 0000;  -- Zero:     	DW 0
           298 : 0001;  -- One:      	DW 1
           299 : 0002;  -- Two:      	DW 2
           29A : 0003;  -- Three:    	DW 3
           29B : 0004;  -- Four:     	DW 4
           29C : 0005;  -- Five:     	DW 5
           29D : 0006;  -- Six:      	DW 6
           29E : 0007;  -- Seven:    	DW 7
           29F : 0008;  -- Eight:    	DW 8
           2A0 : 0009;  -- Nine:     	DW 9
           2A1 : 000A;  -- Ten:      	DW 10
           2A2 : 0001;  -- Mask0:    DW &B00000001
           2A3 : 0002;  -- Mask1:    DW &B00000010
           2A4 : 0004;  -- Mask2:    DW &B00000100
           2A5 : 0008;  -- Mask3:    DW &B00001000
           2A6 : 0010;  -- Mask4:    DW &B00010000
           2A7 : 0020;  -- Mask5:    DW &B00100000
           2A8 : 0040;  -- Mask6:    DW &B01000000
           2A9 : 0080;  -- Mask7:    DW &B10000000
           2AA : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           2AB : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           2AC : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           2AD : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           2AE : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           2AF : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           2B0 : 00B4;  -- Deg180:   DW 180       ; 180
           2B1 : 010E;  -- Deg270:   DW 270       ; 270
           2B2 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           2B3 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           2B4 : FF9C;  -- RSlow:    DW -100
           2B5 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           2B6 : FEA2;  -- RMid:     DW -350
           2B7 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2B8 : FE0C;  -- RFast:    DW -500
           2B9 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           2BA : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           2BB : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2BC : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2BD : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
