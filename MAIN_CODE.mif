-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0965;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 811E;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8134;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4974;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4971;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4971;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 1152;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 5152;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4972;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0965;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 		OUT 	RESETPOS
           01D : 0965;  -- 		LOAD	ZERO
           01E : 281F;  -- 		JUMP	MainLoopForever
           01F : 802A;  -- 		CALL	FindAndTagClosestObject
           020 : 98C3;  -- 		OUT 	RESETPOS
           021 : 0965;  -- 		LOAD   Zero         ; Stop everything.
           022 : 9883;  -- 		OUT    LVELCMD
           023 : 988B;  -- 		OUT    RVELCMD
           024 : 98B2;  -- 		OUT    SONAREN
           025 : 0828;  -- 		LOAD   DEAD         ; An indication that we are dead
           026 : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           027 : 2827;  -- 		JUMP   Forever      ; Do this forever.
           028 : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           029 : 0000;  -- 	TravelDist:		DW 0
           02A : 98C3;  -- 		OUT		RESETPOS
           02B : 0975;  -- 		LOAD	MASK5
           02C : 5172;  -- 		OR		MASK2
           02D : 5173;  -- 		OR		MASK3
           02E : 98B2;  -- 		OUT		SONAREN
           02F : 90AD;  -- 		IN		DIST5
           030 : 1029;  -- 		STORE	TravelDist
           031 : 9804;  -- 		OUT		SSEG1
           032 : 2188;  -- 		SUB		MaxShort
           033 : 3062;  -- 		JNEG	NewFound
           034 : 90C0;  -- 		IN		XPOS
           035 : 2187;  -- 		SUB		MaxLong
           036 : 4058;  -- 		JZERO	TurnAroundGoHome
           037 : 3858;  -- 		JPOS	TurnAroundGoHome
           038 : B800;  -- 		LOADI 	0
           039 : 10F4;  -- 		STORE 	DTheta
           03A : 0985;  -- 		LOAD 	FFast
           03B : 10F5;  -- 		STORE 	DVel
           03C : 80F6;  -- 		CALL 	ControlMovement
           03D : 90AB;  -- 		IN 		DIST3
           03E : 6ECA;  -- 		ADDI 	-310
           03F : 382F;  -- 		JPOS 	NewKeepCheck
           040 : 90C0;  -- 		IN   	XPOS
           041 : 6945;  -- 		ADDI 	325
           042 : 1159;  -- 		STORE 	EncoderX
           043 : B800;  -- 		LOADI 	0
           044 : 10F4;  -- 		STORE 	DTheta
           045 : 0985;  -- 		LOAD 	FFast
           046 : 10F5;  -- 		STORE 	DVel
           047 : 80F6;  -- 		CALL 	ControlMovement
           048 : 90C0;  -- 		IN 		XPOS
           049 : 2159;  -- 		SUB 	EncoderX
           04A : 3043;  -- 		JNEG 	HitDetectedAlongPath
           04B : 90C0;  -- 		IN 		XPOS
           04C : 6FE2;  -- 		ADDI 	-30
           04D : 1159;  -- 		STORE 	EncoderX
           04E : B800;  -- 		LOADI 	0
           04F : 10F4;  -- 		STORE 	DTheta
           050 : 0985;  -- 		LOAD 	FFast
           051 : 10F5;  -- 		STORE 	DVel
           052 : 80F6;  -- 		CALL 	ControlMovement
           053 : 90C0;  -- 		IN 		XPOS
           054 : 2159;  -- 		SUB 	EncoderX
           055 : 3852;  -- 		JPOS 	MoveBackABit
           056 : 80C5;  -- 		CALL	StopMovement
           057 : 2858;  -- 		JUMP	TurnAroundGoHome
           058 : 80C5;  -- 		CALL	StopMovement
           059 : BF60;  -- 		LOADI	-160
           05A : 1154;  -- 		STORE	Angle
           05B : 80CF;  -- 		CALL	Rotate
           05C : B8B4;  -- 		LOADI 	180
           05D : 10F4;  -- 		STORE 	DTheta
           05E : 0985;  -- 		LOAD 	FFast
           05F : 10F5;  -- 		STORE 	DVel
           060 : 80F6;  -- 		CALL 	ControlMovement
           061 : 285C;  -- 		JUMP	GoingHome
           062 : 80C5;  -- 		CALL	StopMovement
           063 : 8084;  -- 		CALL 	Tag
           064 : 8800;  -- 		RETURN
           065 : 8021;  -- 	CALL 	Die
           066 : 8800;  -- 	RETURN
           067 : 9172;  -- 	IN 		MASK2
           068 : 5173;  -- 	OR 		MASK3
           069 : 98B2;  -- 	OUT 	SONAREN
           06A : B983;  -- 	LOADI 	FMid
           06B : 10F5;  -- 	STORE 	DVel
           06C : B85A;  -- 	LOADI 	90
           06D : 10F4;  -- 	STORE 	DTheta
           06E : 80F6;  -- 	CALL 	ControlMovement
           06F : 90AA;  -- 	IN 		DIST2
           070 : 6E0C;  -- 	ADDI 	-500
           071 : 386E;  -- 	JPOS 	Detect1
           072 : 90AB;  -- 	IN	 	DIST3
           073 : 6E0C;  -- 	ADDI 	-500
           074 : 386E;  -- 	JPOS 	Detect1
           075 : 80C5;  -- 	CALL 	StopMovement
           076 : B85F;  -- 	LOADI 	95
           077 : 1154;  -- 	STORE 	Angle
           078 : 80CF;  -- 	CALL  	Rotate
           079 : B8B4;  -- 	LOADI 	180
           07A : 10F4;  -- 	STORE 	DTheta
           07B : 80F6;  -- 	CALL	ControlMovement
           07C : 90AA;  -- 	IN 		DIST2
           07D : 6E0C;  -- 	ADDI 	-500
           07E : 387B;  -- 	JPOS 	Detect2
           07F : 90AB;  -- 	IN	 	DIST3
           080 : 6E0C;  -- 	ADDI 	-500
           081 : 387B;  -- 	JPOS 	Detect2
           082 : 80C5;  -- 	CALL 	StopMovement
           083 : 2865;  -- 	JUMP 	BackAtHome
           084 : 9172;  -- 	IN		MASK2
           085 : 5173;  -- 	OR 		MASK3
           086 : 98B2;  -- 	OUT 	SONAREN
           087 : BFA6;  -- 	LOADI	-90
           088 : 10F4;  -- 	STORE 	DTheta
           089 : 0983;  -- 	LOAD 	FMid
           08A : 10F5;  -- 	STORE 	DVel
           08B : 80F6;  -- 	CALL 	ControlMovement
           08C : 80AD;  -- 	CALL 	UpdateTag
           08D : 90AA;  -- 	IN 		DIST2
           08E : 6ECA;  -- 	ADDI 	-310
           08F : 3094;  -- 	JNEG 	TagIt2
           090 : 90AB;  -- 	IN 		DIST3
           091 : 6ECA;  -- 	ADDI 	-310
           092 : 3094;  -- 	JNEG 	TagIt2
           093 : 288B;  -- 	JUMP 	TagIt
           094 : 90C1;  -- 	IN   	YPOS
           095 : 8114;  -- 	CALL 	Abs
           096 : 6972;  -- 	ADDI 	370 ; 310 + 60
           097 : 1158;  -- 	STORE 	EncoderY
           098 : 80F6;  -- 	CALL 	ControlMovement
           099 : 90C1;  -- 	IN 		YPOS
           09A : 8114;  -- 	CALL 	Abs
           09B : 2158;  -- 	SUB 	EncoderY
           09C : 3098;  -- 	JNEG 	TapTag
           09D : 90C1;  -- 	IN 		YPOS
           09E : 8114;  -- 	CALL 	Abs
           09F : 6FE2;  -- 	ADDI 	-30
           0A0 : 1158;  -- 	STORE 	EncoderY
           0A1 : 0986;  -- 	LOAD 	RFast
           0A2 : 10F5;  -- 	STORE 	DVel
           0A3 : 80F6;  -- 	CALL 	ControlMovement
           0A4 : 90C1;  -- 	IN 		YPOS
           0A5 : 8114;  -- 	CALL 	Abs
           0A6 : 2158;  -- 	SUB 	EncoderY
           0A7 : 38A3;  -- 	JPOS 	MoveBack
           0A8 : B8B4;  -- 	LOADI 	180
           0A9 : 1154;  -- 	STORE 	Angle
           0AA : 80CF;  -- 	CALL 	Rotate
           0AB : 8067;  -- 	CALL 	GoHome
           0AC : 8800;  -- 	RETURN
           0AD : 8800;  -- 	RETURN
           0AE : 7FFF;  -- c7FFF: DW &H7FFF
           0AF : 0000;  -- m16sA: DW 0 ; multiplicand
           0B0 : 0000;  -- m16sB: DW 0 ; multipler
           0B1 : 0000;  -- m16sc: DW 0 ; carry
           0B2 : 0000;  -- mcnt16s: DW 0 ; counter
           0B3 : 0000;  -- mres16sL: DW 0 ; result low
           0B4 : 0000;  -- mres16sH: DW 0 ; result high
           0B5 : 005A;  -- Ang0:		DW 90
           0B6 : 002C;  -- Ang1:		DW 44
           0B7 : 000C;  -- Ang2:		DW 12
           0B8 : FFF4;  -- Ang3:		DW -12
           0B9 : FFD4;  -- Ang4:		DW -44
           0BA : FFA6;  -- Ang5:		DW -90
           0BB : FF70;  -- Ang6:		DW -144
           0BC : 0090;  -- Ang7:		DW 144
           0BD : 0000;  -- SensorToCheck: 	DW 0
           0BE : 0000;  -- SensorAngle:		DW 0
           0BF : 0000;  -- SensorDist: 		DW 0
           0C0 : 0000;  -- SensorIndex: 		DW 0
           0C1 : 0000;  -- SensorUpdate:		DW 0
           0C2 : 0965;  -- 	LOAD	ZERO
           0C3 : 98B2;  -- 	OUT		SONAREN
           0C4 : 8800;  -- 	RETURN
           0C5 : 0965;  -- 	LOAD 	ZERO
           0C6 : 9883;  -- 	OUT 	LVELCMD
           0C7 : 988B;  -- 	OUT 	RVELCMD
           0C8 : 8800;  -- 	RETURN
           0C9 : 30CC;  -- 	JNEG	M360N
           0CA : 6E98;  -- 	ADDI 	-360
           0CB : 28C9;  -- 	JUMP 	Mod360
           0CC : 6968;  -- 		ADDI 	360
           0CD : 30CC;  -- 		JNEG 	M360N
           0CE : 8800;  -- 		RETURN
           0CF : 1152;  -- 		STORE	Temp
           0D0 : 90C2;  -- 		IN 		THETA
           0D1 : 1954;  -- 		ADD 	Angle
           0D2 : 2157;  -- 		SUB 	ErrMargin
           0D3 : 80C9;  -- 		CALL 	Mod360
           0D4 : 1155;  -- 		STORE 	LowErr
           0D5 : 90C2;  -- 		IN 		THETA
           0D6 : 1954;  -- 		ADD 	Angle
           0D7 : 1957;  -- 		ADD 	ErrMargin
           0D8 : 80C9;  -- 		CALL 	Mod360
           0D9 : 1156;  -- 		STORE 	HighErr
           0DA : 0954;  -- 		LOAD 	Angle
           0DB : 30E7;  -- 		JNEG 	RotateCW ; else RotateCC
           0DC : 0981;  -- 		LOAD 	FSlow
           0DD : 988B;  -- 		OUT		RVELCMD
           0DE : 0982;  -- 		LOAD 	RSlow
           0DF : 9883;  -- 		OUT		LVELCMD
           0E0 : 90C2;  -- 		IN 		THETA
           0E1 : 2156;  -- 		SUB 	HighErr
           0E2 : 38DC;  -- 		JPOS	RotateCC
           0E3 : 90C2;  -- 		IN 		THETA
           0E4 : 2155;  -- 		SUB  	LowErr
           0E5 : 30DC;  -- 		JNEG	RotateCC
           0E6 : 28F1;  -- 		JUMP 	RotateEnd
           0E7 : 0982;  -- 		LOAD 	RSlow
           0E8 : 988B;  -- 		OUT		RVELCMD
           0E9 : 0981;  -- 		LOAD 	FSlow
           0EA : 9883;  -- 		OUT		LVELCMD
           0EB : 90C2;  -- 		IN 		THETA
           0EC : 2156;  -- 		SUB 	HighErr
           0ED : 38E7;  -- 		JPOS	RotateCW
           0EE : 90C2;  -- 		IN 		THETA
           0EF : 2155;  -- 		SUB  	LowErr
           0F0 : 30E7;  -- 		JNEG	RotateCW
           0F1 : 80C5;  -- 		CALL 	StopMovement
           0F2 : 0952;  -- 		LOAD 	Temp
           0F3 : 8800;  -- 		RETURN
           0F4 : 0000;  -- DTheta:    DW 0
           0F5 : 0000;  -- DVel:      DW 0
           0F6 : 90C2;  -- 	IN     THETA
           0F7 : 20F4;  -- 	SUB    DTheta      ; actual - desired angle
           0F8 : 8115;  -- 	CALL   Neg         ; desired - actual angle
           0F9 : 68B4;  -- 	ADDI   180
           0FA : 80C9;  -- 	CALL   Mod360
           0FB : 6F4C;  -- 	ADDI   -180
           0FC : 6002;  -- 	SHIFT  2
           0FD : 1108;  -- 	STORE  CMAErr      ; hold temporarily
           0FE : 08F5;  -- 	LOAD   DVel
           0FF : 1908;  -- 	ADD    CMAErr
           100 : 8109;  -- 	CALL   CapVel      ; ensure velocity is valid
           101 : 988B;  -- 	OUT    RVELCMD
           102 : 0908;  -- 	LOAD   CMAErr
           103 : 8115;  -- 	CALL   Neg         ; left wheel gets negative differential
           104 : 18F5;  -- 	ADD    DVel
           105 : 8109;  -- 	CALL   CapVel
           106 : 9883;  -- 	OUT    LVELCMD
           107 : 8800;  -- 	RETURN
           108 : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           109 : 6E0C;  -- 	ADDI    -500
           10A : 3910;  -- 	JPOS    CapVelHigh
           10B : 69F4;  -- 	ADDI    500
           10C : 69F4;  -- 	ADDI    500
           10D : 3112;  -- 	JNEG    CapVelLow
           10E : 6E0C;  -- 	ADDI    -500
           10F : 8800;  -- 	RETURN
           110 : B9F4;  -- 	LOADI   500
           111 : 8800;  -- 	RETURN
           112 : BE0C;  -- 	LOADI   -500
           113 : 8800;  -- 	RETURN
           114 : 3917;  -- 	JPOS   Abs_r
           115 : 5964;  -- 	XOR    NegOne       ; Flip all bits
           116 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           117 : 8800;  -- 	RETURN
           118 : 9802;  -- 	OUT    TIMER
           119 : 9002;  -- 	IN     TIMER
           11A : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           11B : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           11C : 3119;  -- 	JNEG   Wloop
           11D : 8800;  -- 	RETURN
           11E : 8126;  -- 	CALL   BlockI2C    ; wait for idle
           11F : 098A;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           120 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           121 : 0965;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           122 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           123 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           124 : 8126;  -- 	CALL   BlockI2C    ; wait for it to finish
           125 : 8800;  -- 	RETURN
           126 : 0965;  -- 	LOAD   Zero
           127 : 1152;  -- 	STORE  Temp        ; Used to check for timeout
           128 : 0952;  -- 	LOAD   Temp
           129 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           12A : 1152;  -- 	STORE  Temp
           12B : 412F;  -- 	JZERO  I2CError    ; Timeout occurred; error
           12C : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           12D : 3928;  -- 	JPOS   BI2CL       ; If not 0, try again
           12E : 8800;  -- 	RETURN             ; Else return
           12F : 0965;  -- 	LOAD   Zero
           130 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           131 : 9804;  -- 	OUT    SSEG1
           132 : 9805;  -- 	OUT    SSEG2       ; display error message
           133 : 292F;  -- 	JUMP   I2CError
           134 : 814C;  -- 	CALL   GetBattLvl
           135 : 4134;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           136 : 2189;  -- 	SUB    MinBatt
           137 : 313A;  -- 	JNEG   DeadBatt
           138 : 1989;  -- 	ADD    MinBatt     ; get original value back
           139 : 8800;  -- 	RETURN
           13A : 0969;  -- 	LOAD   Four
           13B : 980A;  -- 	OUT    BEEP        ; start beep sound
           13C : 814C;  -- 	CALL   GetBattLvl  ; get the battery level
           13D : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           13E : 9805;  -- 	OUT    SSEG2
           13F : 9806;  -- 	OUT    LCD
           140 : 0965;  -- 	LOAD   Zero
           141 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           142 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           143 : 9807;  -- 	OUT    XLEDS
           144 : 8118;  -- 	CALL   Wait1       ; 1 second
           145 : 0965;  -- 	Load   Zero
           146 : 980A;  -- 	OUT    BEEP        ; stop beeping
           147 : 0965;  -- 	LOAD   Zero
           148 : 9801;  -- 	OUT    LEDS        ; LEDs off
           149 : 9807;  -- 	OUT    XLEDS
           14A : 8118;  -- 	CALL   Wait1       ; 1 second
           14B : 293A;  -- 	JUMP   DeadBatt    ; repeat forever
           14C : 098B;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           14D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           14E : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           14F : 8126;  -- 	CALL   BlockI2C    ; wait for it to finish
           150 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           151 : 8800;  -- 	RETURN
           152 : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           153 : 0000;  -- WaitTime:			DW 0
           154 : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           155 : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           156 : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           157 : 0004;  -- ErrMargin: 			DW 4
           158 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           159 : 0000;  -- EncoderX:			DW 0		; Stores current value of encoder in X direction
           15A : FFA6;  -- TagAng: 			DW -90		; Tells robot travel ang when tagging
           15B : 0000;  -- y_val:			DW 0
           15C : 0000;  -- THETAtemp2:		DW 0
           15D : 0000;  -- THETAtemp4:		DW 0
           15E : 0000;  -- THETA2:			DW 0
           15F : 0000;  -- THETA4:			DW 0
           160 : 0000;  -- THETA6:			DW 0
           161 : 0000;  -- TCOPY:			DW 0
           162 : 0000;  -- CosSum:			DW 0
           163 : FFFB;  -- NegFive:	DW -5
           164 : FFFF;  -- NegOne:   	DW -1
           165 : 0000;  -- Zero:     	DW 0
           166 : 0001;  -- One:      	DW 1
           167 : 0002;  -- Two:      	DW 2
           168 : 0003;  -- Three:    	DW 3
           169 : 0004;  -- Four:     	DW 4
           16A : 0005;  -- Five:     	DW 5
           16B : 0006;  -- Six:      	DW 6
           16C : 0007;  -- Seven:    	DW 7
           16D : 0008;  -- Eight:    	DW 8
           16E : 0009;  -- Nine:     	DW 9
           16F : 000A;  -- Ten:      	DW 10
           170 : 0001;  -- Mask0:    DW &B00000001
           171 : 0002;  -- Mask1:    DW &B00000010
           172 : 0004;  -- Mask2:    DW &B00000100
           173 : 0008;  -- Mask3:    DW &B00001000
           174 : 0010;  -- Mask4:    DW &B00010000
           175 : 0020;  -- Mask5:    DW &B00100000
           176 : 0040;  -- Mask6:    DW &B01000000
           177 : 0080;  -- Mask7:    DW &B10000000
           178 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           179 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           17A : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           17B : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           17C : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           17D : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           17E : 00B4;  -- Deg180:   DW 180       ; 180
           17F : 010E;  -- Deg270:   DW 270       ; 270
           180 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           181 : 008C;  -- FSlow:    DW 140       ; 100 is about the lowest velocity value that will move
           182 : FF74;  -- RSlow:    DW -140
           183 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           184 : FEA2;  -- RMid:     DW -350
           185 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           186 : FE0C;  -- RFast:    DW -500
           187 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           188 : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           189 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           18A : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           18B : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           64C : 0000;  -- DW		0	; Array start	
  END;
