-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 08C5;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 808E;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 80A4;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 48D4;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 48D1;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 48D1;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 10C2;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 50C2;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 48D2;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 08C5;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT 	RESETPOS	; reset odometer in case wheels move after programming
           01D : 0000;  -- 	Angle: 	DW 0
           01E : 08D2;  -- 	LOAD	MASK2
           01F : 18D3;  -- 	ADD		MASK3
           020 : 98B2;  -- 	OUT 	SONAREN
           021 : 98C3;  -- 	OUT 	RESETPOS	
           022 : 8039;  -- 	CALL 	UpdateMap
           023 : 90C0;  -- 	IN		XPOS
           024 : 20E7;  -- 	SUB		MaxX
           025 : 382A;  -- 	JPOS	DoneForward
           026 : 08E3;  -- 	LOAD	FMID
           027 : 9883;  -- 	OUT		LVELCMD
           028 : 988B;  -- 	OUT		RVELCMD
           029 : 2822;  -- 	JUMP	KeepGoingForward
           02A : 08C5;  -- 	LOAD	ZERO
           02B : 9883;  -- 	OUT		LVELCMD
           02C : 988B;  -- 	OUT		RVELCMD
           02D : 08DE;  -- 	LOAD	Deg180
           02E : 806B;  -- 	CALL	Rotate
           02F : 8039;  -- 	CALL 	UpdateMap
           030 : 90C0;  -- 	IN		XPOS
           031 : 302A;  -- 	JNEG	DoneForward
           032 : 08E3;  -- 	LOAD	FMID
           033 : 9883;  -- 	OUT		LVELCMD
           034 : 988B;  -- 	OUT		RVELCMD
           035 : 2822;  -- 	JUMP	KeepGoingForward
           036 : 8800;  -- 	RETURN
           037 : 8800;  -- 	RETURN
           038 : 8800;  -- 	RETURN
           039 : 8800;  -- 	RETURN
           03A : 08D4;  -- 	LOAD 	MASK4
           03B : 98B2;  -- 	OUT 	SONAREN
           03C : 90AC;  -- 	IN 		DIST4
           03D : 6D9E;  -- 	ADDI	-610 ;2 feet
           03E : 3048;  -- 	JNEG 	Tag1
           03F : 08D1;  -- 	LOAD 	MASK1
           040 : 98B2;  -- 	OUT 	SONAREN
           041 : 90A9;  -- 	IN 		DIST1
           042 : 6D9E;  -- 	ADDI	-610 ;2 feet
           043 : 304C;  -- 	JNEG 	Tag2
           044 : 08E3;  -- 	LOAD 	FMid
           045 : 9883;  -- 	OUT 	LVELCMD
           046 : 988B;  -- 	OUT 	RVELCMD
           047 : 283A;  -- 	JUMP 	TestTag
           048 : BFD4;  -- 	LOADI 	-44
           049 : 101D;  -- 	STORE 	Angle
           04A : 806B;  -- 	CALL 	Rotate
           04B : 8050;  -- 	CALL 	Die
           04C : B82C;  -- 	LOADI 	44
           04D : 101D;  -- 	STORE 	Angle
           04E : 806B;  -- 	CALL 	Rotate
           04F : 8050;  -- 	CALL 	Die
           050 : 08C5;  -- 	LOAD   Zero         ; Stop everything.
           051 : 9883;  -- 	OUT    LVELCMD
           052 : 988B;  -- 	OUT    RVELCMD
           053 : 98B2;  -- 	OUT    SONAREN
           054 : 0857;  -- 	LOAD   DEAD         ; An indication that we are dead
           055 : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           056 : 2856;  -- 	JUMP   Forever      ; Do this forever.
           057 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           058 : 10C2;  -- 	STORE	Temp
           059 : B804;  -- 	LOADI 	4
           05A : 980A;  -- 	OUT		BEEP
           05B : B801;  -- 	LOADI	1
           05C : 10C3;  -- 	STORE	WaitTime
           05D : 9802;  -- 	OUT		Timer
           05E : 9002;  -- 	IN 		Timer
           05F : 20C3;  -- 	SUB 	WaitTime
           060 : 305E;  -- 	JNEG	BeepLoop
           061 : B800;  -- 	LOADI	0
           062 : 980A;  -- 	OUT		BEEP
           063 : 08C2;  -- 	LOAD 	Temp
           064 : 8800;  -- 	RETURN
           065 : 3068;  -- 	JNEG	M360N
           066 : 6E98;  -- 	ADDI 	-360
           067 : 2865;  -- 	JUMP 	Mod360
           068 : 6968;  -- 	ADDI 	360
           069 : 3068;  -- 	JNEG 	M360N
           06A : 8800;  -- 	RETURN
           06B : 10C2;  -- 	STORE	Temp
           06C : 90C2;  -- 	IN 		THETA
           06D : 181D;  -- 	ADD 	Angle
           06E : 2087;  -- 	SUB 	ErrMargin
           06F : 8065;  -- 	CALL 	Mod360
           070 : 1085;  -- 	STORE 	LowErr
           071 : 90C2;  -- 	IN 		THETA
           072 : 181D;  -- 	ADD 	ANGLE
           073 : 1887;  -- 	ADD 	ErrMargin
           074 : 8065;  -- 	CALL 	Mod360
           075 : 1086;  -- 	STORE 	HighErr
           076 : 08E1;  -- 	LOAD 	FSlow
           077 : 988B;  -- 	OUT		RVELCMD
           078 : 08E2;  -- 	LOAD 	RSlow
           079 : 9883;  -- 	OUT		LVELCMD
           07A : 90C2;  -- 	IN 		THETA
           07B : 2086;  -- 	SUB 	HighErr
           07C : 3876;  -- 	JPOS	RotateCont
           07D : 90C2;  -- 	IN 		THETA
           07E : 2085;  -- 	SUB  	LowErr
           07F : 3076;  -- 	JNEG	RotateCont
           080 : 08C5;  -- 	LOAD 	ZERO
           081 : 9883;  -- 	OUT 	LVELCMD
           082 : 988B;  -- 	OUT 	RVELCMD
           083 : 08C2;  -- 	LOAD 	Temp
           084 : 8800;  -- 	RETURN
           085 : 0000;  -- LowErr: DW 0
           086 : 0000;  -- HighErr: DW 0
           087 : 0004;  -- ErrMargin: DW 4
           088 : 9802;  -- 	OUT    TIMER
           089 : 9002;  -- 	IN     TIMER
           08A : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           08B : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           08C : 3089;  -- 	JNEG   Wloop
           08D : 8800;  -- 	RETURN
           08E : 8096;  -- 	CALL   BlockI2C    ; wait for idle
           08F : 08EA;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           090 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           091 : 08C5;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           092 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           093 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           094 : 8096;  -- 	CALL   BlockI2C    ; wait for it to finish
           095 : 8800;  -- 	RETURN
           096 : 08C5;  -- 	LOAD   Zero
           097 : 10C2;  -- 	STORE  Temp        ; Used to check for timeout
           098 : 08C2;  -- 	LOAD   Temp
           099 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           09A : 10C2;  -- 	STORE  Temp
           09B : 409F;  -- 	JZERO  I2CError    ; Timeout occurred; error
           09C : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           09D : 3898;  -- 	JPOS   BI2CL       ; If not 0, try again
           09E : 8800;  -- 	RETURN             ; Else return
           09F : 08C5;  -- 	LOAD   Zero
           0A0 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           0A1 : 9804;  -- 	OUT    SSEG1
           0A2 : 9805;  -- 	OUT    SSEG2       ; display error message
           0A3 : 289F;  -- 	JUMP   I2CError
           0A4 : 80BC;  -- 	CALL   GetBattLvl
           0A5 : 40A4;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           0A6 : 20E9;  -- 	SUB    MinBatt
           0A7 : 30AA;  -- 	JNEG   DeadBatt
           0A8 : 18E9;  -- 	ADD    MinBatt     ; get original value back
           0A9 : 8800;  -- 	RETURN
           0AA : 08C9;  -- 	LOAD   Four
           0AB : 980A;  -- 	OUT    BEEP        ; start beep sound
           0AC : 80BC;  -- 	CALL   GetBattLvl  ; get the battery level
           0AD : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           0AE : 9805;  -- 	OUT    SSEG2
           0AF : 9806;  -- 	OUT    LCD
           0B0 : 08C5;  -- 	LOAD   Zero
           0B1 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           0B2 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           0B3 : 9807;  -- 	OUT    XLEDS
           0B4 : 8088;  -- 	CALL   Wait1       ; 1 second
           0B5 : 08C5;  -- 	Load   Zero
           0B6 : 980A;  -- 	OUT    BEEP        ; stop beeping
           0B7 : 08C5;  -- 	LOAD   Zero
           0B8 : 9801;  -- 	OUT    LEDS        ; LEDs off
           0B9 : 9807;  -- 	OUT    XLEDS
           0BA : 8088;  -- 	CALL   Wait1       ; 1 second
           0BB : 28AA;  -- 	JUMP   DeadBatt    ; repeat forever
           0BC : 08EB;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           0BD : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           0BE : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           0BF : 8096;  -- 	CALL   BlockI2C    ; wait for it to finish
           0C0 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           0C1 : 8800;  -- 	RETURN
           0C2 : 0000;  -- Temp:		DW 0 ; "Temp" is not a great name, but can be useful
           0C3 : 0000;  -- WaitTime:	DW 0
           0C4 : FFFF;  -- NegOne:   DW -1
           0C5 : 0000;  -- Zero:     DW 0
           0C6 : 0001;  -- One:      DW 1
           0C7 : 0002;  -- Two:      DW 2
           0C8 : 0003;  -- Three:    DW 3
           0C9 : 0004;  -- Four:     DW 4
           0CA : 0005;  -- Five:     DW 5
           0CB : 0006;  -- Six:      DW 6
           0CC : 0007;  -- Seven:    DW 7
           0CD : 0008;  -- Eight:    DW 8
           0CE : 0009;  -- Nine:     DW 9
           0CF : 000A;  -- Ten:      DW 10
           0D0 : 0001;  -- Mask0:    DW &B00000001
           0D1 : 0002;  -- Mask1:    DW &B00000010
           0D2 : 0004;  -- Mask2:    DW &B00000100
           0D3 : 0008;  -- Mask3:    DW &B00001000
           0D4 : 0010;  -- Mask4:    DW &B00010000
           0D5 : 0020;  -- Mask5:    DW &B00100000
           0D6 : 0040;  -- Mask6:    DW &B01000000
           0D7 : 0080;  -- Mask7:    DW &B10000000
           0D8 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           0D9 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           0DA : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           0DB : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           0DC : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           0DD : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           0DE : 00B4;  -- Deg180:   DW 180       ; 180
           0DF : 010E;  -- Deg270:   DW 270       ; 270
           0E0 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           0E1 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           0E2 : FF9C;  -- RSlow:    DW -100
           0E3 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           0E4 : FEA2;  -- RMid:     DW -350
           0E5 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           0E6 : FE0C;  -- RFast:    DW -500
           0E7 : 0C80;  -- MaxX:	  DW 3200	   	; 11 feet = 3200 X increments
           0E8 : 0000;  -- MinX:	  DW 0			; 0 feet = 0 X increments
           0E9 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           0EA : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           0EB : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
