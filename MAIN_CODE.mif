-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 098E;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8146;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 815C;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 499D;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 499A;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 499A;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 117A;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 517A;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 499B;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 098E;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT 	RESETPOS	; reset odometer in case wheels move after programming
           01D : 8020;  -- 	CALL	InitializeVars
           01E : 8028;  -- 	CALL	InitialSearch
           01F : 8058;  -- 	CALL	FindAndTagClosestObject
           020 : 9000;  -- 	IN		SWITCHES
           021 : 4999;  -- 	AND		MASK0
           022 : 1183;  -- 	STORE 	AlongLongWall
           023 : 9000;  -- 	IN		SWITCHES
           024 : 499A;  -- 	AND		MASK1
           025 : 1184;  -- 	STORE	ObjectsPosTheta
           026 : 98C3;  -- 	OUT 	RESETPOS
           027 : 8800;  -- 	RETURN
           028 : 099B;  -- 		LOAD	MASK2
           029 : 199C;  -- 		ADD		MASK3
           02A : 98B2;  -- 		OUT 	SONAREN
           02B : 8042;  -- 		CALL 	UpdateMap
           02C : 0983;  -- 		LOAD	AlongLongWall
           02D : 4031;  -- 		JZERO	LoadShortDistance
           02E : 90C0;  -- 		IN		XPOS
           02F : 21B0;  -- 		SUB		MaxLong
           030 : 2834;  -- 		JUMP	DistanceCheck
           031 : 90C0;  -- 		IN		XPOS
           032 : 21B1;  -- 		SUB		MaxShort
           033 : 2834;  -- 		JUMP 	DistanceCheck
           034 : 383B;  -- 		JPOS	DoneForward
           035 : 90C2;  -- 		IN		THETA
           036 : 111C;  -- 		STORE	DTheta
           037 : 09AE;  -- 		LOAD	FFast
           038 : 111D;  -- 		STORE	DVel
           039 : 811E;  -- 		CALL	ControlMovement
           03A : 282B;  -- 		JUMP	KeepGoingForward
           03B : 098E;  -- 		LOAD	ZERO
           03C : 9883;  -- 		OUT		LVELCMD
           03D : 988B;  -- 		OUT		RVELCMD
           03E : 09A7;  -- 		LOAD	Deg180
           03F : 117C;  -- 		STORE	Angle
           040 : 80E8;  -- 		CALL	Rotate
           041 : 8800;  -- 		RETURN
           042 : 0983;  --  	LOAD 	AlongLongWall
           043 : 3845;  -- 	JPOS 	LGO ; If no switches active, robot setup values for long axis traverse
           044 : 404A;  -- 	JZERO  	SGO ; If SW0 active, robot setup values for short axis traverse
           045 : 099E;  -- 	 	LOAD	MASK5
           046 : 98B2;  -- 	 	OUT 	SONAREN
           047 : 90AD;  -- 	 	IN 		DIST5 ;Turn on and read value from sensor 5
           048 : 804F;  -- 		CALL	CellIn ; If value read in less than the value already in cell, store it in cell
           049 : 8800;  -- 	 	RETURN
           04A : 0999;  -- 		LOAD	MASK0
           04B : 98B2;  -- 		OUT 	SONAREN
           04C : 90A8;  -- 		IN 		DIST0
           04D : 804F;  -- 	 	CALL	CellIn ; If value read in less than the value already in cell, store it in cell
           04E : 8800;  -- 		RETURN
           04F : 1188;  -- 		STORE 	Cell ;store current distance read in cell
           050 : 90C0;  -- 	 	IN		XPOS ;Take in xposition
           051 : 6013;  -- 		SHIFT 	five ;Index value of the array (applies same dist value cells of length 32 increments)
           052 : 698B;  -- 		ADDI	CellArrI ;Add the value of starting address (where the memory for array begins)
           053 : 118C;  -- 		STORE 	XposIndex ;Holds the adress where the dist value will be placed
           054 : 0988;  -- 		LOAD 	CELL
           055 : 798C;  -- 		ISTORE	XposIndex 
           056 : 8800;  -- 		RETURN
           057 : 8800;  -- 	Return
           058 : 809D;  -- 		CALL	FindClosestObject
           059 : 08C0;  -- 		LOAD 	XPOS
           05A : 2181;  -- 		SUB 	ObjectXDist
           05B : 305E;  -- 		JNEG	GoUp
           05C : 4075;  -- 		JZERO 	AtObjectX
           05D : 3861;  -- 		JPOS	GoDown
           05E : 098F;  -- 		LOAD 	ONE
           05F : 1180;  -- 		STORE 	XDir
           060 : 2863;  -- 		JUMP 	MoveLoop
           061 : 098E;  -- 		LOAD 	ZERO
           062 : 1180;  -- 		STORE 	XDir
           063 : 8042;  -- 		CALL 	UpdateMap
           064 : 0980;  -- 		LOAD XDir
           065 : 406C;  -- 		JZERO CheckLess
           066 : 3867;  -- 		JPOS CheckGreat
           067 : 08C0;  -- 		LOAD	XPOS
           068 : 2181;  -- 		SUB		ObjectXDist
           069 : 4075;  -- 		JZERO 	AtObjectX
           06A : 3875;  -- 		JPOS	AtObjectX
           06B : 2871;  -- 		JUMP	KeepGoing
           06C : 08C0;  -- 		LOAD	XPOS
           06D : 2181;  -- 		SUB		ObjectXDist
           06E : 4075;  -- 		JZERO 	AtObjectX
           06F : 3075;  -- 		JNEG	AtObjectX
           070 : 2871;  -- 		JUMP	KeepGoing
           071 : 09AC;  -- 		LOAD	FMid
           072 : 9883;  -- 		OUT		LVELCMD
           073 : 988B;  -- 		OUT		RVELCMD
           074 : 2863;  -- 		JUMP	MoveLoop
           075 : 098E;  -- 		LOAD	ZERO
           076 : 9883;  -- 		OUT		LVELCMD
           077 : 988B;  -- 		OUT		RVELCMD
           078 : 8800;  -- 		RETURN
           079 : 082A;  -- Middle:			DW 2090
           07A : 8042;  -- 		CALL 	UpdateMap
           07B : 08C0;  -- 		LOAD 	XPOS
           07C : 1FD6;  -- 		ADD 	-2090
           07D : 307F;  -- 		JNEG 	NotAtMiddle
           07E : 2883;  -- 		JUMP 	AtMiddle
           07F : 09AC;  -- 		LOAD	FMid
           080 : 9883;  -- 		OUT		LVELCMD
           081 : 988B;  -- 		OUT		RVELCMD
           082 : 287A;  -- 		JUMP  CheckIfMiddle
           083 : 098E;  -- 	LOAD	ZERO
           084 : 9883;  -- 	OUT		LVELCMD
           085 : 988B;  -- 	OUT		RVELCMD
           086 : 099B;  -- 	LOAD	MASK2
           087 : 98B2;  -- 	OUT		SONAREN
           088 : 099C;  -- 	LOAD	MASK3
           089 : 98B2;  -- 	OUT		SONAREN
           08A : 8042;  -- 		CALL 	UpdateMap
           08B : 08AA;  -- 		LOAD	DIST2
           08C : 6C6D;  -- 		ADDI	-915
           08D : 308F;  -- 		JNEG	TwoGot
           08E : 2898;  -- 		JUMP	Rotate10
           08F : 098F;  -- 		LOAD	ONE
           090 : 08AB;  -- 		LOAD	DIST3
           091 : 6C6D;  -- 		ADDI	-915
           092 : 3094;  -- 		JNEG	ThreeGot
           093 : 2898;  -- 		JUMP	Rotate10
           094 : 098E;  -- 		LOAD	ZERO
           095 : 9883;  -- 		OUT		LVELCMD
           096 : 988B;  -- 		OUT		RVELCMD
           097 : 2894;  -- 		JUMP	ThreeGot
           098 : 098E;  -- 		LOAD 	ZERO
           099 : 680C;  -- 		ADDI 	12
           09A : 117C;  -- 		STORE Angle
           09B : 28E8;  -- 		JUMP	Rotate
           09C : 288A;  -- 		JUMP	CheckMidObj
           09D : 0988;  -- 	LOAD	CELL
           09E : 1181;  -- 	STORE	ObjectXDist
           09F : 1182;  -- 	STORE	ObjectYDist
           0A0 : 8800;  -- 	RETURN
           0A1 : 80C9;  -- 	CALL 	Die
           0A2 : 8800;  -- 	RETURN
           0A3 : 810D;  -- 	CALL 	GoToWall
           0A4 : B85A;  -- 	LOADI 	90
           0A5 : 117C;  -- 	STORE 	Angle
           0A6 : 0984;  -- 	LOAD 	ObjectsPosTheta
           0A7 : 40AA;  -- 	JZERO 	HomeRotate
           0A8 : BFA6;  -- 	LOADI 	-90
           0A9 : 117C;  -- 	STORE 	Angle
           0AA : 80E8;  -- 	CALL  	Rotate
           0AB : 810D;  -- 	CALL 	GoToWall
           0AC : 28A1;  -- 	JUMP 	BackAtHome
           0AD : 117A;  -- 	STORE 	Temp
           0AE : 90C1;  -- 	IN   	YPOS
           0AF : 1186;  -- 	STORE 	EncoderY
           0B0 : B8C2;  -- 	LOADI 	THETA
           0B1 : 111C;  -- 	STORE 	DTheta
           0B2 : 09AC;  -- 	LOAD 	FMid
           0B3 : 111D;  -- 	STORE 	DVel
           0B4 : 811E;  -- 	CALL 	ControlMovement
           0B5 : 90C1;  -- 	IN 		YPOS
           0B6 : 813C;  -- 	CALL 	Abs
           0B7 : 2186;  -- 	SUB 	EncoderY
           0B8 : 2188;  -- 	SUB 	Cell
           0B9 : 6FF6;  -- 	ADDI 	-10
           0BA : 30B4;  -- 	JNEG 	TagIt
           0BB : 90C1;  -- 	IN 		YPOS
           0BC : 813C;  -- 	CALL 	Abs
           0BD : 6FE2;  -- 	ADDI 	-30
           0BE : 1186;  -- 	STORE 	EncoderY
           0BF : 09AD;  -- 	LOAD 	RMid
           0C0 : 111D;  -- 	STORE 	DVel
           0C1 : 811E;  -- 	CALL ControlMovement
           0C2 : 90C1;  -- 	IN 		YPOS
           0C3 : 813C;  -- 	CALL 	Abs
           0C4 : 2186;  -- 	SUB 	EncoderY
           0C5 : 38C1;  -- 	JPOS 	MoveBack
           0C6 : B8B4;  -- 	LOADI 	180
           0C7 : 80E8;  -- 	CALL 	Rotate
           0C8 : 80A3;  -- 	CALL 	GoHome
           0C9 : 098E;  -- 	LOAD   Zero         ; Stop everything.
           0CA : 9883;  -- 	OUT    LVELCMD
           0CB : 988B;  -- 	OUT    RVELCMD
           0CC : 98B2;  -- 	OUT    SONAREN
           0CD : 08D0;  -- 	LOAD   DEAD         ; An indication that we are dead
           0CE : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           0CF : 28CF;  -- 		JUMP   Forever      ; Do this forever.
           0D0 : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           0D1 : 098E;  -- 	LOAD 	ZERO
           0D2 : 9883;  -- 	OUT 	LVELCMD
           0D3 : 988B;  -- 	OUT 	RVELCMD
           0D4 : 8800;  -- 	RETURN
           0D5 : 117A;  -- 	STORE	Temp
           0D6 : B802;  -- 	LOADI 	2
           0D7 : 980A;  -- 	OUT		BEEP
           0D8 : B801;  -- 	LOADI	1
           0D9 : 117B;  -- 	STORE	WaitTime
           0DA : 9802;  -- 	OUT		Timer
           0DB : 9002;  -- 		IN 		Timer
           0DC : 217B;  -- 		SUB 	WaitTime
           0DD : 30DB;  -- 		JNEG	BeepLoop
           0DE : B800;  -- 		LOADI	0
           0DF : 980A;  -- 		OUT		BEEP
           0E0 : 097A;  -- 		LOAD 	Temp
           0E1 : 8800;  -- 		RETURN
           0E2 : 30E5;  -- 	JNEG	M360N
           0E3 : 6E98;  -- 	ADDI 	-360
           0E4 : 28E2;  -- 	JUMP 	Mod360
           0E5 : 6968;  -- 		ADDI 	360
           0E6 : 30E5;  -- 		JNEG 	M360N
           0E7 : 8800;  -- 		RETURN
           0E8 : 117A;  -- 		STORE	Temp
           0E9 : 90C2;  -- 		IN 		THETA
           0EA : 197C;  -- 		ADD 	Angle
           0EB : 217F;  -- 		SUB 	ErrMargin
           0EC : 80E2;  -- 		CALL 	Mod360
           0ED : 117D;  -- 		STORE 	LowErr
           0EE : 90C2;  -- 		IN 		THETA
           0EF : 197C;  -- 		ADD 	Angle
           0F0 : 197F;  -- 		ADD 	ErrMargin
           0F1 : 80E2;  -- 		CALL 	Mod360
           0F2 : 117E;  -- 		STORE 	HighErr
           0F3 : 097C;  -- 		LOAD 	Angle
           0F4 : 3100;  -- 		JNEG 	RotateCW ; else RotateCC
           0F5 : 09AA;  -- 		LOAD 	FSlow
           0F6 : 988B;  -- 		OUT		RVELCMD
           0F7 : 09AB;  -- 		LOAD 	RSlow
           0F8 : 9883;  -- 		OUT		LVELCMD
           0F9 : 90C2;  -- 		IN 		THETA
           0FA : 217E;  -- 		SUB 	HighErr
           0FB : 38F5;  -- 		JPOS	RotateCC
           0FC : 90C2;  -- 		IN 		THETA
           0FD : 217D;  -- 		SUB  	LowErr
           0FE : 30F5;  -- 		JNEG	RotateCC
           0FF : 290A;  -- 		JUMP 	RotateEnd
           100 : 09AB;  -- 		LOAD 	RSlow
           101 : 988B;  -- 		OUT		RVELCMD
           102 : 09AA;  -- 		LOAD 	FSlow
           103 : 9883;  -- 		OUT		LVELCMD
           104 : 90C2;  -- 		IN 		THETA
           105 : 217E;  -- 		SUB 	HighErr
           106 : 3900;  -- 		JPOS	RotateCW
           107 : 90C2;  -- 		IN 		THETA
           108 : 217D;  -- 		SUB  	LowErr
           109 : 3100;  -- 		JNEG	RotateCW
           10A : 80D1;  -- 		CALL 	StopMovement
           10B : 097A;  -- 		LOAD 	Temp
           10C : 8800;  -- 		RETURN
           10D : 099B;  -- 	LOAD 	MASK2
           10E : 519C;  -- 	OR 		MASK3
           10F : 98B2;  -- 	OUT 	SONAREN
           110 : 90C2;  -- 	IN  	THETA
           111 : 111C;  -- 	STORE 	DTheta
           112 : 09AC;  -- 	LOAD 	FMid
           113 : 111D;  -- 	STORE 	DVel
           114 : 811E;  -- 	CALL ControlMovement
           115 : 90AA;  -- 	IN 		DIST2
           116 : 1987;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           117 : 3914;  -- 	JPOS 	CheckWall
           118 : 90AB;  -- 	IN 		DIST3
           119 : 1987;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           11A : 3914;  -- 	JPOS 	CheckWall
           11B : 80D1;  -- 	CALL 	StopMovement 	; stops movement
           11C : 0000;  -- DTheta:    DW 0
           11D : 0000;  -- DVel:      DW 0
           11E : 90C2;  -- 	IN     THETA
           11F : 211C;  -- 	SUB    DTheta      ; actual - desired angle
           120 : 813D;  -- 	CALL   Neg         ; desired - actual angle
           121 : 68B4;  -- 	ADDI   180
           122 : 80E2;  -- 	CALL   Mod360
           123 : 6F4C;  -- 	ADDI   -180
           124 : 6002;  -- 	SHIFT  2
           125 : 1130;  -- 	STORE  CMAErr      ; hold temporarily
           126 : 091D;  -- 	LOAD   DVel
           127 : 1930;  -- 	ADD    CMAErr
           128 : 8131;  -- 	CALL   CapVel      ; ensure velocity is valid
           129 : 988B;  -- 	OUT    RVELCMD
           12A : 0930;  -- 	LOAD   CMAErr
           12B : 813D;  -- 	CALL   Neg         ; left wheel gets negative differential
           12C : 191D;  -- 	ADD    DVel
           12D : 8131;  -- 	CALL   CapVel
           12E : 9883;  -- 	OUT    LVELCMD
           12F : 8800;  -- 	RETURN
           130 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           131 : 6E0C;  -- 	ADDI    -500
           132 : 3938;  -- 	JPOS    CapVelHigh
           133 : 69F4;  -- 	ADDI    500
           134 : 69F4;  -- 	ADDI    500
           135 : 313A;  -- 	JNEG    CapVelLow
           136 : 6E0C;  -- 	ADDI    -500
           137 : 8800;  -- 	RETURN
           138 : B9F4;  -- 	LOADI   500
           139 : 8800;  -- 	RETURN
           13A : BE0C;  -- 	LOADI   -500
           13B : 8800;  -- 	RETURN
           13C : 393F;  -- 	JPOS   Abs_r
           13D : 598D;  -- 	XOR    NegOne       ; Flip all bits
           13E : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           13F : 8800;  -- 	RETURN
           140 : 9802;  -- 	OUT    TIMER
           141 : 9002;  -- 	IN     TIMER
           142 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           143 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           144 : 3141;  -- 	JNEG   Wloop
           145 : 8800;  -- 	RETURN
           146 : 814E;  -- 	CALL   BlockI2C    ; wait for idle
           147 : 09B3;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           148 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           149 : 098E;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           14A : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           14B : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           14C : 814E;  -- 	CALL   BlockI2C    ; wait for it to finish
           14D : 8800;  -- 	RETURN
           14E : 098E;  -- 	LOAD   Zero
           14F : 117A;  -- 	STORE  Temp        ; Used to check for timeout
           150 : 097A;  -- 	LOAD   Temp
           151 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           152 : 117A;  -- 	STORE  Temp
           153 : 4157;  -- 	JZERO  I2CError    ; Timeout occurred; error
           154 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           155 : 3950;  -- 	JPOS   BI2CL       ; If not 0, try again
           156 : 8800;  -- 	RETURN             ; Else return
           157 : 098E;  -- 	LOAD   Zero
           158 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           159 : 9804;  -- 	OUT    SSEG1
           15A : 9805;  -- 	OUT    SSEG2       ; display error message
           15B : 2957;  -- 	JUMP   I2CError
           15C : 8174;  -- 	CALL   GetBattLvl
           15D : 415C;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           15E : 21B2;  -- 	SUB    MinBatt
           15F : 3162;  -- 	JNEG   DeadBatt
           160 : 19B2;  -- 	ADD    MinBatt     ; get original value back
           161 : 8800;  -- 	RETURN
           162 : 0992;  -- 	LOAD   Four
           163 : 980A;  -- 	OUT    BEEP        ; start beep sound
           164 : 8174;  -- 	CALL   GetBattLvl  ; get the battery level
           165 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           166 : 9805;  -- 	OUT    SSEG2
           167 : 9806;  -- 	OUT    LCD
           168 : 098E;  -- 	LOAD   Zero
           169 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           16A : 9801;  -- 	OUT    LEDS        ; all LEDs on
           16B : 9807;  -- 	OUT    XLEDS
           16C : 8140;  -- 	CALL   Wait1       ; 1 second
           16D : 098E;  -- 	Load   Zero
           16E : 980A;  -- 	OUT    BEEP        ; stop beeping
           16F : 098E;  -- 	LOAD   Zero
           170 : 9801;  -- 	OUT    LEDS        ; LEDs off
           171 : 9807;  -- 	OUT    XLEDS
           172 : 8140;  -- 	CALL   Wait1       ; 1 second
           173 : 2962;  -- 	JUMP   DeadBatt    ; repeat forever
           174 : 09B4;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           175 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           176 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           177 : 814E;  -- 	CALL   BlockI2C    ; wait for it to finish
           178 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           179 : 8800;  -- 	RETURN
           17A : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           17B : 0000;  -- WaitTime:			DW 0
           17C : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           17D : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           17E : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           17F : 0004;  -- ErrMargin: 			DW 4
           180 : 0000;  -- XDir:				DW 0	; Direction on the X access robot is moving
           181 : 0000;  -- ObjectXDist:		DW 0 	; The x position of the next closest object
           182 : 0000;  -- ObjectYDist:		DW 0	; The absolute value of the y position of the next closest object
           183 : 0000;  -- AlongLongWall:		DW 0	; Boolean that signifies if robot is aligned along the longest wall
           184 : 0000;  -- ObjectsPosTheta:	DW 0	; Boolean that signifies if the robot has to turn in a positive angle to tag objects
           185 : 0000;  -- TagVelocity:		DW 0	; Number that signifies the speed and direction the robot has to go in to get to the next closest object along the wall
           186 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           187 : FF38;  -- WallThresh: 		DW -200 	; Defines distance away from wall before DE2Bot should stop moving (used in GoHome function)
           188 : 012C;  -- Cell: 				DW 300	; Initialize cell value
           189 : 012C;  -- ObjLoc:				DW 300	 ; Stores the location of the object to be tagged
           18A : 0000;  -- CellCount:  		DW 0 		; How many values in the occupancy array
           18B : 044C;  -- CellArrI:   		DW &H44C	; Memory location (starting index) of the cell array
           18C : 0000;  -- XposIndex:			DW 0		; Initialize a temporary index for cell array indexing
           18D : FFFF;  -- NegOne:   DW -1
           18E : 0000;  -- Zero:     DW 0
           18F : 0001;  -- One:      DW 1
           190 : 0002;  -- Two:      DW 2
           191 : 0003;  -- Three:    DW 3
           192 : 0004;  -- Four:     DW 4
           193 : 0005;  -- Five:     DW 5
           194 : 0006;  -- Six:      DW 6
           195 : 0007;  -- Seven:    DW 7
           196 : 0008;  -- Eight:    DW 8
           197 : 0009;  -- Nine:     DW 9
           198 : 000A;  -- Ten:      DW 10
           199 : 0001;  -- Mask0:    DW &B00000001
           19A : 0002;  -- Mask1:    DW &B00000010
           19B : 0004;  -- Mask2:    DW &B00000100
           19C : 0008;  -- Mask3:    DW &B00001000
           19D : 0010;  -- Mask4:    DW &B00010000
           19E : 0020;  -- Mask5:    DW &B00100000
           19F : 0040;  -- Mask6:    DW &B01000000
           1A0 : 0080;  -- Mask7:    DW &B10000000
           1A1 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1A2 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1A3 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1A4 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           1A5 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           1A6 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           1A7 : 00B4;  -- Deg180:   DW 180       ; 180
           1A8 : 010E;  -- Deg270:   DW 270       ; 270
           1A9 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           1AA : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           1AB : FF9C;  -- RSlow:    DW -100
           1AC : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           1AD : FEA2;  -- RMid:     DW -350
           1AE : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           1AF : FE0C;  -- RFast:    DW -500
           1B0 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           1B1 : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           1B2 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           1B3 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           1B4 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           44C : 7FFF;  -- OcArray: DW &H7FFF	
  END;
