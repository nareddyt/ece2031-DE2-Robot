-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0977;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8131;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8147;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4986;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4983;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4983;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 1165;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 5165;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4984;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0977;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 		OUT 	RESETPOS
           01D : 0977;  -- 		LOAD	ZERO
           01E : 281F;  -- 		JUMP	MainLoopForever
           01F : 8037;  -- 		CALL	FindAndTagClosestObject
           020 : 98C3;  -- 		OUT 	RESETPOS
           021 : 0977;  -- 		LOAD   Zero         ; Stop everything.
           022 : 9883;  -- 		OUT    LVELCMD
           023 : 988B;  -- 		OUT    RVELCMD
           024 : 98B2;  -- 		OUT    SONAREN
           025 : 0828;  -- 		LOAD   DEAD         ; An indication that we are dead
           026 : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           027 : 2827;  -- 		JUMP   Forever      ; Do this forever.
           028 : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           029 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           02A : 4983;  -- 	AND    Mask1
           02B : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           02C : 1165;  -- 	STORE  Temp        ; (overkill, but looks nice)
           02D : 6001;  -- 	SHIFT  1
           02E : 5165;  -- 	OR     Temp
           02F : 9807;  -- 	OUT    XLEDS
           030 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           031 : 4984;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           032 : 3829;  -- 	JPOS   WaitForUserSub ; not ready (KEYs are active-low, hence JPOS)
           033 : 0977;  -- 	LOAD   Zero
           034 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           035 : 8800;  -- 	RETURN
           036 : 0000;  -- 	TravelDist:		DW 0
           037 : 98C3;  -- 		OUT		RESETPOS
           038 : 0987;  -- 		LOAD	MASK5
           039 : 98B2;  -- 		OUT		SONAREN
           03A : 90AD;  -- 		IN		DIST5
           03B : 1036;  -- 		STORE	TravelDist
           03C : 9804;  -- 		OUT		SSEG1
           03D : 219A;  -- 		SUB		MaxShort
           03E : 3053;  -- 		JNEG	NewFound
           03F : 90C0;  -- 		IN		XPOS
           040 : 2199;  -- 		SUB		MaxLong
           041 : 4049;  -- 		JZERO	TurnAroundGoHome
           042 : 3849;  -- 		JPOS	TurnAroundGoHome
           043 : B800;  -- 		LOADI 	0
           044 : 10E5;  -- 		STORE 	DTheta
           045 : 0997;  -- 		LOAD 	FFast
           046 : 10E6;  -- 		STORE 	DVel
           047 : 80E7;  -- 		CALL 	ControlMovement
           048 : 283A;  -- 		JUMP	NewKeepCheck
           049 : 80B6;  -- 		CALL	StopMovement
           04A : BF60;  -- 		LOADI	-160
           04B : 1167;  -- 		STORE	Angle
           04C : 80C0;  -- 		CALL	Rotate
           04D : B8B4;  -- 		LOADI 	180
           04E : 10E5;  -- 		STORE 	DTheta
           04F : 0997;  -- 		LOAD 	FFast
           050 : 10E6;  -- 		STORE 	DVel
           051 : 80E7;  -- 		CALL 	ControlMovement
           052 : 284D;  -- 		JUMP	GoingHome
           053 : 80B6;  -- 		CALL	StopMovement
           054 : 8075;  -- 		CALL 	Tag
           055 : 8800;  -- 		RETURN
           056 : 8021;  -- 	CALL 	Die
           057 : 8800;  -- 	RETURN
           058 : 9184;  -- 	IN 		MASK2
           059 : 5185;  -- 	OR 		MASK3
           05A : 98B2;  -- 	OUT 	SONAREN
           05B : B995;  -- 	LOADI 	FMid
           05C : 10E6;  -- 	STORE 	DVel
           05D : B85A;  -- 	LOADI 	90
           05E : 10E5;  -- 	STORE 	DTheta
           05F : 80E7;  -- 	CALL 	ControlMovement
           060 : 90AA;  -- 	IN 		DIST2
           061 : 6E0C;  -- 	ADDI 	-500
           062 : 385F;  -- 	JPOS 	Detect1
           063 : 90AB;  -- 	IN	 	DIST3
           064 : 6E0C;  -- 	ADDI 	-500
           065 : 385F;  -- 	JPOS 	Detect1
           066 : 80B6;  -- 	CALL 	StopMovement
           067 : B85F;  -- 	LOADI 	95
           068 : 1167;  -- 	STORE 	Angle
           069 : 80C0;  -- 	CALL  	Rotate
           06A : B8B4;  -- 	LOADI 	180
           06B : 10E5;  -- 	STORE 	DTheta
           06C : 80E7;  -- 	CALL	ControlMovement
           06D : 90AA;  -- 	IN 		DIST2
           06E : 6E0C;  -- 	ADDI 	-500
           06F : 386C;  -- 	JPOS 	Detect2
           070 : 90AB;  -- 	IN	 	DIST3
           071 : 6E0C;  -- 	ADDI 	-500
           072 : 386C;  -- 	JPOS 	Detect2
           073 : 80B6;  -- 	CALL 	StopMovement
           074 : 2856;  -- 	JUMP 	BackAtHome
           075 : 9184;  -- 	IN		MASK2
           076 : 5185;  -- 	OR 		MASK3
           077 : 98B2;  -- 	OUT 	SONAREN
           078 : BFA6;  -- 	LOADI	-90
           079 : 10E5;  -- 	STORE 	DTheta
           07A : 0995;  -- 	LOAD 	FMid
           07B : 10E6;  -- 	STORE 	DVel
           07C : 80E7;  -- 	CALL 	ControlMovement
           07D : 809E;  -- 	CALL 	UpdateTag
           07E : 90AA;  -- 	IN 		DIST2
           07F : 6ECA;  -- 	ADDI 	-310
           080 : 3085;  -- 	JNEG 	TagIt2
           081 : 90AB;  -- 	IN 		DIST3
           082 : 6ECA;  -- 	ADDI 	-310
           083 : 3085;  -- 	JNEG 	TagIt2
           084 : 287C;  -- 	JUMP 	TagIt
           085 : 90C1;  -- 	IN   	YPOS
           086 : 8105;  -- 	CALL 	Abs
           087 : 6972;  -- 	ADDI 	370 ; 310 + 60
           088 : 116B;  -- 	STORE 	EncoderY
           089 : 80E7;  -- 	CALL 	ControlMovement
           08A : 90C1;  -- 	IN 		YPOS
           08B : 8105;  -- 	CALL 	Abs
           08C : 216B;  -- 	SUB 	EncoderY
           08D : 3089;  -- 	JNEG 	TapTag
           08E : 90C1;  -- 	IN 		YPOS
           08F : 8105;  -- 	CALL 	Abs
           090 : 6FE2;  -- 	ADDI 	-30
           091 : 116B;  -- 	STORE 	EncoderY
           092 : 0998;  -- 	LOAD 	RFast
           093 : 10E6;  -- 	STORE 	DVel
           094 : 80E7;  -- 	CALL 	ControlMovement
           095 : 90C1;  -- 	IN 		YPOS
           096 : 8105;  -- 	CALL 	Abs
           097 : 216B;  -- 	SUB 	EncoderY
           098 : 3894;  -- 	JPOS 	MoveBack
           099 : B8B4;  -- 	LOADI 	180
           09A : 1167;  -- 	STORE 	Angle
           09B : 80C0;  -- 	CALL 	Rotate
           09C : 8058;  -- 	CALL 	GoHome
           09D : 8800;  -- 	RETURN
           09E : 8800;  -- 	RETURN
           09F : 7FFF;  -- c7FFF: DW &H7FFF
           0A0 : 0000;  -- m16sA: DW 0 ; multiplicand
           0A1 : 0000;  -- m16sB: DW 0 ; multipler
           0A2 : 0000;  -- m16sc: DW 0 ; carry
           0A3 : 0000;  -- mcnt16s: DW 0 ; counter
           0A4 : 0000;  -- mres16sL: DW 0 ; result low
           0A5 : 0000;  -- mres16sH: DW 0 ; result high
           0A6 : 005A;  -- Ang0:		DW 90
           0A7 : 002C;  -- Ang1:		DW 44
           0A8 : 000C;  -- Ang2:		DW 12
           0A9 : FFF4;  -- Ang3:		DW -12
           0AA : FFD4;  -- Ang4:		DW -44
           0AB : FFA6;  -- Ang5:		DW -90
           0AC : FF70;  -- Ang6:		DW -144
           0AD : 0090;  -- Ang7:		DW 144
           0AE : 0000;  -- SensorToCheck: 	DW 0
           0AF : 0000;  -- SensorAngle:		DW 0
           0B0 : 0000;  -- SensorDist: 		DW 0
           0B1 : 0000;  -- SensorIndex: 		DW 0
           0B2 : 0000;  -- SensorUpdate:		DW 0
           0B3 : 0977;  -- 	LOAD	ZERO
           0B4 : 98B2;  -- 	OUT		SONAREN
           0B5 : 8800;  -- 	RETURN
           0B6 : 0977;  -- 	LOAD 	ZERO
           0B7 : 9883;  -- 	OUT 	LVELCMD
           0B8 : 988B;  -- 	OUT 	RVELCMD
           0B9 : 8800;  -- 	RETURN
           0BA : 30BD;  -- 	JNEG	M360N
           0BB : 6E98;  -- 	ADDI 	-360
           0BC : 28BA;  -- 	JUMP 	Mod360
           0BD : 6968;  -- 		ADDI 	360
           0BE : 30BD;  -- 		JNEG 	M360N
           0BF : 8800;  -- 		RETURN
           0C0 : 1165;  -- 		STORE	Temp
           0C1 : 90C2;  -- 		IN 		THETA
           0C2 : 1967;  -- 		ADD 	Angle
           0C3 : 216A;  -- 		SUB 	ErrMargin
           0C4 : 80BA;  -- 		CALL 	Mod360
           0C5 : 1168;  -- 		STORE 	LowErr
           0C6 : 90C2;  -- 		IN 		THETA
           0C7 : 1967;  -- 		ADD 	Angle
           0C8 : 196A;  -- 		ADD 	ErrMargin
           0C9 : 80BA;  -- 		CALL 	Mod360
           0CA : 1169;  -- 		STORE 	HighErr
           0CB : 0967;  -- 		LOAD 	Angle
           0CC : 30D8;  -- 		JNEG 	RotateCW ; else RotateCC
           0CD : 0993;  -- 		LOAD 	FSlow
           0CE : 988B;  -- 		OUT		RVELCMD
           0CF : 0994;  -- 		LOAD 	RSlow
           0D0 : 9883;  -- 		OUT		LVELCMD
           0D1 : 90C2;  -- 		IN 		THETA
           0D2 : 2169;  -- 		SUB 	HighErr
           0D3 : 38CD;  -- 		JPOS	RotateCC
           0D4 : 90C2;  -- 		IN 		THETA
           0D5 : 2168;  -- 		SUB  	LowErr
           0D6 : 30CD;  -- 		JNEG	RotateCC
           0D7 : 28E2;  -- 		JUMP 	RotateEnd
           0D8 : 0994;  -- 		LOAD 	RSlow
           0D9 : 988B;  -- 		OUT		RVELCMD
           0DA : 0993;  -- 		LOAD 	FSlow
           0DB : 9883;  -- 		OUT		LVELCMD
           0DC : 90C2;  -- 		IN 		THETA
           0DD : 2169;  -- 		SUB 	HighErr
           0DE : 38D8;  -- 		JPOS	RotateCW
           0DF : 90C2;  -- 		IN 		THETA
           0E0 : 2168;  -- 		SUB  	LowErr
           0E1 : 30D8;  -- 		JNEG	RotateCW
           0E2 : 80B6;  -- 		CALL 	StopMovement
           0E3 : 0965;  -- 		LOAD 	Temp
           0E4 : 8800;  -- 		RETURN
           0E5 : 0000;  -- DTheta:    DW 0
           0E6 : 0000;  -- DVel:      DW 0
           0E7 : 90C2;  -- 	IN     THETA
           0E8 : 20E5;  -- 	SUB    DTheta      ; actual - desired angle
           0E9 : 8106;  -- 	CALL   Neg         ; desired - actual angle
           0EA : 68B4;  -- 	ADDI   180
           0EB : 80BA;  -- 	CALL   Mod360
           0EC : 6F4C;  -- 	ADDI   -180
           0ED : 6002;  -- 	SHIFT  2
           0EE : 10F9;  -- 	STORE  CMAErr      ; hold temporarily
           0EF : 08E6;  -- 	LOAD   DVel
           0F0 : 18F9;  -- 	ADD    CMAErr
           0F1 : 80FA;  -- 	CALL   CapVel      ; ensure velocity is valid
           0F2 : 988B;  -- 	OUT    RVELCMD
           0F3 : 08F9;  -- 	LOAD   CMAErr
           0F4 : 8106;  -- 	CALL   Neg         ; left wheel gets negative differential
           0F5 : 18E6;  -- 	ADD    DVel
           0F6 : 80FA;  -- 	CALL   CapVel
           0F7 : 9883;  -- 	OUT    LVELCMD
           0F8 : 8800;  -- 	RETURN
           0F9 : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           0FA : 6E0C;  -- 	ADDI    -500
           0FB : 3901;  -- 	JPOS    CapVelHigh
           0FC : 69F4;  -- 	ADDI    500
           0FD : 69F4;  -- 	ADDI    500
           0FE : 3103;  -- 	JNEG    CapVelLow
           0FF : 6E0C;  -- 	ADDI    -500
           100 : 8800;  -- 	RETURN
           101 : B9F4;  -- 	LOADI   500
           102 : 8800;  -- 	RETURN
           103 : BE0C;  -- 	LOADI   -500
           104 : 8800;  -- 	RETURN
           105 : 3908;  -- 	JPOS   Abs_r
           106 : 5976;  -- 	XOR    NegOne       ; Flip all bits
           107 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           108 : 8800;  -- 	RETURN
           109 : B800;  -- 		LOADI  0
           10A : 10A2;  -- 		STORE  m16sc        ; clear carry
           10B : 10A5;  -- 		STORE  mres16sH     ; clear result
           10C : B810;  -- 		LOADI  16           ; load 16 to counter
           10D : 10A3;  -- 		STORE  mcnt16s
           10E : 08A2;  -- 		LOAD   m16sc        ; check the carry (from previous iteration)
           10F : 4113;  -- 		JZERO  Mult16s_noc  ; if no carry, move on
           110 : 08A5;  -- 		LOAD   mres16sH     ; if a carry,
           111 : 18A0;  -- 		ADD    m16sA        ;  add multiplicand to result H
           112 : 10A5;  -- 		STORE  mres16sH
           113 : 08A1;  -- 		LOAD   m16sB
           114 : 4978;  -- 		AND    One          ; check bit 0 of multiplier
           115 : 10A2;  -- 		STORE  m16sc        ; save as next carry
           116 : 411A;  -- 		JZERO  Mult16s_sh   ; if no carry, move on to shift
           117 : 08A5;  -- 		LOAD   mres16sH     ; if bit 0 set,
           118 : 20A0;  -- 		SUB    m16sA        ;  subtract multiplicand from result H
           119 : 10A5;  -- 		STORE  mres16sH
           11A : 08A1;  -- 		LOAD   m16sB
           11B : 6011;  -- 		SHIFT  -1           ; shift result L >>1
           11C : 489F;  -- 		AND    c7FFF        ; clear msb
           11D : 10A1;  -- 		STORE  m16sB
           11E : 08A5;  -- 		LOAD   mres16sH     ; load result H
           11F : 600F;  -- 		SHIFT  15           ; move lsb to msb
           120 : 50A1;  -- 		OR     m16sB
           121 : 10A1;  -- 		STORE  m16sB        ; result L now includes carry out from H
           122 : 08A5;  -- 		LOAD   mres16sH
           123 : 6011;  -- 		SHIFT  -1
           124 : 10A5;  -- 		STORE  mres16sH     ; shift result H >>1
           125 : 08A3;  -- 		LOAD   mcnt16s
           126 : 6FFF;  -- 		ADDI   -1           ; check counter
           127 : 390D;  -- 		JPOS   Mult16s_loop ; need to iterate 16 times
           128 : 08A1;  -- 		LOAD   m16sB
           129 : 10A4;  -- 		STORE  mres16sL     ; multiplier and result L shared a word
           12A : 8800;  -- 		RETURN              ; Done
           12B : 9802;  -- 	OUT    TIMER
           12C : 9002;  -- 	IN     TIMER
           12D : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           12E : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           12F : 312C;  -- 	JNEG   Wloop
           130 : 8800;  -- 	RETURN
           131 : 8139;  -- 	CALL   BlockI2C    ; wait for idle
           132 : 099C;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           133 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           134 : 0977;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           135 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           136 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           137 : 8139;  -- 	CALL   BlockI2C    ; wait for it to finish
           138 : 8800;  -- 	RETURN
           139 : 0977;  -- 	LOAD   Zero
           13A : 1165;  -- 	STORE  Temp        ; Used to check for timeout
           13B : 0965;  -- 	LOAD   Temp
           13C : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           13D : 1165;  -- 	STORE  Temp
           13E : 4142;  -- 	JZERO  I2CError    ; Timeout occurred; error
           13F : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           140 : 393B;  -- 	JPOS   BI2CL       ; If not 0, try again
           141 : 8800;  -- 	RETURN             ; Else return
           142 : 0977;  -- 	LOAD   Zero
           143 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           144 : 9804;  -- 	OUT    SSEG1
           145 : 9805;  -- 	OUT    SSEG2       ; display error message
           146 : 2942;  -- 	JUMP   I2CError
           147 : 815F;  -- 	CALL   GetBattLvl
           148 : 4147;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           149 : 219B;  -- 	SUB    MinBatt
           14A : 314D;  -- 	JNEG   DeadBatt
           14B : 199B;  -- 	ADD    MinBatt     ; get original value back
           14C : 8800;  -- 	RETURN
           14D : 097B;  -- 	LOAD   Four
           14E : 980A;  -- 	OUT    BEEP        ; start beep sound
           14F : 815F;  -- 	CALL   GetBattLvl  ; get the battery level
           150 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           151 : 9805;  -- 	OUT    SSEG2
           152 : 9806;  -- 	OUT    LCD
           153 : 0977;  -- 	LOAD   Zero
           154 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           155 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           156 : 9807;  -- 	OUT    XLEDS
           157 : 812B;  -- 	CALL   Wait1       ; 1 second
           158 : 0977;  -- 	Load   Zero
           159 : 980A;  -- 	OUT    BEEP        ; stop beeping
           15A : 0977;  -- 	LOAD   Zero
           15B : 9801;  -- 	OUT    LEDS        ; LEDs off
           15C : 9807;  -- 	OUT    XLEDS
           15D : 812B;  -- 	CALL   Wait1       ; 1 second
           15E : 294D;  -- 	JUMP   DeadBatt    ; repeat forever
           15F : 099D;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           160 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           161 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           162 : 8139;  -- 	CALL   BlockI2C    ; wait for it to finish
           163 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           164 : 8800;  -- 	RETURN
           165 : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           166 : 0000;  -- WaitTime:			DW 0
           167 : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           168 : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           169 : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           16A : 0004;  -- ErrMargin: 			DW 4
           16B : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           16C : FFA6;  -- TagAng: 			DW -90		; Tells robot travel ang when tagging
           16D : 0000;  -- y_val:			DW 0
           16E : 0000;  -- THETAtemp2:		DW 0
           16F : 0000;  -- THETAtemp4:		DW 0
           170 : 0000;  -- THETA2:			DW 0
           171 : 0000;  -- THETA4:			DW 0
           172 : 0000;  -- THETA6:			DW 0
           173 : 0000;  -- TCOPY:			DW 0
           174 : 0000;  -- CosSum:			DW 0
           175 : FFFB;  -- NegFive:	DW -5
           176 : FFFF;  -- NegOne:   	DW -1
           177 : 0000;  -- Zero:     	DW 0
           178 : 0001;  -- One:      	DW 1
           179 : 0002;  -- Two:      	DW 2
           17A : 0003;  -- Three:    	DW 3
           17B : 0004;  -- Four:     	DW 4
           17C : 0005;  -- Five:     	DW 5
           17D : 0006;  -- Six:      	DW 6
           17E : 0007;  -- Seven:    	DW 7
           17F : 0008;  -- Eight:    	DW 8
           180 : 0009;  -- Nine:     	DW 9
           181 : 000A;  -- Ten:      	DW 10
           182 : 0001;  -- Mask0:    DW &B00000001
           183 : 0002;  -- Mask1:    DW &B00000010
           184 : 0004;  -- Mask2:    DW &B00000100
           185 : 0008;  -- Mask3:    DW &B00001000
           186 : 0010;  -- Mask4:    DW &B00010000
           187 : 0020;  -- Mask5:    DW &B00100000
           188 : 0040;  -- Mask6:    DW &B01000000
           189 : 0080;  -- Mask7:    DW &B10000000
           18A : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           18B : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           18C : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           18D : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           18E : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           18F : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           190 : 00B4;  -- Deg180:   DW 180       ; 180
           191 : 010E;  -- Deg270:   DW 270       ; 270
           192 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           193 : 008C;  -- FSlow:    DW 140       ; 100 is about the lowest velocity value that will move
           194 : FF74;  -- RSlow:    DW -140
           195 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           196 : FEA2;  -- RMid:     DW -350
           197 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           198 : FE0C;  -- RFast:    DW -500
           199 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           19A : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           19B : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           19C : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           19D : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           64C : 0000;  -- DW		0	; Array start	
  END;
