-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0A37;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 81EF;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8205;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4A46;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4A43;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4A43;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 1223;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 5223;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4A44;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0A37;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 		OUT 	RESETPOS
           01D : 0A37;  -- 		LOAD	ZERO
           01E : 281F;  -- 		JUMP	MainLoopForever
           01F : 8029;  -- 		CALL	FindAndTagClosestObject
           020 : 0A37;  -- 		LOAD   Zero         ; Stop everything.
           021 : 9883;  -- 		OUT    LVELCMD
           022 : 988B;  -- 		OUT    RVELCMD
           023 : 98B2;  -- 		OUT    SONAREN
           024 : 0827;  -- 		LOAD   DEAD         ; An indication that we are dead
           025 : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           026 : 2826;  -- 		JUMP   Forever      ; Do this forever.
           027 : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           028 : 0000;  -- 	TravelDist:		DW 0
           029 : 0A47;  -- 		LOAD	MASK5
           02A : 5245;  -- 		OR		MASK3
           02B : 98B2;  -- 		OUT		SONAREN
           02C : 90AD;  -- 		IN		DIST5
           02D : 1028;  -- 		STORE	TravelDist
           02E : 9804;  -- 		OUT		SSEG1
           02F : 225A;  -- 		SUB		MaxShort ;If less than max, then object found
           030 : 6936;  -- 		ADDI	310
           031 : 3056;  -- 		JNEG	NewFound
           032 : 6ECA;  -- 		ADDI	-310
           033 : 305A;  -- 		JNEG	RotateTag ;If the object is less than 1 foot to the right the bot, perform rotating tag
           034 : 90C0;  -- 		IN		XPOS
           035 : 2259;  -- 		SUB		MaxLong
           036 : 404F;  -- 		JZERO	TurnAroundGoHome
           037 : 384F;  -- 		JPOS	TurnAroundGoHome
           038 : B800;  -- 		LOADI 	0
           039 : 1163;  -- 		STORE 	DTheta
           03A : 0A55;  -- 		LOAD 	FMid ;Sweeping speed
           03B : 1164;  -- 		STORE 	DVel
           03C : 8165;  -- 		CALL 	ControlMovement
           03D : 90AB;  -- 		IN 		DIST3
           03E : 9805;  -- 		OUT		SSEG2
           03F : 6ECA;  -- 		ADDI 	-310
           040 : 382C;  -- 		JPOS 	NewKeepCheck
           041 : 80BC;  -- 		CALL	ObjectFoundBeep
           042 : 90C0;  -- 		IN   	XPOS
           043 : 6904;  -- 		ADDI 	260  ;Forward tagging distance
           044 : 122A;  -- 		STORE 	EncoderX
           045 : B800;  -- 		LOADI 	0
           046 : 1163;  -- 		STORE 	DTheta
           047 : 0A57;  -- 		LOAD 	FFast
           048 : 1164;  -- 		STORE 	DVel
           049 : 8165;  -- 		CALL 	ControlMovement
           04A : 90C0;  -- 		IN 		XPOS
           04B : 222A;  -- 		SUB 	EncoderX
           04C : 3045;  -- 		JNEG 	HitDetectedAlongPath
           04D : 80CF;  -- 		CALL	StopMovement
           04E : 284F;  -- 		JUMP	TurnAroundGoHome
           04F : 80CF;  -- 		CALL	StopMovement
           050 : B800;  -- 		LOADI 	0
           051 : 1163;  -- 		STORE 	DTheta
           052 : 0A58;  -- 		LOAD 	RFast
           053 : 1164;  -- 		STORE 	DVel
           054 : 8165;  -- 		CALL 	ControlMovement
           055 : 2850;  -- 		JUMP	GoingHome
           056 : 80CF;  -- 		CALL	StopMovement
           057 : 80BC;  -- 		CALL	ObjectFoundBeep
           058 : 8076;  -- 		CALL 	Tag
           059 : 8800;  -- 		RETURN
           05A : 80CF;  -- 		CALL	StopMovement
           05B : 80BC;  -- 		CALL	ObjectFoundBeep
           05C : 0A25;  -- 		Load	Angle
           05D : 17E2;  -- 		Store	-30
           05E : 80D9;  -- 		Call 	Rotate
           05F : 0A25;  -- 		Load	Angle
           060 : 101E;  -- 		Store	30
           061 : 80D9;  -- 		Call	Rotate
           062 : 2850;  -- 		Jump	GoingHome
           063 : 2820;  -- 	JUMP 	Die
           064 : 0A37;  -- 	LOAD	ZERO
           065 : 98B2;  -- 	OUT 	SONAREN
           066 : BA55;  -- 	LOADI 	FMid
           067 : 1164;  -- 	STORE 	DVel
           068 : 0A2C;  -- 	LOAD 	HomeAng
           069 : 1163;  -- 	STORE 	DTheta
           06A : 8165;  -- 	CALL 	ControlMovement
           06B : 90C0;  -- 	IN 		XPos
           06C : 6ED4;  -- 	ADDI 	-300 ; distance away from x origin
           06D : 386A;  -- 	JPOS 	Detect1
           06E : B83C;  -- 	LOADI	60
           06F : 1163;  -- 	STORE 	DTheta
           070 : 8165;  -- 	CALL	ControlMovement
           071 : 90C1;  -- 	IN 		YPos
           072 : 8183;  -- 	CALL 	abs
           073 : 6F38;  -- 	ADDI 	-200
           074 : 3870;  -- 	JPOS 	Detect2
           075 : 2863;  -- 	JUMP 	BackAtHome
           076 : 9244;  -- 	IN		MASK2
           077 : 5245;  -- 	OR 		MASK3
           078 : 98B2;  -- 	OUT 	SONAREN
           079 : BFA6;  -- 	LOADI	-90
           07A : 1163;  -- 	STORE 	DTheta
           07B : 0A55;  -- 	LOAD 	FMid
           07C : 1164;  -- 	STORE 	DVel
           07D : 90C1;  -- 	IN 		YPos
           07E : 8183;  -- 	CALL 	abs
           07F : 225A;  -- 	SUB 	MaxShort
           080 : 388F;  -- 	JPOS 	TapTag ; if it reaches the end will go home
           081 : 8165;  -- 	CALL 	ControlMovement
           082 : 80BA;  -- 	CALL 	UpdateTag
           083 : 90AA;  -- 	IN 		DIST2
           084 : 6ECA;  -- 	ADDI 	-310
           085 : 308A;  -- 	JNEG 	TagIt2
           086 : 90AB;  -- 	IN 		DIST3
           087 : 6ECA;  -- 	ADDI 	-310
           088 : 308A;  -- 	JNEG 	TagIt2
           089 : 287D;  -- 	JUMP 	TagIt
           08A : 80BC;  -- 	CALL	ObjectFoundBeep	
           08B : 90C1;  -- 	IN   	YPOS
           08C : 8183;  -- 	CALL 	Abs
           08D : 6896;  -- 	ADDI 	150 ; move forward this distance
           08E : 1229;  -- 	STORE 	EncoderY
           08F : 8165;  -- 	CALL 	ControlMovement
           090 : 90C1;  -- 	IN 		YPOS
           091 : 8183;  -- 	CALL 	Abs
           092 : 2229;  -- 	SUB 	EncoderY
           093 : 308F;  -- 	JNEG 	TapTag
           094 : 90C1;  -- 	IN 		YPOS
           095 : 8183;  -- 	CALL 	Abs
           096 : 6F9C;  -- 	ADDI 	-100  ;move back this distance
           097 : 1229;  -- 	STORE 	EncoderY
           098 : 0A58;  -- 	LOAD 	RFast
           099 : 1164;  -- 	STORE 	DVel
           09A : 90C0;  -- 	IN		XPOS
           09B : 224E;  -- 	SUB     TwoFeet	
           09C : 309E;  -- 	JNEG	GottaGoBack
           09D : 28A8;  -- 	JUMP	ConwithBack
           09E : 90C1;  -- 		IN 		YPOS
           09F : 8183;  -- 		CALL    ABS
           0A0 : 6F9C;  -- 		ADDI	-100
           0A1 : 3063;  -- 		JNEG	BackAtHome
           0A2 : 0A56;  -- 		LOAD 	RMid
           0A3 : 1164;  -- 		STORE 	DVel
           0A4 : BFA6;  -- 		LOADI	-90
           0A5 : 1163;  -- 		STORE	DTheta
           0A6 : 8165;  -- 		CALL	ControlMovement
           0A7 : 289E;  -- 		JUMP	GottaGoBack	
           0A8 : 8165;  -- 		CALL 	ControlMovement
           0A9 : 90C1;  -- 		IN 		YPOS
           0AA : 8183;  -- 		CALL 	Abs
           0AB : 2229;  -- 		SUB 	EncoderY
           0AC : 389A;  -- 		JPOS 	MoveBack
           0AD : 90C0;  -- 		IN 		XPos
           0AE : 115D;  -- 	 	STORE 	ATanX
           0AF : 90C1;  -- 	 	IN 		YPos
           0B0 : 115E;  -- 		STORE 	ATanY
           0B1 : 80FE;  -- 	 	CALL 	ATan2
           0B2 : 689B;  -- 	 	ADDI	155
           0B3 : 80D3;  -- 	 	CALL	mod360
           0B4 : 122C;  -- 		STORE 	HomeAng
           0B5 : 1163;  -- 		STORE 	DTheta
           0B6 : 0A37;  -- 		LOAD	ZERO
           0B7 : 1164;  -- 		STORE	DVEL
           0B8 : 8064;  -- 		CALL 	GoHome
           0B9 : 8800;  -- 		RETURN
           0BA : 8800;  -- 	RETURN
           0BB : 0360;  -- BeepPitch:	DW 0864
           0BC : 08BB;  -- 	LOAD	BeepPitch
           0BD : 980A;  -- 	OUT		BEEP
           0BE : 8800;  -- 	RETURN
           0BF : 005A;  -- Ang0:		DW 90
           0C0 : 002C;  -- Ang1:		DW 44
           0C1 : 000C;  -- Ang2:		DW 12
           0C2 : FFF4;  -- Ang3:		DW -12
           0C3 : FFD4;  -- Ang4:		DW -44
           0C4 : FFA6;  -- Ang5:		DW -90
           0C5 : FF70;  -- Ang6:		DW -144
           0C6 : 0090;  -- Ang7:		DW 144
           0C7 : 0000;  -- SensorToCheck: 	DW 0
           0C8 : 0000;  -- SensorAngle:		DW 0
           0C9 : 0000;  -- SensorDist: 		DW 0
           0CA : 0000;  -- SensorIndex: 		DW 0
           0CB : 0000;  -- SensorUpdate:		DW 0
           0CC : 0A37;  -- 	LOAD	ZERO
           0CD : 98B2;  -- 	OUT		SONAREN
           0CE : 8800;  -- 	RETURN
           0CF : 0A37;  -- 	LOAD 	ZERO
           0D0 : 9883;  -- 	OUT 	LVELCMD
           0D1 : 988B;  -- 	OUT 	RVELCMD
           0D2 : 8800;  -- 	RETURN
           0D3 : 30D6;  -- 	JNEG	M360N
           0D4 : 6E98;  -- 	ADDI 	-360
           0D5 : 28D3;  -- 	JUMP 	Mod360
           0D6 : 6968;  -- 		ADDI 	360
           0D7 : 30D6;  -- 		JNEG 	M360N
           0D8 : 8800;  -- 		RETURN
           0D9 : 1223;  -- 		STORE	Temp
           0DA : 90C2;  -- 		IN 		THETA
           0DB : 1A25;  -- 		ADD 	Angle
           0DC : 2228;  -- 		SUB 	ErrMargin
           0DD : 80D3;  -- 		CALL 	Mod360
           0DE : 1226;  -- 		STORE 	LowErr
           0DF : 90C2;  -- 		IN 		THETA
           0E0 : 1A25;  -- 		ADD 	Angle
           0E1 : 1A28;  -- 		ADD 	ErrMargin
           0E2 : 80D3;  -- 		CALL 	Mod360
           0E3 : 1227;  -- 		STORE 	HighErr
           0E4 : 0A25;  -- 		LOAD 	Angle
           0E5 : 30F1;  -- 		JNEG 	RotateCW ; else RotateCC
           0E6 : 0A53;  -- 		LOAD 	FSlow
           0E7 : 988B;  -- 		OUT		RVELCMD
           0E8 : 0A54;  -- 		LOAD 	RSlow
           0E9 : 9883;  -- 		OUT		LVELCMD
           0EA : 90C2;  -- 		IN 		THETA
           0EB : 2227;  -- 		SUB 	HighErr
           0EC : 38E6;  -- 		JPOS	RotateCC
           0ED : 90C2;  -- 		IN 		THETA
           0EE : 2226;  -- 		SUB  	LowErr
           0EF : 30E6;  -- 		JNEG	RotateCC
           0F0 : 28FB;  -- 		JUMP 	RotateEnd
           0F1 : 0A54;  -- 		LOAD 	RSlow
           0F2 : 988B;  -- 		OUT		RVELCMD
           0F3 : 0A53;  -- 		LOAD 	FSlow
           0F4 : 9883;  -- 		OUT		LVELCMD
           0F5 : 90C2;  -- 		IN 		THETA
           0F6 : 2227;  -- 		SUB 	HighErr
           0F7 : 38F1;  -- 		JPOS	RotateCW
           0F8 : 90C2;  -- 		IN 		THETA
           0F9 : 2226;  -- 		SUB  	LowErr
           0FA : 30F1;  -- 		JNEG	RotateCW
           0FB : 80CF;  -- 		CALL 	StopMovement
           0FC : 0A23;  -- 		LOAD 	Temp
           0FD : 8800;  -- 		RETURN
           0FE : 095E;  -- 	LOAD   AtanY
           0FF : 8183;  -- 	CALL   Abs          ; abs(y)
           100 : 1160;  -- 	STORE  AtanT
           101 : 095D;  -- 	LOAD   AtanX        ; abs(x)
           102 : 8183;  -- 	CALL   Abs
           103 : 2160;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           104 : 310F;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           105 : 095D;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           106 : 310C;  -- 	JNEG   A2_R3
           107 : 811E;  -- 	CALL   A2_calc      ; Octants 1, 8
           108 : 310A;  -- 	JNEG   A2_R1n
           109 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           10A : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           10B : 8800;  -- 	RETURN
           10C : 811E;  -- 	CALL   A2_calc      ; Octants 4, 5            
           10D : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           10E : 8800;  -- 	RETURN
           10F : 095E;  -- 	LOAD   AtanY        ; Swap input arguments
           110 : 1160;  -- 	STORE  AtanT
           111 : 095D;  -- 	LOAD   AtanX
           112 : 115E;  -- 	STORE  AtanY
           113 : 0960;  -- 	LOAD   AtanT
           114 : 115D;  -- 	STORE  AtanX
           115 : 391A;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           116 : 811E;  -- 	CALL   A2_calc      ; else octants 6, 7
           117 : 8184;  -- 	CALL   Neg          ; Negatge the number
           118 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           119 : 8800;  -- 	RETURN
           11A : 811E;  -- 	CALL   A2_calc      ; Octants 2, 3
           11B : 8184;  -- 	CALL   Neg          ; negate the angle
           11C : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           11D : 8800;  -- 	RETURN
           11E : 095E;  -- 	LOAD   AtanY
           11F : 11E1;  -- 	STORE  d16sN        ; Y in numerator
           120 : 095D;  -- 	LOAD   AtanX
           121 : 11E2;  -- 	STORE  d16sD        ; X in denominator
           122 : 814A;  -- 	CALL   A2_div       ; divide
           123 : 09E7;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           124 : 115F;  -- 	STORE  AtanRatio
           125 : 11AA;  -- 	STORE  m16sA
           126 : 11AB;  -- 	STORE  m16sB
           127 : 8141;  -- 	CALL   A2_mult      ; X^2
           128 : 11AA;  -- 	STORE  m16sA
           129 : 0961;  -- 	LOAD   A2c
           12A : 11AB;  -- 	STORE  m16sB
           12B : 8141;  -- 	CALL   A2_mult
           12C : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           12D : 11E2;  -- 	STORE  d16sD
           12E : 095F;  -- 	LOAD   AtanRatio
           12F : 11E1;  -- 	STORE  d16sN        ; Ratio in numerator
           130 : 814A;  -- 	CALL   A2_div       ; divide
           131 : 09E7;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           132 : 11AA;  -- 	STORE  m16sA        ; <= result in radians
           133 : 0962;  -- 	LOAD   A2cd         ; degree conversion factor
           134 : 11AB;  -- 	STORE  m16sB
           135 : 8141;  -- 	CALL   A2_mult      ; convert to degrees
           136 : 1160;  -- 	STORE  AtanT
           137 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           138 : 4A38;  -- 	AND    One
           139 : 413E;  -- 	JZERO  A2_rdwn      ; round down
           13A : 0960;  -- 	LOAD   AtanT
           13B : 6018;  -- 	SHIFT  -8
           13C : 6801;  -- 	ADDI   1            ; round up
           13D : 8800;  -- 	RETURN
           13E : 0960;  -- 	LOAD   AtanT
           13F : 6018;  -- 	SHIFT  -8           ; round down
           140 : 8800;  -- 	RETURN
           141 : 8187;  -- 	CALL   Mult16s
           142 : 09AF;  -- 	LOAD   mres16sH
           143 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           144 : 11AF;  -- 	STORE  mres16sH
           145 : 09AE;  -- 	LOAD   mres16sL
           146 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           147 : 4A4A;  -- 	AND    LowByte
           148 : 51AF;  -- 	OR     mres16sH     ; combine high and low words of result
           149 : 8800;  -- 	RETURN
           14A : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           14B : 1160;  -- 	STORE  AtanT
           14C : 0960;  -- 	LOAD   AtanT
           14D : 6FFF;  -- 	ADDI   -1
           14E : 3951;  -- 	JPOS   A2_DN        ; not done; continue shifting
           14F : 81B0;  -- 	CALL   Div16s       ; do the standard division
           150 : 8800;  -- 	RETURN
           151 : 1160;  -- 	STORE  AtanT
           152 : 09E1;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           153 : 6001;  -- 	SHIFT  1
           154 : 59E1;  -- 	XOR    d16sN        ; if the sign changed,
           155 : 3159;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           156 : 59E1;  -- 	XOR    d16sN        ; get back shifted version
           157 : 11E1;  -- 	STORE  d16sN
           158 : 294C;  -- 	JUMP   A2_DL
           159 : 09E2;  -- 	LOAD   d16sD
           15A : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           15B : 11E2;  -- 	STORE  d16sD
           15C : 294C;  -- 	JUMP   A2_DL
           15D : 0000;  -- AtanX:      DW 0
           15E : 0000;  -- AtanY:      DW 0
           15F : 0000;  -- AtanRatio:  DW 0        ; =y/x
           160 : 0000;  -- AtanT:      DW 0        ; temporary value
           161 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           162 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           163 : 0000;  -- DTheta:    DW 0
           164 : 0000;  -- DVel:      DW 0
           165 : 90C2;  -- 	IN     THETA
           166 : 2163;  -- 	SUB    DTheta      ; actual - desired angle
           167 : 8184;  -- 	CALL   Neg         ; desired - actual angle
           168 : 68B4;  -- 	ADDI   180
           169 : 80D3;  -- 	CALL   Mod360
           16A : 6F4C;  -- 	ADDI   -180
           16B : 6002;  -- 	SHIFT  2
           16C : 1177;  -- 	STORE  CMAErr      ; hold temporarily
           16D : 0964;  -- 	LOAD   DVel
           16E : 1977;  -- 	ADD    CMAErr
           16F : 8178;  -- 	CALL   CapVel      ; ensure velocity is valid
           170 : 988B;  -- 	OUT    RVELCMD
           171 : 0977;  -- 	LOAD   CMAErr
           172 : 8184;  -- 	CALL   Neg         ; left wheel gets negative differential
           173 : 1964;  -- 	ADD    DVel
           174 : 8178;  -- 	CALL   CapVel
           175 : 9883;  -- 	OUT    LVELCMD
           176 : 8800;  -- 	RETURN
           177 : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           178 : 6E0C;  -- 	ADDI    -500
           179 : 397F;  -- 	JPOS    CapVelHigh
           17A : 69F4;  -- 	ADDI    500
           17B : 69F4;  -- 	ADDI    500
           17C : 3181;  -- 	JNEG    CapVelLow
           17D : 6E0C;  -- 	ADDI    -500
           17E : 8800;  -- 	RETURN
           17F : B9F4;  -- 	LOADI   500
           180 : 8800;  -- 	RETURN
           181 : BE0C;  -- 	LOADI   -500
           182 : 8800;  -- 	RETURN
           183 : 3986;  -- 	JPOS   Abs_r
           184 : 5A36;  -- 	XOR    NegOne       ; Flip all bits
           185 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           186 : 8800;  -- 	RETURN
           187 : B800;  -- 	LOADI  0
           188 : 11AC;  -- 	STORE  m16sc        ; clear carry
           189 : 11AF;  -- 	STORE  mres16sH     ; clear result
           18A : B810;  -- 	LOADI  16           ; load 16 to counter
           18B : 11AD;  -- 	STORE  mcnt16s      
           18C : 09AC;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           18D : 4191;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           18E : 09AF;  -- 	LOAD   mres16sH     ; if a carry, 
           18F : 19AA;  -- 	ADD    m16sA        ;  add multiplicand to result H
           190 : 11AF;  -- 	STORE  mres16sH
           191 : 09AB;  -- 	LOAD   m16sB
           192 : 4A38;  -- 	AND    One          ; check bit 0 of multiplier
           193 : 11AC;  -- 	STORE  m16sc        ; save as next carry
           194 : 4198;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           195 : 09AF;  -- 	LOAD   mres16sH     ; if bit 0 set,
           196 : 21AA;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           197 : 11AF;  -- 	STORE  mres16sH
           198 : 09AB;  -- 	LOAD   m16sB
           199 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           19A : 49A9;  -- 	AND    c7FFF        ; clear msb
           19B : 11AB;  -- 	STORE  m16sB
           19C : 09AF;  -- 	LOAD   mres16sH     ; load result H
           19D : 600F;  -- 	SHIFT  15           ; move lsb to msb
           19E : 51AB;  -- 	OR     m16sB
           19F : 11AB;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1A0 : 09AF;  -- 	LOAD   mres16sH
           1A1 : 6011;  -- 	SHIFT  -1
           1A2 : 11AF;  -- 	STORE  mres16sH     ; shift result H >>1
           1A3 : 09AD;  -- 	LOAD   mcnt16s
           1A4 : 6FFF;  -- 	ADDI   -1           ; check counter
           1A5 : 398B;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1A6 : 09AB;  -- 	LOAD   m16sB
           1A7 : 11AE;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1A8 : 8800;  -- 	RETURN              ; Done
           1A9 : 7FFF;  -- c7FFF: DW &H7FFF
           1AA : 0000;  -- m16sA: DW 0 ; multiplicand
           1AB : 0000;  -- m16sB: DW 0 ; multipler
           1AC : 0000;  -- m16sc: DW 0 ; carry
           1AD : 0000;  -- mcnt16s: DW 0 ; counter
           1AE : 0000;  -- mres16sL: DW 0 ; result low
           1AF : 0000;  -- mres16sH: DW 0 ; result high
           1B0 : B800;  -- 	LOADI  0
           1B1 : 11E8;  -- 	STORE  dres16sR     ; clear remainder result
           1B2 : 11E5;  -- 	STORE  d16sC1       ; clear carry
           1B3 : 09E1;  -- 	LOAD   d16sN
           1B4 : 59E2;  -- 	XOR    d16sD
           1B5 : 11E3;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1B6 : B811;  -- 	LOADI  17
           1B7 : 11E4;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1B8 : 09E2;  -- 	LOAD   d16sD
           1B9 : 8183;  -- 	CALL   Abs          ; take absolute value of denominator
           1BA : 11E2;  -- 	STORE  d16sD
           1BB : 09E1;  -- 	LOAD   d16sN
           1BC : 8183;  -- 	CALL   Abs          ; take absolute value of numerator
           1BD : 11E1;  -- 	STORE  d16sN
           1BE : 09E1;  -- 	LOAD   d16sN
           1BF : 601F;  -- 	SHIFT  -15          ; get msb
           1C0 : 4A38;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1C1 : 11E6;  -- 	STORE  d16sC2       ; store as carry
           1C2 : 09E1;  -- 	LOAD   d16sN
           1C3 : 6001;  -- 	SHIFT  1            ; shift <<1
           1C4 : 51E5;  -- 	OR     d16sC1       ; with carry
           1C5 : 11E1;  -- 	STORE  d16sN
           1C6 : 09E4;  -- 	LOAD   d16sT
           1C7 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1C8 : 41D8;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1C9 : 11E4;  -- 	STORE  d16sT
           1CA : 09E8;  -- 	LOAD   dres16sR
           1CB : 6001;  -- 	SHIFT  1            ; shift remainder
           1CC : 51E6;  -- 	OR     d16sC2       ; with carry from other shift
           1CD : 21E2;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1CE : 31D3;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1CF : 11E8;  -- 	STORE  dres16sR
           1D0 : B801;  -- 	LOADI  1
           1D1 : 11E5;  -- 	STORE  d16sC1       ; set carry
           1D2 : 29BE;  -- 	JUMP   Div16s_loop
           1D3 : 19E2;  -- 	ADD    d16sD        ; add denominator back in
           1D4 : 11E8;  -- 	STORE  dres16sR
           1D5 : B800;  -- 	LOADI  0
           1D6 : 11E5;  -- 	STORE  d16sC1       ; clear carry
           1D7 : 29BE;  -- 	JUMP   Div16s_loop
           1D8 : 09E1;  -- 	LOAD   d16sN
           1D9 : 11E7;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1DA : 09E3;  -- 	LOAD   d16sS        ; check the sign indicator
           1DB : 31DD;  -- 	JNEG   Div16s_neg
           1DC : 8800;  -- 	RETURN
           1DD : 09E7;  -- 	LOAD   dres16sQ     ; need to negate the result
           1DE : 8184;  -- 	CALL   Neg
           1DF : 11E7;  -- 	STORE  dres16sQ
           1E0 : 8800;  -- 	RETURN	
           1E1 : 0000;  -- d16sN: DW 0 ; numerator
           1E2 : 0000;  -- d16sD: DW 0 ; denominator
           1E3 : 0000;  -- d16sS: DW 0 ; sign value
           1E4 : 0000;  -- d16sT: DW 0 ; temp counter
           1E5 : 0000;  -- d16sC1: DW 0 ; carry value
           1E6 : 0000;  -- d16sC2: DW 0 ; carry value
           1E7 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1E8 : 0000;  -- dres16sR: DW 0 ; remainder result
           1E9 : 9802;  -- 	OUT    TIMER
           1EA : 9002;  -- 	IN     TIMER
           1EB : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1EC : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1ED : 31EA;  -- 	JNEG   Wloop
           1EE : 8800;  -- 	RETURN
           1EF : 81F7;  -- 	CALL   BlockI2C    ; wait for idle
           1F0 : 0A5C;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1F1 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1F2 : 0A37;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1F3 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1F4 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1F5 : 81F7;  -- 	CALL   BlockI2C    ; wait for it to finish
           1F6 : 8800;  -- 	RETURN
           1F7 : 0A37;  -- 	LOAD   Zero
           1F8 : 1223;  -- 	STORE  Temp        ; Used to check for timeout
           1F9 : 0A23;  -- 	LOAD   Temp
           1FA : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1FB : 1223;  -- 	STORE  Temp
           1FC : 4200;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1FD : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1FE : 39F9;  -- 	JPOS   BI2CL       ; If not 0, try again
           1FF : 8800;  -- 	RETURN             ; Else return
           200 : 0A37;  -- 	LOAD   Zero
           201 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           202 : 9804;  -- 	OUT    SSEG1
           203 : 9805;  -- 	OUT    SSEG2       ; display error message
           204 : 2A00;  -- 	JUMP   I2CError
           205 : 821D;  -- 	CALL   GetBattLvl
           206 : 4205;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           207 : 225B;  -- 	SUB    MinBatt
           208 : 320B;  -- 	JNEG   DeadBatt
           209 : 1A5B;  -- 	ADD    MinBatt     ; get original value back
           20A : 8800;  -- 	RETURN
           20B : 0A3B;  -- 	LOAD   Four
           20C : 980A;  -- 	OUT    BEEP        ; start beep sound
           20D : 821D;  -- 	CALL   GetBattLvl  ; get the battery level
           20E : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           20F : 9805;  -- 	OUT    SSEG2
           210 : 9806;  -- 	OUT    LCD
           211 : 0A37;  -- 	LOAD   Zero
           212 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           213 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           214 : 9807;  -- 	OUT    XLEDS
           215 : 81E9;  -- 	CALL   Wait1       ; 1 second
           216 : 0A37;  -- 	Load   Zero
           217 : 980A;  -- 	OUT    BEEP        ; stop beeping
           218 : 0A37;  -- 	LOAD   Zero
           219 : 9801;  -- 	OUT    LEDS        ; LEDs off
           21A : 9807;  -- 	OUT    XLEDS
           21B : 81E9;  -- 	CALL   Wait1       ; 1 second
           21C : 2A0B;  -- 	JUMP   DeadBatt    ; repeat forever
           21D : 0A5D;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           21E : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           21F : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           220 : 81F7;  -- 	CALL   BlockI2C    ; wait for it to finish
           221 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           222 : 8800;  -- 	RETURN
           223 : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           224 : 0000;  -- WaitTime:			DW 0
           225 : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           226 : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           227 : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           228 : 0004;  -- ErrMargin: 			DW 4
           229 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           22A : 0000;  -- EncoderX:			DW 0		; Stores current value of encoder in X direction
           22B : FFA6;  -- TagAng: 			DW -90		; Tells robot travel ang when tagging
           22C : 0000;  -- HomeAng:			DW 0		; Tells robot what angle to go 
           22D : 0000;  -- y_val:			DW 0
           22E : 0000;  -- THETAtemp2:		DW 0
           22F : 0000;  -- THETAtemp4:		DW 0
           230 : 0000;  -- THETA2:			DW 0
           231 : 0000;  -- THETA4:			DW 0
           232 : 0000;  -- THETA6:			DW 0
           233 : 0000;  -- TCOPY:			DW 0
           234 : 0000;  -- CosSum:			DW 0
           235 : FFFB;  -- NegFive:	DW -5
           236 : FFFF;  -- NegOne:   	DW -1
           237 : 0000;  -- Zero:     	DW 0
           238 : 0001;  -- One:      	DW 1
           239 : 0002;  -- Two:      	DW 2
           23A : 0003;  -- Three:    	DW 3
           23B : 0004;  -- Four:     	DW 4
           23C : 0005;  -- Five:     	DW 5
           23D : 0006;  -- Six:      	DW 6
           23E : 0007;  -- Seven:    	DW 7
           23F : 0008;  -- Eight:    	DW 8
           240 : 0009;  -- Nine:     	DW 9
           241 : 000A;  -- Ten:      	DW 10
           242 : 0001;  -- Mask0:    DW &B00000001
           243 : 0002;  -- Mask1:    DW &B00000010
           244 : 0004;  -- Mask2:    DW &B00000100
           245 : 0008;  -- Mask3:    DW &B00001000
           246 : 0010;  -- Mask4:    DW &B00010000
           247 : 0020;  -- Mask5:    DW &B00100000
           248 : 0040;  -- Mask6:    DW &B01000000
           249 : 0080;  -- Mask7:    DW &B10000000
           24A : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           24B : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           24C : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           24D : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           24E : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           24F : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           250 : 00B4;  -- Deg180:   DW 180       ; 180
           251 : 010E;  -- Deg270:   DW 270       ; 270
           252 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           253 : 008C;  -- FSlow:    DW 140       ; 100 is about the lowest velocity value that will move
           254 : FF74;  -- RSlow:    DW -140
           255 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           256 : FEA2;  -- RMid:     DW -350
           257 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           258 : FE0C;  -- RFast:    DW -500
           259 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           25A : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           25B : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           25C : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           25D : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           64C : 0000;  -- DW		0	; Array start	
  END;
