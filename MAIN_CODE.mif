-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 09E9;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8198;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 81AE;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 49F8;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 49F5;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 49F5;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 11CC;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 51CC;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 49F6;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 09E9;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT 	RESETPOS	
           01D : 802A;  -- 	CALL	InitializeVars
           01E : 8035;  -- 	CALL	InitializeMap
           01F : 8036;  -- 	CALL	InitialSearch
           020 : 807B;  -- 	CALL	FindAndTagClosestObject
           021 : 98C3;  -- 	OUT 	RESETPOS
           022 : 09E9;  -- 		LOAD   Zero         ; Stop everything.
           023 : 9883;  -- 		OUT    LVELCMD
           024 : 988B;  -- 		OUT    RVELCMD
           025 : 98B2;  -- 		OUT    SONAREN
           026 : 0829;  -- 		LOAD   DEAD         ; An indication that we are dead
           027 : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           028 : 2828;  -- 		JUMP   Forever      ; Do this forever.
           029 : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           02A : 9000;  -- 		IN		SWITCHES
           02B : 49F4;  -- 		AND		MASK0
           02C : 11D5;  -- 		STORE 	AlongLongWall
           02D : 402F;  -- 		JZERO	PositiveThetaLoad
           02E : 3831;  -- 		JPOS	ZeroThetaLoad
           02F : 09EA;  -- 		LOAD	ONE
           030 : 2833;  -- 		JUMP	ThetaStore
           031 : 09E9;  -- 		LOAD	ZERO
           032 : 2833;  -- 		JUMP 	ThetaStore
           033 : 11D6;  -- 		STORE	ObjectsPosTheta
           034 : 8800;  -- 		RETURN
           035 : 0000;  -- 	DW 0
           036 : 09F6;  -- 		LOAD	MASK2
           037 : 19F7;  -- 		ADD		MASK3
           038 : 8050;  -- 		CALL 	UpdateMap
           039 : 09D5;  -- 		LOAD	AlongLongWall
           03A : 403F;  -- 		JZERO	LoadShortDistance
           03B : 383C;  -- 		JPOS	LoadLongDistance
           03C : 90C0;  -- 		IN		XPOS
           03D : 220B;  -- 		SUB		MaxLong
           03E : 2842;  -- 		JUMP	DistanceCheck
           03F : 90C0;  -- 		IN		XPOS
           040 : 220C;  -- 		SUB		MaxShort
           041 : 2842;  -- 		JUMP 	DistanceCheck
           042 : 3849;  -- 		JPOS	DoneForward
           043 : 09E9;  -- 		LOAD	ZERO
           044 : 114C;  -- 		STORE	DTheta
           045 : 0A07;  -- 		LOAD	FMid
           046 : 114D;  -- 		STORE	DVel
           047 : 814E;  -- 		CALL	ControlMovement
           048 : 2838;  -- 		JUMP	KeepGoingForward
           049 : 09E9;  -- 		LOAD	ZERO
           04A : 9883;  -- 		OUT		LVELCMD
           04B : 988B;  -- 		OUT		RVELCMD
           04C : 0A02;  -- 		LOAD	Deg180
           04D : 11CE;  -- 		STORE	Angle
           04E : 8118;  -- 		CALL	Rotate
           04F : 8800;  -- 		RETURN
           050 : 09D5;  --  	LOAD 	AlongLongWall
           051 : 59D2;  --  	XOR 	XDir
           052 : 385B;  -- 	JPOS 	ELHS ; If 1, robot is set up for long axis traversal
           053 : 4054;  -- 	JZERO  	ERHS ; If 0, robot setup values for short axis traverse
           054 : 09F9;  -- 	 	LOAD	MASK5
           055 : 98B2;  -- 	 	OUT 	SONAREN
           056 : 90AD;  -- 	 	IN 		DIST5
           057 : 11DA;  -- 	 	STORE	Cell
           058 : 80FE;  -- 	 	CALL	KillSonars
           059 : 8062;  -- 		CALL	UpdateCell
           05A : 8800;  -- 	 	RETURN
           05B : 09F4;  -- 		LOAD	MASK0
           05C : 98B2;  -- 		OUT 	SONAREN
           05D : 90A8;  -- 		IN 		DIST0
           05E : 11DA;  -- 		STORE	Cell
           05F : 80FE;  -- 	 	CALL	KillSonars
           060 : 8062;  -- 	 	CALL	UpdateCell
           061 : 8800;  -- 		RETURN
           062 : 90C0;  --  	IN		XPOS
           063 : 6015;  -- 	SHIFT 	-5
           064 : 19DC;  -- 	ADD		CellArrI
           065 : 11DD;  -- 	STORE 	XposIndex
           066 : 8068;  -- 	CALL	FilterAndAggregate
           067 : 8800;  -- 	RETURN
           068 : 09D5;  -- 		LOAD	AlongLongWall
           069 : 406B;  -- 		JZERO	FilterLoadLong
           06A : 386D;  -- 		JPOS	FilterLoadShort
           06B : 0A0B;  -- 		LOAD	MaxLong
           06C : 286F;  -- 		JUMP	FilterData
           06D : 0A0C;  -- 		LOAD	MaxShort
           06E : 286F;  -- 		JUMP	FilterData
           06F : 21DA;  -- 		SUB		Cell
           070 : 4076;  -- 		JZERO	FilterReturn
           071 : 3076;  -- 		JNEG	FilterReturn
           072 : 71DD;  -- 		ILOAD	XposIndex
           073 : 19DA;  -- 		ADD		Cell
           074 : 6011;  -- 		SHIFT	-1
           075 : 79DD;  -- 		ISTORE	XposIndex
           076 : 8800;  -- 		RETURN
           077 : 09F3;  -- 	LOAD	TEN
           078 : 11D3;  -- 	STORE	ObjectXDist
           079 : 11D4;  -- 	STORE	ObjectYDist
           07A : 8800;  -- 	RETURN
           07B : 8077;  -- 		CALL	FindClosestObject
           07C : 90C0;  -- 		IN	 	XPOS
           07D : 21D3;  -- 		SUB 	ObjectXDist
           07E : 3081;  -- 		JNEG	GoRight
           07F : 409A;  -- 		JZERO 	AtObjectX
           080 : 3884;  -- 		JPOS	GoLeft
           081 : 09EA;  -- 		LOAD 	ONE
           082 : 11D2;  -- 		STORE 	XDir
           083 : 2886;  -- 		JUMP 	MoveLoop
           084 : 09E9;  -- 		LOAD 	ZERO
           085 : 11D2;  -- 		STORE 	XDir
           086 : 8050;  -- 		CALL 	UpdateMap
           087 : 09D2;  -- 		LOAD 	XDir
           088 : 408F;  -- 		JZERO 	CheckLess
           089 : 388A;  -- 		JPOS	CheckGreat
           08A : 90C0;  -- 		IN		XPOS
           08B : 21D3;  -- 		SUB		ObjectXDist
           08C : 409A;  -- 		JZERO 	AtObjectX
           08D : 389A;  -- 		JPOS	AtObjectX
           08E : 2894;  -- 		JUMP	KeepGoingInDirection
           08F : 90C0;  -- 		IN		XPOS
           090 : 21D3;  -- 		SUB		ObjectXDist
           091 : 409A;  -- 		JZERO 	AtObjectX
           092 : 309A;  -- 		JNEG	AtObjectX
           093 : 2894;  -- 		JUMP	KeepGoingInDirection
           094 : 09E9;  -- 		LOAD	ZERO
           095 : 114C;  -- 		STORE	DTheta
           096 : 0A07;  -- 		LOAD	FMid
           097 : 114D;  -- 		STORE	DVel
           098 : 814E;  -- 		CALL	ControlMovement
           099 : 2886;  -- 		JUMP	MoveLoop
           09A : 09E9;  -- 		LOAD	ZERO
           09B : 9883;  -- 		OUT		LVELCMD
           09C : 988B;  -- 		OUT		RVELCMD
           09D : 8800;  -- 		RETURN
           09E : 8022;  -- 	CALL 	Die
           09F : 8800;  -- 	RETURN
           0A0 : 813D;  -- 	CALL 	GoToWall
           0A1 : B85A;  -- 	LOADI 	90
           0A2 : 11CE;  -- 	STORE 	Angle
           0A3 : 09D6;  -- 	LOAD 	ObjectsPosTheta
           0A4 : 40A7;  -- 	JZERO 	HomeRotate
           0A5 : BFA6;  -- 	LOADI 	-90
           0A6 : 11CE;  -- 	STORE 	Angle
           0A7 : 8118;  -- 	CALL  	Rotate
           0A8 : 813D;  -- 	CALL 	GoToWall
           0A9 : 289E;  -- 	JUMP 	BackAtHome
           0AA : 11CC;  -- 	STORE 	Temp
           0AB : 90C1;  -- 	IN   	YPOS
           0AC : 11D8;  -- 	STORE 	EncoderY
           0AD : B8C2;  -- 	LOADI 	THETA
           0AE : 114C;  -- 	STORE 	DTheta
           0AF : 0A07;  -- 	LOAD 	FMid
           0B0 : 114D;  -- 	STORE 	DVel
           0B1 : 814E;  -- 	CALL 	ControlMovement
           0B2 : 90C1;  -- 	IN 		YPOS
           0B3 : 816C;  -- 	CALL 	Abs
           0B4 : 21D8;  -- 	SUB 	EncoderY
           0B5 : 21DA;  -- 	SUB 	Cell
           0B6 : 6FF6;  -- 	ADDI 	-10
           0B7 : 30B1;  -- 	JNEG 	TagIt
           0B8 : 90C1;  -- 	IN 		YPOS
           0B9 : 816C;  -- 	CALL 	Abs
           0BA : 6FE2;  -- 	ADDI 	-30
           0BB : 11D8;  -- 	STORE 	EncoderY
           0BC : 0A08;  -- 	LOAD 	RMid
           0BD : 114D;  -- 	STORE 	DVel
           0BE : 814E;  -- 	CALL ControlMovement
           0BF : 90C1;  -- 	IN 		YPOS
           0C0 : 816C;  -- 	CALL 	Abs
           0C1 : 21D8;  -- 	SUB 	EncoderY
           0C2 : 38BE;  -- 	JPOS 	MoveBack
           0C3 : B8B4;  -- 	LOADI 	180
           0C4 : 8118;  -- 	CALL 	Rotate
           0C5 : 80A0;  -- 	CALL 	GoHome
           0C6 : 082A;  -- Middle:			DW 2090
           0C7 : 8050;  -- 		CALL 	UpdateMap
           0C8 : 08C0;  -- 		LOAD 	XPOS
           0C9 : 1FD6;  -- 		ADD 	-2090
           0CA : 30CC;  -- 		JNEG 	NotAtMiddle
           0CB : 28D0;  -- 		JUMP 	AtMiddle
           0CC : 0A07;  -- 		LOAD	FMid
           0CD : 9883;  -- 		OUT		LVELCMD
           0CE : 988B;  -- 		OUT		RVELCMD
           0CF : 28C7;  -- 		JUMP  CheckIfMiddle
           0D0 : 09E9;  -- 	LOAD	ZERO
           0D1 : 9883;  -- 	OUT		LVELCMD
           0D2 : 988B;  -- 	OUT		RVELCMD
           0D3 : 09F6;  -- 	LOAD	MASK2
           0D4 : 98B2;  -- 	OUT		SONAREN
           0D5 : 09F7;  -- 	LOAD	MASK3
           0D6 : 98B2;  -- 	OUT		SONAREN
           0D7 : 8050;  -- 		CALL 	UpdateMap
           0D8 : 08AA;  -- 		LOAD	DIST2
           0D9 : 6C6D;  -- 		ADDI	-915
           0DA : 30DC;  -- 		JNEG	TwoGot
           0DB : 28E5;  -- 		JUMP	Rotate10
           0DC : 09EA;  -- 		LOAD	ONE
           0DD : 08AB;  -- 		LOAD	DIST3
           0DE : 6C6D;  -- 		ADDI	-915
           0DF : 30E1;  -- 		JNEG	ThreeGot
           0E0 : 28E5;  -- 		JUMP	Rotate10
           0E1 : 09E9;  -- 		LOAD	ZERO
           0E2 : 9883;  -- 		OUT		LVELCMD
           0E3 : 988B;  -- 		OUT		RVELCMD
           0E4 : 28E1;  -- 		JUMP	ThreeGot
           0E5 : 09E9;  -- 		LOAD 	ZERO
           0E6 : 680C;  -- 		ADDI 	12
           0E7 : 11CE;  -- 		STORE Angle
           0E8 : 2918;  -- 		JUMP	Rotate
           0E9 : 28D7;  -- 		JUMP	CheckMidObj
           0EA : 7FFF;  -- c7FFF: DW &H7FFF
           0EB : 0000;  -- m16sA: DW 0 ; multiplicand
           0EC : 0000;  -- m16sB: DW 0 ; multipler
           0ED : 0000;  -- m16sc: DW 0 ; carry
           0EE : 0000;  -- mcnt16s: DW 0 ; counter
           0EF : 0000;  -- mres16sL: DW 0 ; result low
           0F0 : 0000;  -- mres16sH: DW 0 ; result high
           0F1 : 005A;  -- Ang0:		DW 90
           0F2 : 002C;  -- Ang1:		DW 44
           0F3 : 000C;  -- Ang2:		DW 12
           0F4 : FFF4;  -- Ang3:		DW -12
           0F5 : FFD4;  -- Ang4:		DW -44
           0F6 : FFA6;  -- Ang5:		DW -90
           0F7 : FF70;  -- Ang6:		DW -144
           0F8 : 0090;  -- Ang7:		DW 144
           0F9 : 0000;  -- SensorToCheck: 	DW 0
           0FA : 0000;  -- SensorAngle:		DW 0
           0FB : 0000;  -- SensorDist: 		DW 0
           0FC : 0000;  -- SensorIndex: 		DW 0
           0FD : 0000;  -- SensorUpdate:		DW 0
           0FE : 09E9;  -- 	LOAD	ZERO
           0FF : 98B2;  -- 	OUT		SONAREN
           100 : 8800;  -- 	RETURN
           101 : 09E9;  -- 	LOAD 	ZERO
           102 : 9883;  -- 	OUT 	LVELCMD
           103 : 988B;  -- 	OUT 	RVELCMD
           104 : 8800;  -- 	RETURN
           105 : 11CC;  -- 	STORE	Temp
           106 : B802;  -- 	LOADI 	2
           107 : 980A;  -- 	OUT		BEEP
           108 : B801;  -- 	LOADI	1
           109 : 11CD;  -- 	STORE	WaitTime
           10A : 9802;  -- 	OUT		Timer
           10B : 9002;  -- 		IN 		Timer
           10C : 21CD;  -- 		SUB 	WaitTime
           10D : 310B;  -- 		JNEG	BeepLoop
           10E : B800;  -- 		LOADI	0
           10F : 980A;  -- 		OUT		BEEP
           110 : 09CC;  -- 		LOAD 	Temp
           111 : 8800;  -- 		RETURN
           112 : 3115;  -- 	JNEG	M360N
           113 : 6E98;  -- 	ADDI 	-360
           114 : 2912;  -- 	JUMP 	Mod360
           115 : 6968;  -- 		ADDI 	360
           116 : 3115;  -- 		JNEG 	M360N
           117 : 8800;  -- 		RETURN
           118 : 11CC;  -- 		STORE	Temp
           119 : 90C2;  -- 		IN 		THETA
           11A : 19CE;  -- 		ADD 	Angle
           11B : 21D1;  -- 		SUB 	ErrMargin
           11C : 8112;  -- 		CALL 	Mod360
           11D : 11CF;  -- 		STORE 	LowErr
           11E : 90C2;  -- 		IN 		THETA
           11F : 19CE;  -- 		ADD 	Angle
           120 : 19D1;  -- 		ADD 	ErrMargin
           121 : 8112;  -- 		CALL 	Mod360
           122 : 11D0;  -- 		STORE 	HighErr
           123 : 09CE;  -- 		LOAD 	Angle
           124 : 3130;  -- 		JNEG 	RotateCW ; else RotateCC
           125 : 0A05;  -- 		LOAD 	FSlow
           126 : 988B;  -- 		OUT		RVELCMD
           127 : 0A06;  -- 		LOAD 	RSlow
           128 : 9883;  -- 		OUT		LVELCMD
           129 : 90C2;  -- 		IN 		THETA
           12A : 21D0;  -- 		SUB 	HighErr
           12B : 3925;  -- 		JPOS	RotateCC
           12C : 90C2;  -- 		IN 		THETA
           12D : 21CF;  -- 		SUB  	LowErr
           12E : 3125;  -- 		JNEG	RotateCC
           12F : 293A;  -- 		JUMP 	RotateEnd
           130 : 0A06;  -- 		LOAD 	RSlow
           131 : 988B;  -- 		OUT		RVELCMD
           132 : 0A05;  -- 		LOAD 	FSlow
           133 : 9883;  -- 		OUT		LVELCMD
           134 : 90C2;  -- 		IN 		THETA
           135 : 21D0;  -- 		SUB 	HighErr
           136 : 3930;  -- 		JPOS	RotateCW
           137 : 90C2;  -- 		IN 		THETA
           138 : 21CF;  -- 		SUB  	LowErr
           139 : 3130;  -- 		JNEG	RotateCW
           13A : 8101;  -- 		CALL 	StopMovement
           13B : 09CC;  -- 		LOAD 	Temp
           13C : 8800;  -- 		RETURN
           13D : 09F6;  -- 	LOAD 	MASK2
           13E : 51F7;  -- 	OR 		MASK3
           13F : 98B2;  -- 	OUT 	SONAREN
           140 : 90C2;  -- 	IN  	THETA
           141 : 114C;  -- 	STORE 	DTheta
           142 : 0A07;  -- 	LOAD 	FMid
           143 : 114D;  -- 	STORE 	DVel
           144 : 814E;  -- 	CALL ControlMovement
           145 : 90AA;  -- 	IN 		DIST2
           146 : 19D9;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           147 : 3944;  -- 	JPOS 	CheckWall
           148 : 90AB;  -- 	IN 		DIST3
           149 : 19D9;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           14A : 3944;  -- 	JPOS 	CheckWall
           14B : 8101;  -- 	CALL 	StopMovement 	; stops movement
           14C : 0000;  -- DTheta:    DW 0
           14D : 0000;  -- DVel:      DW 0
           14E : 90C2;  -- 	IN     THETA
           14F : 214C;  -- 	SUB    DTheta      ; actual - desired angle
           150 : 816D;  -- 	CALL   Neg         ; desired - actual angle
           151 : 68B4;  -- 	ADDI   180
           152 : 8112;  -- 	CALL   Mod360
           153 : 6F4C;  -- 	ADDI   -180
           154 : 6002;  -- 	SHIFT  2
           155 : 1160;  -- 	STORE  CMAErr      ; hold temporarily
           156 : 094D;  -- 	LOAD   DVel
           157 : 1960;  -- 	ADD    CMAErr
           158 : 8161;  -- 	CALL   CapVel      ; ensure velocity is valid
           159 : 988B;  -- 	OUT    RVELCMD
           15A : 0960;  -- 	LOAD   CMAErr
           15B : 816D;  -- 	CALL   Neg         ; left wheel gets negative differential
           15C : 194D;  -- 	ADD    DVel
           15D : 8161;  -- 	CALL   CapVel
           15E : 9883;  -- 	OUT    LVELCMD
           15F : 8800;  -- 	RETURN
           160 : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           161 : 6E0C;  -- 	ADDI    -500
           162 : 3968;  -- 	JPOS    CapVelHigh
           163 : 69F4;  -- 	ADDI    500
           164 : 69F4;  -- 	ADDI    500
           165 : 316A;  -- 	JNEG    CapVelLow
           166 : 6E0C;  -- 	ADDI    -500
           167 : 8800;  -- 	RETURN
           168 : B9F4;  -- 	LOADI   500
           169 : 8800;  -- 	RETURN
           16A : BE0C;  -- 	LOADI   -500
           16B : 8800;  -- 	RETURN
           16C : 396F;  -- 	JPOS   Abs_r
           16D : 59E8;  -- 	XOR    NegOne       ; Flip all bits
           16E : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           16F : 8800;  -- 	RETURN
           170 : B800;  -- 		LOADI  0
           171 : 10ED;  -- 		STORE  m16sc        ; clear carry
           172 : 10F0;  -- 		STORE  mres16sH     ; clear result
           173 : B810;  -- 		LOADI  16           ; load 16 to counter
           174 : 10EE;  -- 		STORE  mcnt16s
           175 : 08ED;  -- 		LOAD   m16sc        ; check the carry (from previous iteration)
           176 : 417A;  -- 		JZERO  Mult16s_noc  ; if no carry, move on
           177 : 08F0;  -- 		LOAD   mres16sH     ; if a carry,
           178 : 18EB;  -- 		ADD    m16sA        ;  add multiplicand to result H
           179 : 10F0;  -- 		STORE  mres16sH
           17A : 08EC;  -- 		LOAD   m16sB
           17B : 49EA;  -- 		AND    One          ; check bit 0 of multiplier
           17C : 10ED;  -- 		STORE  m16sc        ; save as next carry
           17D : 4181;  -- 		JZERO  Mult16s_sh   ; if no carry, move on to shift
           17E : 08F0;  -- 		LOAD   mres16sH     ; if bit 0 set,
           17F : 20EB;  -- 		SUB    m16sA        ;  subtract multiplicand from result H
           180 : 10F0;  -- 		STORE  mres16sH
           181 : 08EC;  -- 		LOAD   m16sB
           182 : 6011;  -- 		SHIFT  -1           ; shift result L >>1
           183 : 48EA;  -- 		AND    c7FFF        ; clear msb
           184 : 10EC;  -- 		STORE  m16sB
           185 : 08F0;  -- 		LOAD   mres16sH     ; load result H
           186 : 600F;  -- 		SHIFT  15           ; move lsb to msb
           187 : 50EC;  -- 		OR     m16sB
           188 : 10EC;  -- 		STORE  m16sB        ; result L now includes carry out from H
           189 : 08F0;  -- 		LOAD   mres16sH
           18A : 6011;  -- 		SHIFT  -1
           18B : 10F0;  -- 		STORE  mres16sH     ; shift result H >>1
           18C : 08EE;  -- 		LOAD   mcnt16s
           18D : 6FFF;  -- 		ADDI   -1           ; check counter
           18E : 3974;  -- 		JPOS   Mult16s_loop ; need to iterate 16 times
           18F : 08EC;  -- 		LOAD   m16sB
           190 : 10EF;  -- 		STORE  mres16sL     ; multiplier and result L shared a word
           191 : 8800;  -- 		RETURN              ; Done
           192 : 9802;  -- 	OUT    TIMER
           193 : 9002;  -- 	IN     TIMER
           194 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           195 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           196 : 3193;  -- 	JNEG   Wloop
           197 : 8800;  -- 	RETURN
           198 : 81A0;  -- 	CALL   BlockI2C    ; wait for idle
           199 : 0A0E;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           19A : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           19B : 09E9;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           19C : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           19D : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           19E : 81A0;  -- 	CALL   BlockI2C    ; wait for it to finish
           19F : 8800;  -- 	RETURN
           1A0 : 09E9;  -- 	LOAD   Zero
           1A1 : 11CC;  -- 	STORE  Temp        ; Used to check for timeout
           1A2 : 09CC;  -- 	LOAD   Temp
           1A3 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1A4 : 11CC;  -- 	STORE  Temp
           1A5 : 41A9;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1A6 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1A7 : 39A2;  -- 	JPOS   BI2CL       ; If not 0, try again
           1A8 : 8800;  -- 	RETURN             ; Else return
           1A9 : 09E9;  -- 	LOAD   Zero
           1AA : 692C;  -- 	ADDI   &H12C       ; "I2C"
           1AB : 9804;  -- 	OUT    SSEG1
           1AC : 9805;  -- 	OUT    SSEG2       ; display error message
           1AD : 29A9;  -- 	JUMP   I2CError
           1AE : 81C6;  -- 	CALL   GetBattLvl
           1AF : 41AE;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1B0 : 220D;  -- 	SUB    MinBatt
           1B1 : 31B4;  -- 	JNEG   DeadBatt
           1B2 : 1A0D;  -- 	ADD    MinBatt     ; get original value back
           1B3 : 8800;  -- 	RETURN
           1B4 : 09ED;  -- 	LOAD   Four
           1B5 : 980A;  -- 	OUT    BEEP        ; start beep sound
           1B6 : 81C6;  -- 	CALL   GetBattLvl  ; get the battery level
           1B7 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1B8 : 9805;  -- 	OUT    SSEG2
           1B9 : 9806;  -- 	OUT    LCD
           1BA : 09E9;  -- 	LOAD   Zero
           1BB : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1BC : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1BD : 9807;  -- 	OUT    XLEDS
           1BE : 8192;  -- 	CALL   Wait1       ; 1 second
           1BF : 09E9;  -- 	Load   Zero
           1C0 : 980A;  -- 	OUT    BEEP        ; stop beeping
           1C1 : 09E9;  -- 	LOAD   Zero
           1C2 : 9801;  -- 	OUT    LEDS        ; LEDs off
           1C3 : 9807;  -- 	OUT    XLEDS
           1C4 : 8192;  -- 	CALL   Wait1       ; 1 second
           1C5 : 29B4;  -- 	JUMP   DeadBatt    ; repeat forever
           1C6 : 0A0F;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1C7 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1C8 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1C9 : 81A0;  -- 	CALL   BlockI2C    ; wait for it to finish
           1CA : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1CB : 8800;  -- 	RETURN
           1CC : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           1CD : 0000;  -- WaitTime:			DW 0
           1CE : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           1CF : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           1D0 : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           1D1 : 0004;  -- ErrMargin: 			DW 4
           1D2 : 0000;  -- XDir:				DW 0		; Current direction on the X access robot is moving. 1 = right, 0 = left
           1D3 : 0000;  -- ObjectXDist:		DW 0 		; The x position of the next closest object
           1D4 : 0000;  -- ObjectYDist:		DW 0		; The absolute value of the y position of the next closest object
           1D5 : 0000;  -- AlongLongWall:		DW 0		; Boolean that signifies if robot is aligned along the longest wall
           1D6 : 0000;  -- ObjectsPosTheta:	DW 0		; Boolean that signifies if the robot has to turn in a positive angle to tag objects
           1D7 : 0000;  -- TagVelocity:		DW 0		; Number that signifies the speed and direction the robot has to go in to get to the next closest object along the wall
           1D8 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           1D9 : FF38;  -- WallThresh: 		DW -200 	; Defines distance away from wall before DE2Bot should stop moving (used in GoHome function)
           1DA : 0000;  -- Cell: 				DW 0		; Initialize cell value
           1DB : 0000;  -- CellCount:  		DW 0 		; How many values in the occupancy array
           1DC : 044C;  -- CellArrI:   		DW &H44C	; Memory location (starting index) of the cell array
           1DD : 0000;  -- XposIndex:			DW 0		; Initialize a temporary index for cell array indexing
           1DE : 0000;  -- FilterVal:			DW 0		; Updated in the code to set up the max filter
           1DF : 0000;  -- y_val:			DW 0 
           1E0 : 0000;  -- THETAtemp2:		DW 0 
           1E1 : 0000;  -- THETAtemp4:		DW 0
           1E2 : 0000;  -- THETA2:			DW 0 
           1E3 : 0000;  -- THETA4:			DW 0
           1E4 : 0000;  -- THETA6:			DW 0 
           1E5 : 0000;  -- TCOPY:			DW 0
           1E6 : 0000;  -- CosSum:			DW 0
           1E7 : FFFB;  -- NegFive:	DW -5
           1E8 : FFFF;  -- NegOne:   	DW -1
           1E9 : 0000;  -- Zero:     	DW 0
           1EA : 0001;  -- One:      	DW 1
           1EB : 0002;  -- Two:      	DW 2
           1EC : 0003;  -- Three:    	DW 3
           1ED : 0004;  -- Four:     	DW 4
           1EE : 0005;  -- Five:     	DW 5
           1EF : 0006;  -- Six:      	DW 6
           1F0 : 0007;  -- Seven:    	DW 7
           1F1 : 0008;  -- Eight:    	DW 8
           1F2 : 0009;  -- Nine:     	DW 9
           1F3 : 000A;  -- Ten:      	DW 10
           1F4 : 0001;  -- Mask0:    DW &B00000001
           1F5 : 0002;  -- Mask1:    DW &B00000010
           1F6 : 0004;  -- Mask2:    DW &B00000100
           1F7 : 0008;  -- Mask3:    DW &B00001000
           1F8 : 0010;  -- Mask4:    DW &B00010000
           1F9 : 0020;  -- Mask5:    DW &B00100000
           1FA : 0040;  -- Mask6:    DW &B01000000
           1FB : 0080;  -- Mask7:    DW &B10000000
           1FC : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1FD : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1FE : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1FF : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           200 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           201 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           202 : 00B4;  -- Deg180:   DW 180       ; 180
           203 : 010E;  -- Deg270:   DW 270       ; 270
           204 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           205 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           206 : FF9C;  -- RSlow:    DW -100
           207 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           208 : FEA2;  -- RMid:     DW -350
           209 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           20A : FE0C;  -- RFast:    DW -500
           20B : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           20C : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           20D : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           20E : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           20F : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
