-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0A71;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8220;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8236;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4A80;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4A7D;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4A7D;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 1254;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 5254;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4A7E;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0A71;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT 	RESETPOS
           01D : 802A;  -- 	CALL	InitializeVars
           01E : 8039;  -- 	CALL	InitializeMap
           01F : 8095;  -- 	CALL	InitialSearch
           020 : 8101;  -- 	CALL	FindAndTagClosestObject
           021 : 98C3;  -- 	OUT 	RESETPOS
           022 : 0A71;  -- 		LOAD   Zero         ; Stop everything.
           023 : 9883;  -- 		OUT    LVELCMD
           024 : 988B;  -- 		OUT    RVELCMD
           025 : 98B2;  -- 		OUT    SONAREN
           026 : 0829;  -- 		LOAD   DEAD         ; An indication that we are dead
           027 : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           028 : 2828;  -- 		JUMP   Forever      ; Do this forever.
           029 : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           02A : 9000;  -- 		IN		SWITCHES
           02B : 4A7C;  -- 		AND		MASK0
           02C : 125D;  -- 		STORE 	AlongLongWall
           02D : 402F;  -- 		JZERO	PositiveThetaLoad
           02E : 3831;  -- 		JPOS	ZeroThetaLoad
           02F : 0A72;  -- 		LOAD	ONE
           030 : 2833;  -- 		JUMP	ThetaStore
           031 : 0A71;  -- 		LOAD	ZERO
           032 : 2833;  -- 		JUMP 	ThetaStore
           033 : 125E;  -- 		STORE	ObjectsPosTheta
           034 : 8800;  -- 		RETURN
           035 : 0000;  -- InitMaxDist:			DW 0
           036 : 0000;  -- InitArraySize:		DW 0
           037 : 0000;  -- InitFillCounter:	DW 0
           038 : 0000;  -- InitFillIndex:		DW 0
           039 : 0A71;  -- 	LOAD		ZERO
           03A : 1037;  -- 	STORE		InitFillCounter
           03B : 0A5D;  -- 	LOAD		AlongLongWall
           03C : 383E;  -- 	JPOS		InitLong
           03D : 2845;  -- 	JUMP		InitShort
           03E : 0A93;  -- 	LOAD		MaxLong
           03F : 6015;  -- 	SHIFT		-5
           040 : 6801;  -- 	ADDI		1
           041 : 1036;  -- 	STORE 		InitArraySize
           042 : 0A94;  -- 	LOAD		MaxShort
           043 : 1035;  -- 	STORE		InitMaxDist
           044 : 284B;  -- 	JUMP		DistFillLoop
           045 : 0A94;  -- 	LOAD		MaxShort
           046 : 6015;  -- 	SHIFT		-5
           047 : 6801;  -- 	ADDI 		1
           048 : 1036;  -- 	STORE 		InitArraySize
           049 : 0A93;  -- 	LOAD		MaxLong
           04A : 1035;  -- 	STORE		InitMaxDist
           04B : 0837;  -- 	LOAD		InitFillCounter
           04C : 2036;  -- 	SUB			InitArraySize
           04D : 4058;  -- 	JZERO		ArrayFilled
           04E : 3858;  -- 	JPOS		ArrayFilled
           04F : 0A64;  -- 	LOAD		CellArrI
           050 : 1837;  -- 	ADD			InitFillCounter
           051 : 1038;  -- 	STORE 		InitFillIndex
           052 : 0835;  -- 	LOAD		InitMaxDist
           053 : 7838;  -- 	ISTORE		InitFillIndex
           054 : 0837;  -- 	LOAD		InitFillCounter
           055 : 6801;  -- 	ADDI		1
           056 : 1037;  -- 	STORE		InitFillCounter
           057 : 284B;  -- 	JUMP		DistFillLoop
           058 : 8800;  -- 	RETURN
           059 : 0000;  -- TagPos:				DW 0
           05A : 0000;  -- TagIndex:			DW 0
           05B : 0000;  -- LeftTagIndex:	DW 0
           05C : 0000;  -- RightTagIndex: DW 0
           05D : 0000;  -- UpdateDist:		DW 0
           05E : 0000;  -- TagArraySize:	DW 0
           05F : 0A5D;  -- 	LOAD		AlongLongWall
           060 : 3862;  -- 	JPOS		UpdLong
           061 : 2869;  -- 	JUMP		UpdShort
           062 : 0A93;  -- 	LOAD		MaxLong
           063 : 6015;  -- 	SHIFT		-5
           064 : 6801;  -- 	ADDI		1
           065 : 105E;  -- 	STORE 	TagArraySize
           066 : 0A94;  -- 	LOAD		MaxShort
           067 : 105D;  -- 	STORE		UpdateDist
           068 : 286F;  -- 	JUMP		FillTagP
           069 : 0A94;  -- 	LOAD		MaxShort
           06A : 6015;  -- 	SHIFT		-5
           06B : 6801;  -- 	ADDI		1
           06C : 105E;  -- 	STORE 	TagArraySize
           06D : 0A93;  -- 	LOAD		MaxLong
           06E : 105D;  -- 	STORE		UpdateDist
           06F : 0859;  -- 	LOAD 		TagPos
           070 : 6015;  -- 	SHIFT		-5
           071 : 1A64;  -- 	ADD			CellArrI
           072 : 105A;  -- 	STORE		TagIndex
           073 : 085D;  -- 	LOAD		UpdateDist
           074 : 105A;  -- 	STORE		TagIndex
           075 : 085A;  -- 	LOAD		TagIndex
           076 : 6801;  -- 	ADDI		1
           077 : 105C;  -- 	STORE		RightTagIndex
           078 : 085A;  -- 	LOAD		TagIndex
           079 : 6FFF;  -- 	ADDI		-1
           07A : 105B;  -- 	STORE		LeftTagIndex
           07B : 085B;  -- 	LOAD		LeftTagIndex
           07C : 2264;  -- 	SUB			CellArrI
           07D : 3087;  -- 	JNEG		KeepRight
           07E : 705B;  -- 	ILOAD		LeftTagIndex
           07F : 205D;  -- 	SUB			UpdateDist
           080 : 4087;  -- 	JZERO		KeepRight
           081 : 085D;  -- 	LOAD		UpdateDist
           082 : 785B;  -- 	ISTORE	LeftTagIndex
           083 : 085B;  -- 	LOAD		LeftTagIndex
           084 : 6FFF;  -- 	ADDI		-1
           085 : 105B;  -- 	STORE		LeftTagIndex
           086 : 287B;  -- 	JUMP		KeepLeft
           087 : 0A64;  -- 	LOAD		CellArrI
           088 : 185E;  -- 	ADD			TagArraySize
           089 : 205C;  -- 	SUB			RightTagIndex
           08A : 3094;  -- 	JNEG		TagUpdated
           08B : 705C;  -- 	ILOAD		RightTagIndex
           08C : 205D;  -- 	SUB			UpdateDist
           08D : 4094;  -- 	JZERO		TagUpdated
           08E : 085D;  -- 	LOAD		UpdateDist
           08F : 785C;  -- 	ISTORE	RightTagIndex
           090 : 085C;  -- 	LOAD		RightTagIndex
           091 : 6801;  -- 	ADDI		1
           092 : 105C;  -- 	STORE		RightTagIndex
           093 : 2887;  -- 	JUMP		KeepRight
           094 : 8800;  -- 	RETURN
           095 : 0A7E;  -- 		LOAD	MASK2
           096 : 1A7F;  -- 		ADD		MASK3
           097 : 0A72;  -- 		LOAD	ONE
           098 : 125A;  -- 		STORE	XDir
           099 : 80AF;  -- 		CALL 	UpdateMap
           09A : 0A5D;  -- 		LOAD	AlongLongWall
           09B : 40A0;  -- 		JZERO	LoadShortDistance
           09C : 389D;  -- 		JPOS	LoadLongDistance
           09D : 90C0;  -- 		IN		XPOS
           09E : 2293;  -- 		SUB		MaxLong
           09F : 28A3;  -- 		JUMP	DistanceCheck
           0A0 : 90C0;  -- 		IN		XPOS
           0A1 : 2294;  -- 		SUB		MaxShort
           0A2 : 28A3;  -- 		JUMP 	DistanceCheck
           0A3 : 38AA;  -- 		JPOS	DoneForward
           0A4 : 0A71;  -- 		LOAD	ZERO
           0A5 : 11D4;  -- 		STORE	DTheta
           0A6 : 0A8F;  -- 		LOAD	FMid
           0A7 : 11D5;  -- 		STORE	DVel
           0A8 : 81D6;  -- 		CALL	ControlMovement
           0A9 : 2899;  -- 		JUMP	KeepGoingForward
           0AA : 8189;  -- 		CALL	StopMovement
           0AB : 0A8A;  -- 		LOAD	Deg180
           0AC : 1256;  -- 		STORE	Angle
           0AD : 81A0;  -- 		CALL	Rotate
           0AE : 8800;  -- 		RETURN
           0AF : 0A5D;  --  	LOAD 	AlongLongWall
           0B0 : 5A5A;  --  	XOR 	XDir
           0B1 : 38BA;  -- 	JPOS 	ELHS ; If 1
           0B2 : 40B3;  -- 	JZERO  	ERHS ; If 0
           0B3 : 0A81;  -- 	 	LOAD	MASK5
           0B4 : 98B2;  -- 	 	OUT 	SONAREN
           0B5 : 90AD;  -- 	 	IN 		DIST5
           0B6 : 1262;  -- 	 	STORE	Cell
           0B7 : 8186;  -- 	 	CALL	KillSonars
           0B8 : 80C1;  -- 		CALL	UpdateCell
           0B9 : 8800;  -- 	 	RETURN
           0BA : 0A7C;  -- 		LOAD	MASK0
           0BB : 98B2;  -- 		OUT 	SONAREN
           0BC : 90A8;  -- 		IN 		DIST0
           0BD : 1262;  -- 		STORE	Cell
           0BE : 8186;  -- 	 	CALL	KillSonars
           0BF : 80C1;  -- 	 	CALL	UpdateCell
           0C0 : 8800;  -- 		RETURN
           0C1 : 90C0;  --  	IN		XPOS
           0C2 : 6015;  -- 	SHIFT 	-5
           0C3 : 1A64;  -- 	ADD		CellArrI
           0C4 : 1265;  -- 	STORE 	XposIndex
           0C5 : 80C7;  -- 	CALL	FilterAndAggregate
           0C6 : 8800;  -- 	RETURN
           0C7 : 0A5D;  -- 		LOAD	AlongLongWall
           0C8 : 40CA;  -- 		JZERO	FilterLoadLong
           0C9 : 38CC;  -- 		JPOS	FilterLoadShort
           0CA : 0A93;  -- 		LOAD	MaxLong
           0CB : 28CE;  -- 		JUMP	FilterData
           0CC : 0A94;  -- 		LOAD	MaxShort
           0CD : 28CE;  -- 		JUMP	FilterData
           0CE : 2262;  -- 		SUB		Cell
           0CF : 40DC;  -- 		JZERO	FilterReturn
           0D0 : 30DC;  -- 		JNEG	FilterReturn
           0D1 : 7265;  -- 		ILOAD	XposIndex
           0D2 : 2262;  -- 		SUB		Cell
           0D3 : 38D6;  -- 		JPOS	StoreFilteredData
           0D4 : 40DC;  -- 		JZERO	FilterReturn
           0D5 : 38DC;  -- 		JPOS	FilterReturn
           0D6 : 0A62;  -- 		LOAD	Cell
           0D7 : 6013;  -- 		SHIFT	-3
           0D8 : 1262;  -- 		STORE	Cell
           0D9 : 7265;  -- 		ILOAD	XposIndex
           0DA : 2262;  -- 		SUB		Cell
           0DB : 7A65;  -- 		ISTORE	XposIndex
           0DC : 90C0;  -- 		IN		XPOS
           0DD : 9804;  -- 		OUT		SSEG1
           0DE : 7265;  -- 		ILOAD	XposIndex
           0DF : 9805;  -- 		OUT		SSEG2
           0E0 : 8800;  -- 		RETURN
           0E1 : 0A71;  -- 		LOAD		ZERO
           0E2 : 1037;  -- 		STORE		InitFillCounter
           0E3 : 0A93;  -- 		LOAD		MaxLong
           0E4 : 125C;  -- 		STORE		ObjectYDist
           0E5 : 0837;  -- 		LOAD		InitFillCounter
           0E6 : 2036;  -- 		SUB			InitArraySize
           0E7 : 40FB;  -- 		JZERO		ClosestDone
           0E8 : 38FB;  -- 		JPOS		ClosestDone
           0E9 : 0A64;  -- 		LOAD		CellArrI
           0EA : 1837;  -- 		ADD			InitFillCounter
           0EB : 1038;  -- 		STORE 		InitFillIndex
           0EC : 0837;  -- 		LOAD		InitFillCounter
           0ED : 6801;  -- 		ADDI		1
           0EE : 1037;  -- 		STORE		InitFillCounter
           0EF : 7038;  -- 		ILOAD		InitFillIndex
           0F0 : 225C;  -- 		SUB			ObjectYDist
           0F1 : 30F4;  -- 		JNEG		NewClosestFound
           0F2 : 38E5;  -- 		JPOS		ClosestDistLoop
           0F3 : 40E5;  -- 		JZERO		ClosestDistLoop
           0F4 : 7038;  -- 		ILOAD		InitFillIndex
           0F5 : 125C;  -- 		STORE		ObjectYDist
           0F6 : 0837;  -- 		LOAD		InitFillCounter
           0F7 : 6005;  -- 		SHIFT		5
           0F8 : 6FF1;  -- 		ADDI		-15
           0F9 : 125B;  -- 		STORE		ObjectXDist
           0FA : 28E5;  -- 		JUMP		ClosestDistLoop
           0FB : 0A5B;  -- 		LOAD		ObjectXDist
           0FC : 9804;  -- 		OUT			SSEG1
           0FD : 0A5C;  -- 		LOAD		ObjectYDist
           0FE : 9805;  -- 		OUT			SSEG2
           0FF : 8010;  -- 		CALL		WaitForUser
           100 : 8800;  -- 		RETURN
           101 : 80E1;  -- 		CALL	FindClosestObject
           102 : 90C0;  -- 		IN	 	XPOS
           103 : 225B;  -- 		SUB 	ObjectXDist
           104 : 3107;  -- 		JNEG	GoRight
           105 : 4120;  -- 		JZERO 	AtObjectX
           106 : 390A;  -- 		JPOS	GoLeft
           107 : 0A72;  -- 		LOAD 	ONE
           108 : 125A;  -- 		STORE 	XDir
           109 : 290C;  -- 		JUMP 	MoveLoop
           10A : 0A71;  -- 		LOAD 	ZERO
           10B : 125A;  -- 		STORE 	XDir
           10C : 80AF;  -- 		CALL 	UpdateMap
           10D : 0A5A;  -- 		LOAD 	XDir
           10E : 4115;  -- 		JZERO 	CheckLess
           10F : 3910;  -- 		JPOS	CheckGreat
           110 : 90C0;  -- 		IN		XPOS
           111 : 225B;  -- 		SUB		ObjectXDist
           112 : 4120;  -- 		JZERO 	AtObjectX
           113 : 3920;  -- 		JPOS	AtObjectX
           114 : 291A;  -- 		JUMP	KeepGoingInDirection
           115 : 90C0;  -- 		IN		XPOS
           116 : 225B;  -- 		SUB		ObjectXDist
           117 : 4120;  -- 		JZERO 	AtObjectX
           118 : 3120;  -- 		JNEG	AtObjectX
           119 : 291A;  -- 		JUMP	KeepGoingInDirection
           11A : B8B4;  -- 		LOADI	180
           11B : 11D4;  -- 		STORE	DTheta
           11C : 0A8F;  -- 		LOAD	FMid
           11D : 11D5;  -- 		STORE	DVel
           11E : 81D6;  -- 		CALL	ControlMovement
           11F : 290C;  -- 		JUMP	MoveLoop
           120 : 8189;  -- 		CALL	StopMovement
           121 : BFA6;  -- 		LOADI 	-90
           122 : 1256;  -- 		STORE 	Angle
           123 : 81A0;  -- 		CALL	ROTATE
           124 : 8189;  -- 		CALL	StopMovement
           125 : 8800;  -- 		RETURN
           126 : 8022;  -- 	CALL 	Die
           127 : 8800;  -- 	RETURN
           128 : 81C5;  -- 	CALL 	GoToWall
           129 : B85A;  -- 	LOADI 	90
           12A : 1256;  -- 	STORE 	Angle
           12B : 0A5E;  -- 	LOAD 	ObjectsPosTheta
           12C : 412F;  -- 	JZERO 	HomeRotate
           12D : BFA6;  -- 	LOADI 	-90
           12E : 1256;  -- 	STORE 	Angle
           12F : 81A0;  -- 	CALL  	Rotate
           130 : 81C5;  -- 	CALL 	GoToWall
           131 : 2926;  -- 	JUMP 	BackAtHome
           132 : 1254;  -- 	STORE 	Temp
           133 : 90C1;  -- 	IN   	YPOS
           134 : 1260;  -- 	STORE 	EncoderY
           135 : B8C2;  -- 	LOADI 	THETA
           136 : 11D4;  -- 	STORE 	DTheta
           137 : 0A8F;  -- 	LOAD 	FMid
           138 : 11D5;  -- 	STORE 	DVel
           139 : 81D6;  -- 	CALL 	ControlMovement
           13A : 90C1;  -- 	IN 		YPOS
           13B : 81F4;  -- 	CALL 	Abs
           13C : 2260;  -- 	SUB 	EncoderY
           13D : 2262;  -- 	SUB 	Cell
           13E : 6FF6;  -- 	ADDI 	-10
           13F : 3139;  -- 	JNEG 	TagIt
           140 : 90C1;  -- 	IN 		YPOS
           141 : 81F4;  -- 	CALL 	Abs
           142 : 6FE2;  -- 	ADDI 	-30
           143 : 1260;  -- 	STORE 	EncoderY
           144 : 0A90;  -- 	LOAD 	RMid
           145 : 11D5;  -- 	STORE 	DVel
           146 : 81D6;  -- 	CALL ControlMovement
           147 : 90C1;  -- 	IN 		YPOS
           148 : 81F4;  -- 	CALL 	Abs
           149 : 2260;  -- 	SUB 	EncoderY
           14A : 3946;  -- 	JPOS 	MoveBack
           14B : B8B4;  -- 	LOADI 	180
           14C : 81A0;  -- 	CALL 	Rotate
           14D : 8128;  -- 	CALL 	GoHome
           14E : 082A;  -- Middle:			DW 2090
           14F : 80AF;  -- 		CALL 	UpdateMap
           150 : 08C0;  -- 		LOAD 	XPOS
           151 : 1FD6;  -- 		ADD 	-2090
           152 : 3154;  -- 		JNEG 	NotAtMiddle
           153 : 2958;  -- 		JUMP 	AtMiddle
           154 : 0A8F;  -- 		LOAD	FMid
           155 : 9883;  -- 		OUT		LVELCMD
           156 : 988B;  -- 		OUT		RVELCMD
           157 : 294F;  -- 		JUMP  CheckIfMiddle
           158 : 0A71;  -- 	LOAD	ZERO
           159 : 9883;  -- 	OUT		LVELCMD
           15A : 988B;  -- 	OUT		RVELCMD
           15B : 0A7E;  -- 	LOAD	MASK2
           15C : 98B2;  -- 	OUT		SONAREN
           15D : 0A7F;  -- 	LOAD	MASK3
           15E : 98B2;  -- 	OUT		SONAREN
           15F : 80AF;  -- 		CALL 	UpdateMap
           160 : 08AA;  -- 		LOAD	DIST2
           161 : 6C6D;  -- 		ADDI	-915
           162 : 3164;  -- 		JNEG	TwoGot
           163 : 296D;  -- 		JUMP	Rotate10
           164 : 0A72;  -- 		LOAD	ONE
           165 : 08AB;  -- 		LOAD	DIST3
           166 : 6C6D;  -- 		ADDI	-915
           167 : 3169;  -- 		JNEG	ThreeGot
           168 : 296D;  -- 		JUMP	Rotate10
           169 : 0A71;  -- 		LOAD	ZERO
           16A : 9883;  -- 		OUT		LVELCMD
           16B : 988B;  -- 		OUT		RVELCMD
           16C : 2969;  -- 		JUMP	ThreeGot
           16D : 0A71;  -- 		LOAD 	ZERO
           16E : 680C;  -- 		ADDI 	12
           16F : 1256;  -- 		STORE Angle
           170 : 29A0;  -- 		JUMP	Rotate
           171 : 295F;  -- 		JUMP	CheckMidObj
           172 : 7FFF;  -- c7FFF: DW &H7FFF
           173 : 0000;  -- m16sA: DW 0 ; multiplicand
           174 : 0000;  -- m16sB: DW 0 ; multipler
           175 : 0000;  -- m16sc: DW 0 ; carry
           176 : 0000;  -- mcnt16s: DW 0 ; counter
           177 : 0000;  -- mres16sL: DW 0 ; result low
           178 : 0000;  -- mres16sH: DW 0 ; result high
           179 : 005A;  -- Ang0:		DW 90
           17A : 002C;  -- Ang1:		DW 44
           17B : 000C;  -- Ang2:		DW 12
           17C : FFF4;  -- Ang3:		DW -12
           17D : FFD4;  -- Ang4:		DW -44
           17E : FFA6;  -- Ang5:		DW -90
           17F : FF70;  -- Ang6:		DW -144
           180 : 0090;  -- Ang7:		DW 144
           181 : 0000;  -- SensorToCheck: 	DW 0
           182 : 0000;  -- SensorAngle:		DW 0
           183 : 0000;  -- SensorDist: 		DW 0
           184 : 0000;  -- SensorIndex: 		DW 0
           185 : 0000;  -- SensorUpdate:		DW 0
           186 : 0A71;  -- 	LOAD	ZERO
           187 : 98B2;  -- 	OUT		SONAREN
           188 : 8800;  -- 	RETURN
           189 : 0A71;  -- 	LOAD 	ZERO
           18A : 9883;  -- 	OUT 	LVELCMD
           18B : 988B;  -- 	OUT 	RVELCMD
           18C : 8800;  -- 	RETURN
           18D : 1254;  -- 	STORE	Temp
           18E : B802;  -- 	LOADI 	2
           18F : 980A;  -- 	OUT		BEEP
           190 : B801;  -- 	LOADI	1
           191 : 1255;  -- 	STORE	WaitTime
           192 : 9802;  -- 	OUT		Timer
           193 : 9002;  -- 		IN 		Timer
           194 : 2255;  -- 		SUB 	WaitTime
           195 : 3193;  -- 		JNEG	BeepLoop
           196 : B800;  -- 		LOADI	0
           197 : 980A;  -- 		OUT		BEEP
           198 : 0A54;  -- 		LOAD 	Temp
           199 : 8800;  -- 		RETURN
           19A : 319D;  -- 	JNEG	M360N
           19B : 6E98;  -- 	ADDI 	-360
           19C : 299A;  -- 	JUMP 	Mod360
           19D : 6968;  -- 		ADDI 	360
           19E : 319D;  -- 		JNEG 	M360N
           19F : 8800;  -- 		RETURN
           1A0 : 1254;  -- 		STORE	Temp
           1A1 : 90C2;  -- 		IN 		THETA
           1A2 : 1A56;  -- 		ADD 	Angle
           1A3 : 2259;  -- 		SUB 	ErrMargin
           1A4 : 819A;  -- 		CALL 	Mod360
           1A5 : 1257;  -- 		STORE 	LowErr
           1A6 : 90C2;  -- 		IN 		THETA
           1A7 : 1A56;  -- 		ADD 	Angle
           1A8 : 1A59;  -- 		ADD 	ErrMargin
           1A9 : 819A;  -- 		CALL 	Mod360
           1AA : 1258;  -- 		STORE 	HighErr
           1AB : 0A56;  -- 		LOAD 	Angle
           1AC : 31B8;  -- 		JNEG 	RotateCW ; else RotateCC
           1AD : 0A8D;  -- 		LOAD 	FSlow
           1AE : 988B;  -- 		OUT		RVELCMD
           1AF : 0A8E;  -- 		LOAD 	RSlow
           1B0 : 9883;  -- 		OUT		LVELCMD
           1B1 : 90C2;  -- 		IN 		THETA
           1B2 : 2258;  -- 		SUB 	HighErr
           1B3 : 39AD;  -- 		JPOS	RotateCC
           1B4 : 90C2;  -- 		IN 		THETA
           1B5 : 2257;  -- 		SUB  	LowErr
           1B6 : 31AD;  -- 		JNEG	RotateCC
           1B7 : 29C2;  -- 		JUMP 	RotateEnd
           1B8 : 0A8E;  -- 		LOAD 	RSlow
           1B9 : 988B;  -- 		OUT		RVELCMD
           1BA : 0A8D;  -- 		LOAD 	FSlow
           1BB : 9883;  -- 		OUT		LVELCMD
           1BC : 90C2;  -- 		IN 		THETA
           1BD : 2258;  -- 		SUB 	HighErr
           1BE : 39B8;  -- 		JPOS	RotateCW
           1BF : 90C2;  -- 		IN 		THETA
           1C0 : 2257;  -- 		SUB  	LowErr
           1C1 : 31B8;  -- 		JNEG	RotateCW
           1C2 : 8189;  -- 		CALL 	StopMovement
           1C3 : 0A54;  -- 		LOAD 	Temp
           1C4 : 8800;  -- 		RETURN
           1C5 : 0A7E;  -- 	LOAD 	MASK2
           1C6 : 527F;  -- 	OR 		MASK3
           1C7 : 98B2;  -- 	OUT 	SONAREN
           1C8 : 90C2;  -- 	IN  	THETA
           1C9 : 11D4;  -- 	STORE 	DTheta
           1CA : 0A8F;  -- 	LOAD 	FMid
           1CB : 11D5;  -- 	STORE 	DVel
           1CC : 81D6;  -- 	CALL ControlMovement
           1CD : 90AA;  -- 	IN 		DIST2
           1CE : 1A61;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           1CF : 39CC;  -- 	JPOS 	CheckWall
           1D0 : 90AB;  -- 	IN 		DIST3
           1D1 : 1A61;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           1D2 : 39CC;  -- 	JPOS 	CheckWall
           1D3 : 8189;  -- 	CALL 	StopMovement 	; stops movement
           1D4 : 0000;  -- DTheta:    DW 0
           1D5 : 0000;  -- DVel:      DW 0
           1D6 : 90C2;  -- 	IN     THETA
           1D7 : 21D4;  -- 	SUB    DTheta      ; actual - desired angle
           1D8 : 81F5;  -- 	CALL   Neg         ; desired - actual angle
           1D9 : 68B4;  -- 	ADDI   180
           1DA : 819A;  -- 	CALL   Mod360
           1DB : 6F4C;  -- 	ADDI   -180
           1DC : 6002;  -- 	SHIFT  2
           1DD : 11E8;  -- 	STORE  CMAErr      ; hold temporarily
           1DE : 09D5;  -- 	LOAD   DVel
           1DF : 19E8;  -- 	ADD    CMAErr
           1E0 : 81E9;  -- 	CALL   CapVel      ; ensure velocity is valid
           1E1 : 988B;  -- 	OUT    RVELCMD
           1E2 : 09E8;  -- 	LOAD   CMAErr
           1E3 : 81F5;  -- 	CALL   Neg         ; left wheel gets negative differential
           1E4 : 19D5;  -- 	ADD    DVel
           1E5 : 81E9;  -- 	CALL   CapVel
           1E6 : 9883;  -- 	OUT    LVELCMD
           1E7 : 8800;  -- 	RETURN
           1E8 : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           1E9 : 6E0C;  -- 	ADDI    -500
           1EA : 39F0;  -- 	JPOS    CapVelHigh
           1EB : 69F4;  -- 	ADDI    500
           1EC : 69F4;  -- 	ADDI    500
           1ED : 31F2;  -- 	JNEG    CapVelLow
           1EE : 6E0C;  -- 	ADDI    -500
           1EF : 8800;  -- 	RETURN
           1F0 : B9F4;  -- 	LOADI   500
           1F1 : 8800;  -- 	RETURN
           1F2 : BE0C;  -- 	LOADI   -500
           1F3 : 8800;  -- 	RETURN
           1F4 : 39F7;  -- 	JPOS   Abs_r
           1F5 : 5A70;  -- 	XOR    NegOne       ; Flip all bits
           1F6 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1F7 : 8800;  -- 	RETURN
           1F8 : B800;  -- 		LOADI  0
           1F9 : 1175;  -- 		STORE  m16sc        ; clear carry
           1FA : 1178;  -- 		STORE  mres16sH     ; clear result
           1FB : B810;  -- 		LOADI  16           ; load 16 to counter
           1FC : 1176;  -- 		STORE  mcnt16s
           1FD : 0975;  -- 		LOAD   m16sc        ; check the carry (from previous iteration)
           1FE : 4202;  -- 		JZERO  Mult16s_noc  ; if no carry, move on
           1FF : 0978;  -- 		LOAD   mres16sH     ; if a carry,
           200 : 1973;  -- 		ADD    m16sA        ;  add multiplicand to result H
           201 : 1178;  -- 		STORE  mres16sH
           202 : 0974;  -- 		LOAD   m16sB
           203 : 4A72;  -- 		AND    One          ; check bit 0 of multiplier
           204 : 1175;  -- 		STORE  m16sc        ; save as next carry
           205 : 4209;  -- 		JZERO  Mult16s_sh   ; if no carry, move on to shift
           206 : 0978;  -- 		LOAD   mres16sH     ; if bit 0 set,
           207 : 2173;  -- 		SUB    m16sA        ;  subtract multiplicand from result H
           208 : 1178;  -- 		STORE  mres16sH
           209 : 0974;  -- 		LOAD   m16sB
           20A : 6011;  -- 		SHIFT  -1           ; shift result L >>1
           20B : 4972;  -- 		AND    c7FFF        ; clear msb
           20C : 1174;  -- 		STORE  m16sB
           20D : 0978;  -- 		LOAD   mres16sH     ; load result H
           20E : 600F;  -- 		SHIFT  15           ; move lsb to msb
           20F : 5174;  -- 		OR     m16sB
           210 : 1174;  -- 		STORE  m16sB        ; result L now includes carry out from H
           211 : 0978;  -- 		LOAD   mres16sH
           212 : 6011;  -- 		SHIFT  -1
           213 : 1178;  -- 		STORE  mres16sH     ; shift result H >>1
           214 : 0976;  -- 		LOAD   mcnt16s
           215 : 6FFF;  -- 		ADDI   -1           ; check counter
           216 : 39FC;  -- 		JPOS   Mult16s_loop ; need to iterate 16 times
           217 : 0974;  -- 		LOAD   m16sB
           218 : 1177;  -- 		STORE  mres16sL     ; multiplier and result L shared a word
           219 : 8800;  -- 		RETURN              ; Done
           21A : 9802;  -- 	OUT    TIMER
           21B : 9002;  -- 	IN     TIMER
           21C : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           21D : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           21E : 321B;  -- 	JNEG   Wloop
           21F : 8800;  -- 	RETURN
           220 : 8228;  -- 	CALL   BlockI2C    ; wait for idle
           221 : 0A96;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           222 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           223 : 0A71;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           224 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           225 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           226 : 8228;  -- 	CALL   BlockI2C    ; wait for it to finish
           227 : 8800;  -- 	RETURN
           228 : 0A71;  -- 	LOAD   Zero
           229 : 1254;  -- 	STORE  Temp        ; Used to check for timeout
           22A : 0A54;  -- 	LOAD   Temp
           22B : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           22C : 1254;  -- 	STORE  Temp
           22D : 4231;  -- 	JZERO  I2CError    ; Timeout occurred; error
           22E : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           22F : 3A2A;  -- 	JPOS   BI2CL       ; If not 0, try again
           230 : 8800;  -- 	RETURN             ; Else return
           231 : 0A71;  -- 	LOAD   Zero
           232 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           233 : 9804;  -- 	OUT    SSEG1
           234 : 9805;  -- 	OUT    SSEG2       ; display error message
           235 : 2A31;  -- 	JUMP   I2CError
           236 : 824E;  -- 	CALL   GetBattLvl
           237 : 4236;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           238 : 2295;  -- 	SUB    MinBatt
           239 : 323C;  -- 	JNEG   DeadBatt
           23A : 1A95;  -- 	ADD    MinBatt     ; get original value back
           23B : 8800;  -- 	RETURN
           23C : 0A75;  -- 	LOAD   Four
           23D : 980A;  -- 	OUT    BEEP        ; start beep sound
           23E : 824E;  -- 	CALL   GetBattLvl  ; get the battery level
           23F : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           240 : 9805;  -- 	OUT    SSEG2
           241 : 9806;  -- 	OUT    LCD
           242 : 0A71;  -- 	LOAD   Zero
           243 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           244 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           245 : 9807;  -- 	OUT    XLEDS
           246 : 821A;  -- 	CALL   Wait1       ; 1 second
           247 : 0A71;  -- 	Load   Zero
           248 : 980A;  -- 	OUT    BEEP        ; stop beeping
           249 : 0A71;  -- 	LOAD   Zero
           24A : 9801;  -- 	OUT    LEDS        ; LEDs off
           24B : 9807;  -- 	OUT    XLEDS
           24C : 821A;  -- 	CALL   Wait1       ; 1 second
           24D : 2A3C;  -- 	JUMP   DeadBatt    ; repeat forever
           24E : 0A97;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           24F : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           250 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           251 : 8228;  -- 	CALL   BlockI2C    ; wait for it to finish
           252 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           253 : 8800;  -- 	RETURN
           254 : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           255 : 0000;  -- WaitTime:			DW 0
           256 : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           257 : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           258 : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           259 : 0004;  -- ErrMargin: 			DW 4
           25A : 0000;  -- XDir:				DW 0		; Current direction on the X access robot is moving. 1 = right, 0 = left
           25B : 0000;  -- ObjectXDist:		DW 0 		; The x position of the next closest object
           25C : 0000;  -- ObjectYDist:		DW 0		; The absolute value of the y position of the next closest object
           25D : 0000;  -- AlongLongWall:		DW 0		; Boolean that signifies if robot is aligned along the longest wall
           25E : 0000;  -- ObjectsPosTheta:	DW 0		; Boolean that signifies if the robot has to turn in a positive angle to tag objects
           25F : 0000;  -- TagVelocity:		DW 0		; Number that signifies the speed and direction the robot has to go in to get to the next closest object along the wall
           260 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           261 : FF38;  -- WallThresh: 		DW -200 	; Defines distance away from wall before DE2Bot should stop moving (used in GoHome function)
           262 : 0000;  -- Cell: 				DW 0		; Initialize cell value
           263 : 0000;  -- CellCount:  		DW 0 		; How many values in the occupancy array
           264 : 064C;  -- CellArrI:   		DW &H64c	; Memory location (starting index) of the cell array
           265 : 0000;  -- XposIndex:			DW 0		; Initialize a temporary index for cell array indexing
           266 : 0000;  -- FilterVal:			DW 0		; Updated in the code to set up the max filter
           267 : 0000;  -- y_val:			DW 0
           268 : 0000;  -- THETAtemp2:		DW 0
           269 : 0000;  -- THETAtemp4:		DW 0
           26A : 0000;  -- THETA2:			DW 0
           26B : 0000;  -- THETA4:			DW 0
           26C : 0000;  -- THETA6:			DW 0
           26D : 0000;  -- TCOPY:			DW 0
           26E : 0000;  -- CosSum:			DW 0
           26F : FFFB;  -- NegFive:	DW -5
           270 : FFFF;  -- NegOne:   	DW -1
           271 : 0000;  -- Zero:     	DW 0
           272 : 0001;  -- One:      	DW 1
           273 : 0002;  -- Two:      	DW 2
           274 : 0003;  -- Three:    	DW 3
           275 : 0004;  -- Four:     	DW 4
           276 : 0005;  -- Five:     	DW 5
           277 : 0006;  -- Six:      	DW 6
           278 : 0007;  -- Seven:    	DW 7
           279 : 0008;  -- Eight:    	DW 8
           27A : 0009;  -- Nine:     	DW 9
           27B : 000A;  -- Ten:      	DW 10
           27C : 0001;  -- Mask0:    DW &B00000001
           27D : 0002;  -- Mask1:    DW &B00000010
           27E : 0004;  -- Mask2:    DW &B00000100
           27F : 0008;  -- Mask3:    DW &B00001000
           280 : 0010;  -- Mask4:    DW &B00010000
           281 : 0020;  -- Mask5:    DW &B00100000
           282 : 0040;  -- Mask6:    DW &B01000000
           283 : 0080;  -- Mask7:    DW &B10000000
           284 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           285 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           286 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           287 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           288 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           289 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           28A : 00B4;  -- Deg180:   DW 180       ; 180
           28B : 010E;  -- Deg270:   DW 270       ; 270
           28C : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           28D : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           28E : FF9C;  -- RSlow:    DW -100
           28F : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           290 : FEA2;  -- RMid:     DW -350
           291 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           292 : FE0C;  -- RFast:    DW -500
           293 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           294 : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           295 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           296 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           297 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           64C : 0000;  -- DW		0	; Array start	
  END;
