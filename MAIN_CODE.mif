-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 09CA;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8182;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8198;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 49D9;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 49D6;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 49D6;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 11B6;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 51B6;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 49D7;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 09CA;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT 	RESETPOS	
           01D : 8022;  -- 	CALL	InitializeVars
           01E : 802D;  -- 	CALL	InitialSearch
           01F : 8094;  -- 	CALL	FindAndTagClosestObject
           020 : 98C3;  -- 	OUT 	RESETPOS
           021 : 8105;  -- 	CALL Die
           022 : 9000;  -- 		IN		SWITCHES
           023 : 49D5;  -- 		AND		MASK0
           024 : 11BF;  -- 		STORE 	AlongLongWall
           025 : 4027;  -- 		JZERO	PositiveThetaLoad
           026 : 3829;  -- 		JPOS	ZeroThetaLoad
           027 : 09CB;  -- 		LOAD	ONE
           028 : 282B;  -- 		JUMP	ThetaStore
           029 : 09CA;  -- 		LOAD	ZERO
           02A : 282B;  -- 		JUMP ThetaStore
           02B : 11C0;  -- 		STORE	ObjectsPosTheta
           02C : 8800;  -- 		RETURN
           02D : 09D7;  -- 		LOAD	MASK2
           02E : 19D8;  -- 		ADD		MASK3
           02F : 98B2;  -- 		OUT 	SONAREN
           030 : 8048;  -- 		CALL 	UpdateMap
           031 : 09BF;  -- 		LOAD	AlongLongWall
           032 : 4037;  -- 		JZERO	LoadShortDistance
           033 : 3834;  -- 		JPOS	LoadLongDistance
           034 : 90C0;  -- 		IN		XPOS
           035 : 21EC;  -- 		SUB		MaxLong
           036 : 283A;  -- 		JUMP	DistanceCheck
           037 : 90C0;  -- 		IN		XPOS
           038 : 21ED;  -- 		SUB		MaxShort
           039 : 283A;  -- 		JUMP 	DistanceCheck
           03A : 3841;  -- 		JPOS	DoneForward
           03B : 09CA;  -- 		LOAD	ZERO
           03C : 1158;  -- 		STORE	DTheta
           03D : 09E8;  -- 		LOAD	FMid
           03E : 1159;  -- 		STORE	DVel
           03F : 815A;  -- 		CALL	ControlMovement
           040 : 2830;  -- 		JUMP	KeepGoingForward
           041 : 09CA;  -- 		LOAD	ZERO
           042 : 9883;  -- 		OUT		LVELCMD
           043 : 988B;  -- 		OUT		RVELCMD
           044 : 09E3;  -- 		LOAD	Deg180
           045 : 11B8;  -- 		STORE	Angle
           046 : 8124;  -- 		CALL	Rotate
           047 : 8800;  -- 		RETURN
           048 : 09BF;  --  	LOAD 	AlongLongWall
           049 : 384B;  -- 	JPOS 	LGO ; If no switches active, robot setup values for long axis traverse
           04A : 4050;  -- 	JZERO  	SGO ; If SW0 active, robot setup values for short axis traverse
           04B : 09DA;  -- 	 	LOAD	MASK5
           04C : 98B2;  -- 	 	OUT 	SONAREN
           04D : 90AD;  -- 	 	IN 		DIST5 ;Turn on and read value from sensor 5
           04E : 8055;  -- 		CALL	CellIn ; If value read in less than the value already in cell, store it in cell
           04F : 8800;  -- 	 	RETURN
           050 : 09D5;  -- 		LOAD	MASK0
           051 : 98B2;  -- 		OUT 	SONAREN
           052 : 90A8;  -- 		IN 		DIST0
           053 : 8055;  -- 	 	CALL	CellIn ; If value read in less than the value already in cell, store it in cell
           054 : 8800;  -- 		RETURN
           055 : 11C4;  -- 		STORE 	Cell ;store current distance read in cell
           056 : 90C0;  -- 	 	IN		XPOS ;Take in xposition
           057 : 600F;  -- 		SHIFT 	five ;Index value of the array (applies same dist value cells of length 32 increments)
           058 : 69C7;  -- 		ADDI	CellArrI ;Add the value of starting address (where the memory for array begins)
           059 : 11C8;  -- 		STORE 	XposIndex ;Holds the adress where the dist value will be placed
           05A : 09C4;  -- 		LOAD 	CELL
           05B : 79C8;  -- 		ISTORE	XposIndex
           05C : 8800;  -- 		RETURN
           05D : 8800;  -- 	Return
           05E : B800;  -- 		LOADI  0
           05F : 1083;  -- 		STORE  m16sc        ; clear carry
           060 : 1086;  -- 		STORE  mres16sH     ; clear result
           061 : B810;  -- 		LOADI  16           ; load 16 to counter
           062 : 1084;  -- 		STORE  mcnt16s
           063 : 0883;  -- 		LOAD   m16sc        ; check the carry (from previous iteration)
           064 : 4068;  -- 		JZERO  Mult16s_noc  ; if no carry, move on
           065 : 0886;  -- 		LOAD   mres16sH     ; if a carry,
           066 : 1881;  -- 		ADD    m16sA        ;  add multiplicand to result H
           067 : 1086;  -- 		STORE  mres16sH
           068 : 0882;  -- 		LOAD   m16sB
           069 : 49CB;  -- 		AND    One          ; check bit 0 of multiplier
           06A : 1083;  -- 		STORE  m16sc        ; save as next carry
           06B : 406F;  -- 		JZERO  Mult16s_sh   ; if no carry, move on to shift
           06C : 0886;  -- 		LOAD   mres16sH     ; if bit 0 set,
           06D : 2081;  -- 		SUB    m16sA        ;  subtract multiplicand from result H
           06E : 1086;  -- 		STORE  mres16sH
           06F : 0882;  -- 		LOAD   m16sB
           070 : 6011;  -- 		SHIFT  -1           ; shift result L >>1
           071 : 4880;  -- 		AND    c7FFF        ; clear msb
           072 : 1082;  -- 		STORE  m16sB
           073 : 0886;  -- 		LOAD   mres16sH     ; load result H
           074 : 600F;  -- 		SHIFT  15           ; move lsb to msb
           075 : 5082;  -- 		OR     m16sB
           076 : 1082;  -- 		STORE  m16sB        ; result L now includes carry out from H
           077 : 0886;  -- 		LOAD   mres16sH
           078 : 6011;  -- 		SHIFT  -1
           079 : 1086;  -- 		STORE  mres16sH     ; shift result H >>1
           07A : 0884;  -- 		LOAD   mcnt16s
           07B : 6FFF;  -- 		ADDI   -1           ; check counter
           07C : 3862;  -- 		JPOS   Mult16s_loop ; need to iterate 16 times
           07D : 0882;  -- 		LOAD   m16sB
           07E : 1085;  -- 		STORE  mres16sL     ; multiplier and result L shared a word
           07F : 8800;  -- 		RETURN              ; Done
           080 : 7FFF;  -- 	c7FFF: DW &H7FFF
           081 : 0000;  -- 	m16sA: DW 0 ; multiplicand
           082 : 0000;  -- 	m16sB: DW 0 ; multipler
           083 : 0000;  -- 	m16sc: DW 0 ; carry
           084 : 0000;  -- 	mcnt16s: DW 0 ; counter
           085 : 0000;  -- 	mres16sL: DW 0 ; result low
           086 : 0000;  -- 	mres16sH: DW 0 ; result high
           087 : 005A;  -- 	Ang0:		DW 90
           088 : 002C;  -- 	Ang1:		DW 44
           089 : 000C;  -- 	Ang2:		DW 12
           08A : FFF4;  -- 	Ang3:		DW -12
           08B : FFD4;  -- 	Ang4:		DW -44
           08C : FFA6;  -- 	Ang5:		DW -90
           08D : FF70;  -- 	Ang6:		DW -144
           08E : 0090;  -- 	Ang7:		DW 144
           08F : 0000;  -- 	SensorToCheck: 	DW 0
           090 : 0000;  -- 	SensorAngle:		DW 0
           091 : 0000;  -- 	SensorDist: 		DW 0
           092 : 0000;  -- 	SensorIndex: 		DW 0
           093 : 0000;  -- 	SensorUpdate:		DW 0
           094 : 80D9;  -- 		CALL	FindClosestObject
           095 : 08C0;  -- 		LOAD 	XPOS
           096 : 21BD;  -- 		SUB 	ObjectXDist
           097 : 309A;  -- 		JNEG	GoUp
           098 : 40B1;  -- 		JZERO AtObjectX
           099 : 389D;  -- 		JPOS	GoDown
           09A : 09CB;  -- 		LOAD 	ONE
           09B : 11BC;  -- 		STORE 	XDir
           09C : 289F;  -- 		JUMP 	MoveLoop
           09D : 09CA;  -- 		LOAD 	ZERO
           09E : 11BC;  -- 		STORE 	XDir
           09F : 8048;  -- 		CALL 	UpdateMap
           0A0 : 09BC;  -- 		LOAD XDir
           0A1 : 40A8;  -- 		JZERO CheckLess
           0A2 : 38A3;  -- 		JPOS CheckGreat
           0A3 : 08C0;  -- 		LOAD	XPOS
           0A4 : 21BD;  -- 		SUB		ObjectXDist
           0A5 : 40B1;  -- 		JZERO 	AtObjectX
           0A6 : 38B1;  -- 		JPOS	AtObjectX
           0A7 : 28AD;  -- 		JUMP	KeepGoing
           0A8 : 08C0;  -- 		LOAD	XPOS
           0A9 : 21BD;  -- 		SUB		ObjectXDist
           0AA : 40B1;  -- 		JZERO 	AtObjectX
           0AB : 30B1;  -- 		JNEG	AtObjectX
           0AC : 28AD;  -- 		JUMP	KeepGoing
           0AD : 09E8;  -- 		LOAD	FMid
           0AE : 9883;  -- 		OUT		LVELCMD
           0AF : 988B;  -- 		OUT		RVELCMD
           0B0 : 289F;  -- 		JUMP	MoveLoop
           0B1 : 09CA;  -- 		LOAD	ZERO
           0B2 : 9883;  -- 		OUT		LVELCMD
           0B3 : 988B;  -- 		OUT		RVELCMD
           0B4 : 8800;  -- 		RETURN
           0B5 : 082A;  -- Middle:			DW 2090
           0B6 : 8048;  -- 		CALL 	UpdateMap
           0B7 : 08C0;  -- 		LOAD 	XPOS
           0B8 : 1FD6;  -- 		ADD 	-2090
           0B9 : 30BB;  -- 		JNEG 	NotAtMiddle
           0BA : 28BF;  -- 		JUMP 	AtMiddle
           0BB : 09E8;  -- 		LOAD	FMid
           0BC : 9883;  -- 		OUT		LVELCMD
           0BD : 988B;  -- 		OUT		RVELCMD
           0BE : 28B6;  -- 		JUMP  CheckIfMiddle
           0BF : 09CA;  -- 	LOAD	ZERO
           0C0 : 9883;  -- 	OUT		LVELCMD
           0C1 : 988B;  -- 	OUT		RVELCMD
           0C2 : 09D7;  -- 	LOAD	MASK2
           0C3 : 98B2;  -- 	OUT		SONAREN
           0C4 : 09D8;  -- 	LOAD	MASK3
           0C5 : 98B2;  -- 	OUT		SONAREN
           0C6 : 8048;  -- 		CALL 	UpdateMap
           0C7 : 08AA;  -- 		LOAD	DIST2
           0C8 : 6C6D;  -- 		ADDI	-915
           0C9 : 30CB;  -- 		JNEG	TwoGot
           0CA : 28D4;  -- 		JUMP	Rotate10
           0CB : 09CB;  -- 		LOAD	ONE
           0CC : 08AB;  -- 		LOAD	DIST3
           0CD : 6C6D;  -- 		ADDI	-915
           0CE : 30D0;  -- 		JNEG	ThreeGot
           0CF : 28D4;  -- 		JUMP	Rotate10
           0D0 : 09CA;  -- 		LOAD	ZERO
           0D1 : 9883;  -- 		OUT		LVELCMD
           0D2 : 988B;  -- 		OUT		RVELCMD
           0D3 : 28D0;  -- 		JUMP	ThreeGot
           0D4 : 09CA;  -- 		LOAD 	ZERO
           0D5 : 680C;  -- 		ADDI 	12
           0D6 : 11B8;  -- 		STORE Angle
           0D7 : 2924;  -- 		JUMP	Rotate
           0D8 : 28C6;  -- 		JUMP	CheckMidObj
           0D9 : 09C4;  -- 	LOAD	CELL
           0DA : 11BD;  -- 	STORE	ObjectXDist
           0DB : 11BE;  -- 	STORE	ObjectYDist
           0DC : 8800;  -- 	RETURN
           0DD : 8105;  -- 	CALL 	Die
           0DE : 8800;  -- 	RETURN
           0DF : 8149;  -- 	CALL 	GoToWall
           0E0 : B85A;  -- 	LOADI 	90
           0E1 : 11B8;  -- 	STORE 	Angle
           0E2 : 09C0;  -- 	LOAD 	ObjectsPosTheta
           0E3 : 40E6;  -- 	JZERO 	HomeRotate
           0E4 : BFA6;  -- 	LOADI 	-90
           0E5 : 11B8;  -- 	STORE 	Angle
           0E6 : 8124;  -- 	CALL  	Rotate
           0E7 : 8149;  -- 	CALL 	GoToWall
           0E8 : 28DD;  -- 	JUMP 	BackAtHome
           0E9 : 11B6;  -- 	STORE 	Temp
           0EA : 90C1;  -- 	IN   	YPOS
           0EB : 11C2;  -- 	STORE 	EncoderY
           0EC : B8C2;  -- 	LOADI 	THETA
           0ED : 1158;  -- 	STORE 	DTheta
           0EE : 09E8;  -- 	LOAD 	FMid
           0EF : 1159;  -- 	STORE 	DVel
           0F0 : 815A;  -- 	CALL 	ControlMovement
           0F1 : 90C1;  -- 	IN 		YPOS
           0F2 : 8178;  -- 	CALL 	Abs
           0F3 : 21C2;  -- 	SUB 	EncoderY
           0F4 : 21C4;  -- 	SUB 	Cell
           0F5 : 6FF6;  -- 	ADDI 	-10
           0F6 : 30F0;  -- 	JNEG 	TagIt
           0F7 : 90C1;  -- 	IN 		YPOS
           0F8 : 8178;  -- 	CALL 	Abs
           0F9 : 6FE2;  -- 	ADDI 	-30
           0FA : 11C2;  -- 	STORE 	EncoderY
           0FB : 09E9;  -- 	LOAD 	RMid
           0FC : 1159;  -- 	STORE 	DVel
           0FD : 815A;  -- 	CALL ControlMovement
           0FE : 90C1;  -- 	IN 		YPOS
           0FF : 8178;  -- 	CALL 	Abs
           100 : 21C2;  -- 	SUB 	EncoderY
           101 : 38FD;  -- 	JPOS 	MoveBack
           102 : B8B4;  -- 	LOADI 	180
           103 : 8124;  -- 	CALL 	Rotate
           104 : 80DF;  -- 	CALL 	GoHome
           105 : 09CA;  -- 	LOAD   Zero         ; Stop everything.
           106 : 9883;  -- 	OUT    LVELCMD
           107 : 988B;  -- 	OUT    RVELCMD
           108 : 98B2;  -- 	OUT    SONAREN
           109 : 090C;  -- 	LOAD   DEAD         ; An indication that we are dead
           10A : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           10B : 290B;  -- 		JUMP   Forever      ; Do this forever.
           10C : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           10D : 09CA;  -- 	LOAD 	ZERO
           10E : 9883;  -- 	OUT 	LVELCMD
           10F : 988B;  -- 	OUT 	RVELCMD
           110 : 8800;  -- 	RETURN
           111 : 11B6;  -- 	STORE	Temp
           112 : B802;  -- 	LOADI 	2
           113 : 980A;  -- 	OUT		BEEP
           114 : B801;  -- 	LOADI	1
           115 : 11B7;  -- 	STORE	WaitTime
           116 : 9802;  -- 	OUT		Timer
           117 : 9002;  -- 		IN 		Timer
           118 : 21B7;  -- 		SUB 	WaitTime
           119 : 3117;  -- 		JNEG	BeepLoop
           11A : B800;  -- 		LOADI	0
           11B : 980A;  -- 		OUT		BEEP
           11C : 09B6;  -- 		LOAD 	Temp
           11D : 8800;  -- 		RETURN
           11E : 3121;  -- 	JNEG	M360N
           11F : 6E98;  -- 	ADDI 	-360
           120 : 291E;  -- 	JUMP 	Mod360
           121 : 6968;  -- 		ADDI 	360
           122 : 3121;  -- 		JNEG 	M360N
           123 : 8800;  -- 		RETURN
           124 : 11B6;  -- 		STORE	Temp
           125 : 90C2;  -- 		IN 		THETA
           126 : 19B8;  -- 		ADD 	Angle
           127 : 21BB;  -- 		SUB 	ErrMargin
           128 : 811E;  -- 		CALL 	Mod360
           129 : 11B9;  -- 		STORE 	LowErr
           12A : 90C2;  -- 		IN 		THETA
           12B : 19B8;  -- 		ADD 	Angle
           12C : 19BB;  -- 		ADD 	ErrMargin
           12D : 811E;  -- 		CALL 	Mod360
           12E : 11BA;  -- 		STORE 	HighErr
           12F : 09B8;  -- 		LOAD 	Angle
           130 : 313C;  -- 		JNEG 	RotateCW ; else RotateCC
           131 : 09E6;  -- 		LOAD 	FSlow
           132 : 988B;  -- 		OUT		RVELCMD
           133 : 09E7;  -- 		LOAD 	RSlow
           134 : 9883;  -- 		OUT		LVELCMD
           135 : 90C2;  -- 		IN 		THETA
           136 : 21BA;  -- 		SUB 	HighErr
           137 : 3931;  -- 		JPOS	RotateCC
           138 : 90C2;  -- 		IN 		THETA
           139 : 21B9;  -- 		SUB  	LowErr
           13A : 3131;  -- 		JNEG	RotateCC
           13B : 2946;  -- 		JUMP 	RotateEnd
           13C : 09E7;  -- 		LOAD 	RSlow
           13D : 988B;  -- 		OUT		RVELCMD
           13E : 09E6;  -- 		LOAD 	FSlow
           13F : 9883;  -- 		OUT		LVELCMD
           140 : 90C2;  -- 		IN 		THETA
           141 : 21BA;  -- 		SUB 	HighErr
           142 : 393C;  -- 		JPOS	RotateCW
           143 : 90C2;  -- 		IN 		THETA
           144 : 21B9;  -- 		SUB  	LowErr
           145 : 313C;  -- 		JNEG	RotateCW
           146 : 810D;  -- 		CALL 	StopMovement
           147 : 09B6;  -- 		LOAD 	Temp
           148 : 8800;  -- 		RETURN
           149 : 09D7;  -- 	LOAD 	MASK2
           14A : 51D8;  -- 	OR 		MASK3
           14B : 98B2;  -- 	OUT 	SONAREN
           14C : 90C2;  -- 	IN  	THETA
           14D : 1158;  -- 	STORE 	DTheta
           14E : 09E8;  -- 	LOAD 	FMid
           14F : 1159;  -- 	STORE 	DVel
           150 : 815A;  -- 	CALL ControlMovement
           151 : 90AA;  -- 	IN 		DIST2
           152 : 19C3;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           153 : 3950;  -- 	JPOS 	CheckWall
           154 : 90AB;  -- 	IN 		DIST3
           155 : 19C3;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           156 : 3950;  -- 	JPOS 	CheckWall
           157 : 810D;  -- 	CALL 	StopMovement 	; stops movement
           158 : 0000;  -- DTheta:    DW 0
           159 : 0000;  -- DVel:      DW 0
           15A : 90C2;  -- 	IN     THETA
           15B : 2158;  -- 	SUB    DTheta      ; actual - desired angle
           15C : 8179;  -- 	CALL   Neg         ; desired - actual angle
           15D : 68B4;  -- 	ADDI   180
           15E : 811E;  -- 	CALL   Mod360
           15F : 6F4C;  -- 	ADDI   -180
           160 : 6002;  -- 	SHIFT  2
           161 : 116C;  -- 	STORE  CMAErr      ; hold temporarily
           162 : 0959;  -- 	LOAD   DVel
           163 : 196C;  -- 	ADD    CMAErr
           164 : 816D;  -- 	CALL   CapVel      ; ensure velocity is valid
           165 : 988B;  -- 	OUT    RVELCMD
           166 : 096C;  -- 	LOAD   CMAErr
           167 : 8179;  -- 	CALL   Neg         ; left wheel gets negative differential
           168 : 1959;  -- 	ADD    DVel
           169 : 816D;  -- 	CALL   CapVel
           16A : 9883;  -- 	OUT    LVELCMD
           16B : 8800;  -- 	RETURN
           16C : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           16D : 6E0C;  -- 	ADDI    -500
           16E : 3974;  -- 	JPOS    CapVelHigh
           16F : 69F4;  -- 	ADDI    500
           170 : 69F4;  -- 	ADDI    500
           171 : 3176;  -- 	JNEG    CapVelLow
           172 : 6E0C;  -- 	ADDI    -500
           173 : 8800;  -- 	RETURN
           174 : B9F4;  -- 	LOADI   500
           175 : 8800;  -- 	RETURN
           176 : BE0C;  -- 	LOADI   -500
           177 : 8800;  -- 	RETURN
           178 : 397B;  -- 	JPOS   Abs_r
           179 : 59C9;  -- 	XOR    NegOne       ; Flip all bits
           17A : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           17B : 8800;  -- 	RETURN
           17C : 9802;  -- 	OUT    TIMER
           17D : 9002;  -- 	IN     TIMER
           17E : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           17F : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           180 : 317D;  -- 	JNEG   Wloop
           181 : 8800;  -- 	RETURN
           182 : 818A;  -- 	CALL   BlockI2C    ; wait for idle
           183 : 09EF;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           184 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           185 : 09CA;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           186 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           187 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           188 : 818A;  -- 	CALL   BlockI2C    ; wait for it to finish
           189 : 8800;  -- 	RETURN
           18A : 09CA;  -- 	LOAD   Zero
           18B : 11B6;  -- 	STORE  Temp        ; Used to check for timeout
           18C : 09B6;  -- 	LOAD   Temp
           18D : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           18E : 11B6;  -- 	STORE  Temp
           18F : 4193;  -- 	JZERO  I2CError    ; Timeout occurred; error
           190 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           191 : 398C;  -- 	JPOS   BI2CL       ; If not 0, try again
           192 : 8800;  -- 	RETURN             ; Else return
           193 : 09CA;  -- 	LOAD   Zero
           194 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           195 : 9804;  -- 	OUT    SSEG1
           196 : 9805;  -- 	OUT    SSEG2       ; display error message
           197 : 2993;  -- 	JUMP   I2CError
           198 : 81B0;  -- 	CALL   GetBattLvl
           199 : 4198;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           19A : 21EE;  -- 	SUB    MinBatt
           19B : 319E;  -- 	JNEG   DeadBatt
           19C : 19EE;  -- 	ADD    MinBatt     ; get original value back
           19D : 8800;  -- 	RETURN
           19E : 09CE;  -- 	LOAD   Four
           19F : 980A;  -- 	OUT    BEEP        ; start beep sound
           1A0 : 81B0;  -- 	CALL   GetBattLvl  ; get the battery level
           1A1 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1A2 : 9805;  -- 	OUT    SSEG2
           1A3 : 9806;  -- 	OUT    LCD
           1A4 : 09CA;  -- 	LOAD   Zero
           1A5 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1A6 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1A7 : 9807;  -- 	OUT    XLEDS
           1A8 : 817C;  -- 	CALL   Wait1       ; 1 second
           1A9 : 09CA;  -- 	Load   Zero
           1AA : 980A;  -- 	OUT    BEEP        ; stop beeping
           1AB : 09CA;  -- 	LOAD   Zero
           1AC : 9801;  -- 	OUT    LEDS        ; LEDs off
           1AD : 9807;  -- 	OUT    XLEDS
           1AE : 817C;  -- 	CALL   Wait1       ; 1 second
           1AF : 299E;  -- 	JUMP   DeadBatt    ; repeat forever
           1B0 : 09F0;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1B1 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1B2 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1B3 : 818A;  -- 	CALL   BlockI2C    ; wait for it to finish
           1B4 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1B5 : 8800;  -- 	RETURN
           1B6 : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           1B7 : 0000;  -- WaitTime:			DW 0
           1B8 : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           1B9 : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           1BA : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           1BB : 0004;  -- ErrMargin: 			DW 4
           1BC : 0000;  -- XDir:				DW 0	; Direction on the X access robot is moving
           1BD : 0000;  -- ObjectXDist:		DW 0 	; The x position of the next closest object
           1BE : 0000;  -- ObjectYDist:		DW 0	; The absolute value of the y position of the next closest object
           1BF : 0000;  -- AlongLongWall:		DW 0	; Boolean that signifies if robot is aligned along the longest wall
           1C0 : 0000;  -- ObjectsPosTheta:	DW 0	; Boolean that signifies if the robot has to turn in a positive angle to tag objects
           1C1 : 0000;  -- TagVelocity:		DW 0	; Number that signifies the speed and direction the robot has to go in to get to the next closest object along the wall
           1C2 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           1C3 : FF38;  -- WallThresh: 		DW -200 	; Defines distance away from wall before DE2Bot should stop moving (used in GoHome function)
           1C4 : 012C;  -- Cell: 				DW 300	; Initialize cell value
           1C5 : 012C;  -- ObjLoc:				DW 300	 ; Stores the location of the object to be tagged
           1C6 : 0000;  -- CellCount:  		DW 0 		; How many values in the occupancy array
           1C7 : 044C;  -- CellArrI:   		DW &H44C	; Memory location (starting index) of the cell array
           1C8 : 0000;  -- XposIndex:			DW 0		; Initialize a temporary index for cell array indexing
           1C9 : FFFF;  -- NegOne:   DW -1
           1CA : 0000;  -- Zero:     DW 0
           1CB : 0001;  -- One:      DW 1
           1CC : 0002;  -- Two:      DW 2
           1CD : 0003;  -- Three:    DW 3
           1CE : 0004;  -- Four:     DW 4
           1CF : 0005;  -- Five:     DW 5
           1D0 : 0006;  -- Six:      DW 6
           1D1 : 0007;  -- Seven:    DW 7
           1D2 : 0008;  -- Eight:    DW 8
           1D3 : 0009;  -- Nine:     DW 9
           1D4 : 000A;  -- Ten:      DW 10
           1D5 : 0001;  -- Mask0:    DW &B00000001
           1D6 : 0002;  -- Mask1:    DW &B00000010
           1D7 : 0004;  -- Mask2:    DW &B00000100
           1D8 : 0008;  -- Mask3:    DW &B00001000
           1D9 : 0010;  -- Mask4:    DW &B00010000
           1DA : 0020;  -- Mask5:    DW &B00100000
           1DB : 0040;  -- Mask6:    DW &B01000000
           1DC : 0080;  -- Mask7:    DW &B10000000
           1DD : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1DE : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1DF : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1E0 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           1E1 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           1E2 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           1E3 : 00B4;  -- Deg180:   DW 180       ; 180
           1E4 : 010E;  -- Deg270:   DW 270       ; 270
           1E5 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           1E6 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           1E7 : FF9C;  -- RSlow:    DW -100
           1E8 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           1E9 : FEA2;  -- RMid:     DW -350
           1EA : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           1EB : FE0C;  -- RFast:    DW -500
           1EC : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           1ED : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           1EE : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           1EF : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           1F0 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           44C : 7FFF;  -- OcArray: DW &H7FFF
  END;
