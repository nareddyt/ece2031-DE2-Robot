-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0A47;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 81F6;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 820C;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4A56;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4A53;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4A53;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 122A;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 522A;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4A54;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0A47;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT 	RESETPOS
           01D : 802A;  -- 	CALL	InitializeVars
           01E : 8035;  -- 	CALL	InitializeMap
           01F : 8036;  -- 	CALL	InitialSearch
           020 : 80DB;  -- 	CALL	FindAndTagClosestObject
           021 : 98C3;  -- 	OUT 	RESETPOS
           022 : 0A47;  -- 		LOAD   Zero         ; Stop everything.
           023 : 9883;  -- 		OUT    LVELCMD
           024 : 988B;  -- 		OUT    RVELCMD
           025 : 98B2;  -- 		OUT    SONAREN
           026 : 0829;  -- 		LOAD   DEAD         ; An indication that we are dead
           027 : 9805;  -- 		OUT    SSEG2        ; "dEAd" on the LEDs
           028 : 2828;  -- 		JUMP   Forever      ; Do this forever.
           029 : DEAD;  -- 		DEAD:  DW &HDEAD    ; Example of a "local" variable
           02A : 9000;  -- 		IN		SWITCHES
           02B : 4A52;  -- 		AND		MASK0
           02C : 1233;  -- 		STORE 	AlongLongWall
           02D : 402F;  -- 		JZERO	PositiveThetaLoad
           02E : 3831;  -- 		JPOS	ZeroThetaLoad
           02F : 0A48;  -- 		LOAD	ONE
           030 : 2833;  -- 		JUMP	ThetaStore
           031 : 0A47;  -- 		LOAD	ZERO
           032 : 2833;  -- 		JUMP 	ThetaStore
           033 : 1234;  -- 		STORE	ObjectsPosTheta
           034 : 8800;  -- 		RETURN
           035 : 0000;  -- 	DW 0
           036 : 0A54;  -- 		LOAD	MASK2
           037 : 1A55;  -- 		ADD		MASK3
           038 : 80AE;  -- 		CALL 	UpdateMap
           039 : 0A33;  -- 		LOAD	AlongLongWall
           03A : 403F;  -- 		JZERO	LoadShortDistance
           03B : 383C;  -- 		JPOS	LoadLongDistance
           03C : 90C0;  -- 		IN		XPOS
           03D : 2269;  -- 		SUB		MaxLong
           03E : 2842;  -- 		JUMP	DistanceCheck
           03F : 90C0;  -- 		IN		XPOS
           040 : 226A;  -- 		SUB		MaxShort
           041 : 2842;  -- 		JUMP 	DistanceCheck
           042 : 3849;  -- 		JPOS	DoneForward
           043 : 0A47;  -- 		LOAD	ZERO
           044 : 11AA;  -- 		STORE	DTheta
           045 : 0A65;  -- 		LOAD	FMid
           046 : 11AB;  -- 		STORE	DVel
           047 : 81AC;  -- 		CALL	ControlMovement
           048 : 2838;  -- 		JUMP	KeepGoingForward
           049 : 815F;  -- 		CALL	StopMovement
           04A : 0A60;  -- 		LOAD	Deg180
           04B : 122C;  -- 		STORE	Angle
           04C : 8176;  -- 		CALL	Rotate
           04D : 8800;  -- 		RETURN
           04E : 0000;  -- 	InitMaxDist:			DW 0
           04F : 0000;  -- 	InitArraySize:		DW 0
           050 : 0000;  -- 	InitFillCounter:	DW 0
           051 : 0000;  -- 	InitFillIndex:		DW 0
           052 : 0A47;  -- 		LOAD		ZERO
           053 : 1050;  -- 		STORE		InitFillCounter
           054 : 0A33;  -- 		LOAD		AlongLongWall
           055 : 3857;  -- 		JPOS		InitLong
           056 : 285E;  -- 		JUMP		InitShort
           057 : 0A69;  -- 		LOAD		MaxLong
           058 : 6015;  -- 		SHIFT		-5
           059 : 6801;  -- 		ADDI		1
           05A : 104F;  -- 		STORE 	InitArraySize
           05B : 0A6A;  -- 		LOAD		MaxShort
           05C : 104E;  -- 		STORE		InitMaxDist
           05D : 2864;  -- 		JUMP		DistFillLoop
           05E : 0A6A;  -- 		LOAD		MaxShort
           05F : 6015;  -- 		SHIFT		-5
           060 : 6801;  -- 		ADDI 		1
           061 : 104F;  -- 		STORE 	InitArraySize
           062 : 0A69;  -- 		LOAD		MaxLong
           063 : 104E;  -- 		STORE		InitMaxDist
           064 : 0850;  -- 		LOAD		InitFillCounter
           065 : 204F;  -- 		SUB			InitArraySize
           066 : 4071;  -- 		JZERO		ArrayFilled
           067 : 3871;  -- 		JPOS		ArrayFilled
           068 : 0A3A;  -- 		LOAD		CellArrI
           069 : 1850;  -- 		ADD			InitFillCounter
           06A : 1051;  -- 		STORE 	InitFillIndex
           06B : 084E;  -- 		LOAD		InitMaxDist
           06C : 7851;  -- 		ISTORE	InitFillIndex
           06D : 0850;  -- 		LOAD		InitFillCounter
           06E : 6801;  -- 		ADDI		1
           06F : 1050;  -- 		STORE		InitFillCounter
           070 : 2864;  -- 		JUMP		DistFillLoop
           071 : 8800;  -- 		RETURN
           072 : 0000;  -- 	TagPos:				DW 0
           073 : 0000;  -- 	TagIndex:			DW 0
           074 : 0000;  -- 	LeftTagIndex:	DW 0
           075 : 0000;  -- 	RightTagIndex: DW 0
           076 : 0000;  -- 	UpdateDist:		DW 0
           077 : 0000;  -- 	TagArraySize:	DW 0
           078 : 0A33;  -- 		LOAD		AlongLongWall
           079 : 387B;  -- 		JPOS		UpdLong
           07A : 2882;  -- 		JUMP		UpdShort
           07B : 0A69;  -- 		LOAD		MaxLong
           07C : 6015;  -- 		SHIFT		-5
           07D : 6801;  -- 		ADDI		1
           07E : 1077;  -- 		STORE 	TagArraySize
           07F : 0A6A;  -- 		LOAD		MaxShort
           080 : 1076;  -- 		STORE		UpdateDist
           081 : 2888;  -- 		JUMP		FillTagP
           082 : 0A6A;  -- 		LOAD		MaxShort
           083 : 6015;  -- 		SHIFT		-5
           084 : 6801;  -- 		ADDI		1
           085 : 1077;  -- 		STORE 	TagArraySize
           086 : 0A69;  -- 		LOAD		MaxLong
           087 : 1076;  -- 		STORE		UpdateDist
           088 : 0872;  -- 		LOAD 		TagPos
           089 : 6015;  -- 		SHIFT		-5
           08A : 1A3A;  -- 		ADD			CellArrI
           08B : 1073;  -- 		STORE		TagIndex
           08C : 0876;  -- 		LOAD		UpdateDist
           08D : 1073;  -- 		STORE		TagIndex
           08E : 0873;  -- 		LOAD		TagIndex
           08F : 6801;  -- 		ADDI		1
           090 : 1075;  -- 		STORE		RightTagIndex
           091 : 0873;  -- 		LOAD		TagIndex
           092 : 6FFF;  -- 		ADDI		-1
           093 : 1074;  -- 		STORE		LeftTagIndex
           094 : 0874;  -- 		LOAD		LeftTagIndex
           095 : 223A;  -- 		SUB			CellArrI
           096 : 30A0;  -- 		JNEG		KeepRight
           097 : 7074;  -- 		ILOAD		LeftTagIndex
           098 : 2076;  -- 		SUB			UpdateDist
           099 : 40A0;  -- 		JZERO		KeepRight
           09A : 0876;  -- 		LOAD		UpdateDist
           09B : 7874;  -- 		ISTORE	LeftTagIndex
           09C : 0874;  -- 		LOAD		LeftTagIndex
           09D : 6FFF;  -- 		ADDI		-1
           09E : 1074;  -- 		STORE		LeftTagIndex
           09F : 2894;  -- 		JUMP		KeepLeft
           0A0 : 0A3A;  -- 		LOAD		CellArrI
           0A1 : 1877;  -- 		ADD			TagArraySize
           0A2 : 2075;  -- 		SUB			RightTagIndex
           0A3 : 30AD;  -- 		JNEG		TagUpdated
           0A4 : 7075;  -- 		ILOAD		RightTagIndex
           0A5 : 2076;  -- 		SUB			UpdateDist
           0A6 : 40AD;  -- 		JZERO		TagUpdated
           0A7 : 0876;  -- 		LOAD		UpdateDist
           0A8 : 7875;  -- 		ISTORE	RightTagIndex
           0A9 : 0875;  -- 		LOAD		RightTagIndex
           0AA : 6801;  -- 		ADDI		1
           0AB : 1075;  -- 		STORE		RightTagIndex
           0AC : 28A0;  -- 		JUMP		KeepRight
           0AD : 8800;  -- 		RETURN
           0AE : 0A33;  --  	LOAD 	AlongLongWall
           0AF : 5A30;  --  	XOR 	XDir
           0B0 : 38B9;  -- 	JPOS 	ELHS ; If 1, robot is set up for long axis traversal
           0B1 : 40B2;  -- 	JZERO  	ERHS ; If 0, robot setup values for short axis traverse
           0B2 : 0A57;  -- 	 	LOAD	MASK5
           0B3 : 98B2;  -- 	 	OUT 	SONAREN
           0B4 : 90AD;  -- 	 	IN 		DIST5
           0B5 : 1238;  -- 	 	STORE	Cell
           0B6 : 815C;  -- 	 	CALL	KillSonars
           0B7 : 80C0;  -- 		CALL	UpdateCell
           0B8 : 8800;  -- 	 	RETURN
           0B9 : 0A52;  -- 		LOAD	MASK0
           0BA : 98B2;  -- 		OUT 	SONAREN
           0BB : 90A8;  -- 		IN 		DIST0
           0BC : 1238;  -- 		STORE	Cell
           0BD : 815C;  -- 	 	CALL	KillSonars
           0BE : 80C0;  -- 	 	CALL	UpdateCell
           0BF : 8800;  -- 		RETURN
           0C0 : 90C0;  --  	IN		XPOS
           0C1 : 6015;  -- 	SHIFT 	-5
           0C2 : 1A3A;  -- 	ADD		CellArrI
           0C3 : 123B;  -- 	STORE 	XposIndex
           0C4 : 80C6;  -- 	CALL	FilterAndAggregate
           0C5 : 8800;  -- 	RETURN
           0C6 : 0A33;  -- 		LOAD	AlongLongWall
           0C7 : 40C9;  -- 		JZERO	FilterLoadLong
           0C8 : 38CB;  -- 		JPOS	FilterLoadShort
           0C9 : 0A69;  -- 		LOAD	MaxLong
           0CA : 28CD;  -- 		JUMP	FilterData
           0CB : 0A6A;  -- 		LOAD	MaxShort
           0CC : 28CD;  -- 		JUMP	FilterData
           0CD : 2238;  -- 		SUB		Cell
           0CE : 40D4;  -- 		JZERO	FilterReturn
           0CF : 30D4;  -- 		JNEG	FilterReturn
           0D0 : 723B;  -- 		ILOAD	XposIndex
           0D1 : 1A38;  -- 		ADD		Cell
           0D2 : 6011;  -- 		SHIFT	-1
           0D3 : 7A3B;  -- 		ISTORE	XposIndex
           0D4 : 8800;  -- 		RETURN
           0D5 : 723A;  -- 	ILOAD	CellArrI
           0D6 : 0A47;  -- 	LOAD	ZERO
           0D7 : 69F4;  -- 	ADDI	500
           0D8 : 1231;  -- 	STORE	ObjectXDist
           0D9 : 1232;  -- 	STORE	ObjectYDist
           0DA : 8800;  -- 	RETURN
           0DB : 80D5;  -- 		CALL	FindClosestObject
           0DC : 90C0;  -- 		IN	 	XPOS
           0DD : 2231;  -- 		SUB 	ObjectXDist
           0DE : 30E1;  -- 		JNEG	GoRight
           0DF : 40FA;  -- 		JZERO 	AtObjectX
           0E0 : 38E4;  -- 		JPOS	GoLeft
           0E1 : 0A48;  -- 		LOAD 	ONE
           0E2 : 1230;  -- 		STORE 	XDir
           0E3 : 28E6;  -- 		JUMP 	MoveLoop
           0E4 : 0A47;  -- 		LOAD 	ZERO
           0E5 : 1230;  -- 		STORE 	XDir
           0E6 : 80AE;  -- 		CALL 	UpdateMap
           0E7 : 0A30;  -- 		LOAD 	XDir
           0E8 : 40EF;  -- 		JZERO 	CheckLess
           0E9 : 38EA;  -- 		JPOS	CheckGreat
           0EA : 90C0;  -- 		IN		XPOS
           0EB : 2231;  -- 		SUB		ObjectXDist
           0EC : 40FA;  -- 		JZERO 	AtObjectX
           0ED : 38FA;  -- 		JPOS	AtObjectX
           0EE : 28F4;  -- 		JUMP	KeepGoingInDirection
           0EF : 90C0;  -- 		IN		XPOS
           0F0 : 2231;  -- 		SUB		ObjectXDist
           0F1 : 40FA;  -- 		JZERO 	AtObjectX
           0F2 : 30FA;  -- 		JNEG	AtObjectX
           0F3 : 28F4;  -- 		JUMP	KeepGoingInDirection
           0F4 : 0A47;  -- 		LOAD	ZERO
           0F5 : 11AA;  -- 		STORE	DTheta
           0F6 : 0A65;  -- 		LOAD	FMid
           0F7 : 11AB;  -- 		STORE	DVel
           0F8 : 81AC;  -- 		CALL	ControlMovement
           0F9 : 28E6;  -- 		JUMP	MoveLoop
           0FA : 815F;  -- 		CALL	StopMovement
           0FB : 8800;  -- 		RETURN
           0FC : 8022;  -- 	CALL 	Die
           0FD : 8800;  -- 	RETURN
           0FE : 819B;  -- 	CALL 	GoToWall
           0FF : B85A;  -- 	LOADI 	90
           100 : 122C;  -- 	STORE 	Angle
           101 : 0A34;  -- 	LOAD 	ObjectsPosTheta
           102 : 4105;  -- 	JZERO 	HomeRotate
           103 : BFA6;  -- 	LOADI 	-90
           104 : 122C;  -- 	STORE 	Angle
           105 : 8176;  -- 	CALL  	Rotate
           106 : 819B;  -- 	CALL 	GoToWall
           107 : 28FC;  -- 	JUMP 	BackAtHome
           108 : 122A;  -- 	STORE 	Temp
           109 : 90C1;  -- 	IN   	YPOS
           10A : 1236;  -- 	STORE 	EncoderY
           10B : B8C2;  -- 	LOADI 	THETA
           10C : 11AA;  -- 	STORE 	DTheta
           10D : 0A65;  -- 	LOAD 	FMid
           10E : 11AB;  -- 	STORE 	DVel
           10F : 81AC;  -- 	CALL 	ControlMovement
           110 : 90C1;  -- 	IN 		YPOS
           111 : 81CA;  -- 	CALL 	Abs
           112 : 2236;  -- 	SUB 	EncoderY
           113 : 2238;  -- 	SUB 	Cell
           114 : 6FF6;  -- 	ADDI 	-10
           115 : 310F;  -- 	JNEG 	TagIt
           116 : 90C1;  -- 	IN 		YPOS
           117 : 81CA;  -- 	CALL 	Abs
           118 : 6FE2;  -- 	ADDI 	-30
           119 : 1236;  -- 	STORE 	EncoderY
           11A : 0A66;  -- 	LOAD 	RMid
           11B : 11AB;  -- 	STORE 	DVel
           11C : 81AC;  -- 	CALL ControlMovement
           11D : 90C1;  -- 	IN 		YPOS
           11E : 81CA;  -- 	CALL 	Abs
           11F : 2236;  -- 	SUB 	EncoderY
           120 : 391C;  -- 	JPOS 	MoveBack
           121 : B8B4;  -- 	LOADI 	180
           122 : 8176;  -- 	CALL 	Rotate
           123 : 80FE;  -- 	CALL 	GoHome
           124 : 082A;  -- Middle:			DW 2090
           125 : 80AE;  -- 		CALL 	UpdateMap
           126 : 08C0;  -- 		LOAD 	XPOS
           127 : 1FD6;  -- 		ADD 	-2090
           128 : 312A;  -- 		JNEG 	NotAtMiddle
           129 : 292E;  -- 		JUMP 	AtMiddle
           12A : 0A65;  -- 		LOAD	FMid
           12B : 9883;  -- 		OUT		LVELCMD
           12C : 988B;  -- 		OUT		RVELCMD
           12D : 2925;  -- 		JUMP  CheckIfMiddle
           12E : 0A47;  -- 	LOAD	ZERO
           12F : 9883;  -- 	OUT		LVELCMD
           130 : 988B;  -- 	OUT		RVELCMD
           131 : 0A54;  -- 	LOAD	MASK2
           132 : 98B2;  -- 	OUT		SONAREN
           133 : 0A55;  -- 	LOAD	MASK3
           134 : 98B2;  -- 	OUT		SONAREN
           135 : 80AE;  -- 		CALL 	UpdateMap
           136 : 08AA;  -- 		LOAD	DIST2
           137 : 6C6D;  -- 		ADDI	-915
           138 : 313A;  -- 		JNEG	TwoGot
           139 : 2943;  -- 		JUMP	Rotate10
           13A : 0A48;  -- 		LOAD	ONE
           13B : 08AB;  -- 		LOAD	DIST3
           13C : 6C6D;  -- 		ADDI	-915
           13D : 313F;  -- 		JNEG	ThreeGot
           13E : 2943;  -- 		JUMP	Rotate10
           13F : 0A47;  -- 		LOAD	ZERO
           140 : 9883;  -- 		OUT		LVELCMD
           141 : 988B;  -- 		OUT		RVELCMD
           142 : 293F;  -- 		JUMP	ThreeGot
           143 : 0A47;  -- 		LOAD 	ZERO
           144 : 680C;  -- 		ADDI 	12
           145 : 122C;  -- 		STORE Angle
           146 : 2976;  -- 		JUMP	Rotate
           147 : 2935;  -- 		JUMP	CheckMidObj
           148 : 7FFF;  -- c7FFF: DW &H7FFF
           149 : 0000;  -- m16sA: DW 0 ; multiplicand
           14A : 0000;  -- m16sB: DW 0 ; multipler
           14B : 0000;  -- m16sc: DW 0 ; carry
           14C : 0000;  -- mcnt16s: DW 0 ; counter
           14D : 0000;  -- mres16sL: DW 0 ; result low
           14E : 0000;  -- mres16sH: DW 0 ; result high
           14F : 005A;  -- Ang0:		DW 90
           150 : 002C;  -- Ang1:		DW 44
           151 : 000C;  -- Ang2:		DW 12
           152 : FFF4;  -- Ang3:		DW -12
           153 : FFD4;  -- Ang4:		DW -44
           154 : FFA6;  -- Ang5:		DW -90
           155 : FF70;  -- Ang6:		DW -144
           156 : 0090;  -- Ang7:		DW 144
           157 : 0000;  -- SensorToCheck: 	DW 0
           158 : 0000;  -- SensorAngle:		DW 0
           159 : 0000;  -- SensorDist: 		DW 0
           15A : 0000;  -- SensorIndex: 		DW 0
           15B : 0000;  -- SensorUpdate:		DW 0
           15C : 0A47;  -- 	LOAD	ZERO
           15D : 98B2;  -- 	OUT		SONAREN
           15E : 8800;  -- 	RETURN
           15F : 0A47;  -- 	LOAD 	ZERO
           160 : 9883;  -- 	OUT 	LVELCMD
           161 : 988B;  -- 	OUT 	RVELCMD
           162 : 8800;  -- 	RETURN
           163 : 122A;  -- 	STORE	Temp
           164 : B802;  -- 	LOADI 	2
           165 : 980A;  -- 	OUT		BEEP
           166 : B801;  -- 	LOADI	1
           167 : 122B;  -- 	STORE	WaitTime
           168 : 9802;  -- 	OUT		Timer
           169 : 9002;  -- 		IN 		Timer
           16A : 222B;  -- 		SUB 	WaitTime
           16B : 3169;  -- 		JNEG	BeepLoop
           16C : B800;  -- 		LOADI	0
           16D : 980A;  -- 		OUT		BEEP
           16E : 0A2A;  -- 		LOAD 	Temp
           16F : 8800;  -- 		RETURN
           170 : 3173;  -- 	JNEG	M360N
           171 : 6E98;  -- 	ADDI 	-360
           172 : 2970;  -- 	JUMP 	Mod360
           173 : 6968;  -- 		ADDI 	360
           174 : 3173;  -- 		JNEG 	M360N
           175 : 8800;  -- 		RETURN
           176 : 122A;  -- 		STORE	Temp
           177 : 90C2;  -- 		IN 		THETA
           178 : 1A2C;  -- 		ADD 	Angle
           179 : 222F;  -- 		SUB 	ErrMargin
           17A : 8170;  -- 		CALL 	Mod360
           17B : 122D;  -- 		STORE 	LowErr
           17C : 90C2;  -- 		IN 		THETA
           17D : 1A2C;  -- 		ADD 	Angle
           17E : 1A2F;  -- 		ADD 	ErrMargin
           17F : 8170;  -- 		CALL 	Mod360
           180 : 122E;  -- 		STORE 	HighErr
           181 : 0A2C;  -- 		LOAD 	Angle
           182 : 318E;  -- 		JNEG 	RotateCW ; else RotateCC
           183 : 0A63;  -- 		LOAD 	FSlow
           184 : 988B;  -- 		OUT		RVELCMD
           185 : 0A64;  -- 		LOAD 	RSlow
           186 : 9883;  -- 		OUT		LVELCMD
           187 : 90C2;  -- 		IN 		THETA
           188 : 222E;  -- 		SUB 	HighErr
           189 : 3983;  -- 		JPOS	RotateCC
           18A : 90C2;  -- 		IN 		THETA
           18B : 222D;  -- 		SUB  	LowErr
           18C : 3183;  -- 		JNEG	RotateCC
           18D : 2998;  -- 		JUMP 	RotateEnd
           18E : 0A64;  -- 		LOAD 	RSlow
           18F : 988B;  -- 		OUT		RVELCMD
           190 : 0A63;  -- 		LOAD 	FSlow
           191 : 9883;  -- 		OUT		LVELCMD
           192 : 90C2;  -- 		IN 		THETA
           193 : 222E;  -- 		SUB 	HighErr
           194 : 398E;  -- 		JPOS	RotateCW
           195 : 90C2;  -- 		IN 		THETA
           196 : 222D;  -- 		SUB  	LowErr
           197 : 318E;  -- 		JNEG	RotateCW
           198 : 815F;  -- 		CALL 	StopMovement
           199 : 0A2A;  -- 		LOAD 	Temp
           19A : 8800;  -- 		RETURN
           19B : 0A54;  -- 	LOAD 	MASK2
           19C : 5255;  -- 	OR 		MASK3
           19D : 98B2;  -- 	OUT 	SONAREN
           19E : 90C2;  -- 	IN  	THETA
           19F : 11AA;  -- 	STORE 	DTheta
           1A0 : 0A65;  -- 	LOAD 	FMid
           1A1 : 11AB;  -- 	STORE 	DVel
           1A2 : 81AC;  -- 	CALL ControlMovement
           1A3 : 90AA;  -- 	IN 		DIST2
           1A4 : 1A37;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           1A5 : 39A2;  -- 	JPOS 	CheckWall
           1A6 : 90AB;  -- 	IN 		DIST3
           1A7 : 1A37;  -- 	ADD 	WallThresh 	; 20 cm ~= 8 inches
           1A8 : 39A2;  -- 	JPOS 	CheckWall
           1A9 : 815F;  -- 	CALL 	StopMovement 	; stops movement
           1AA : 0000;  -- DTheta:    DW 0
           1AB : 0000;  -- DVel:      DW 0
           1AC : 90C2;  -- 	IN     THETA
           1AD : 21AA;  -- 	SUB    DTheta      ; actual - desired angle
           1AE : 81CB;  -- 	CALL   Neg         ; desired - actual angle
           1AF : 68B4;  -- 	ADDI   180
           1B0 : 8170;  -- 	CALL   Mod360
           1B1 : 6F4C;  -- 	ADDI   -180
           1B2 : 6002;  -- 	SHIFT  2
           1B3 : 11BE;  -- 	STORE  CMAErr      ; hold temporarily
           1B4 : 09AB;  -- 	LOAD   DVel
           1B5 : 19BE;  -- 	ADD    CMAErr
           1B6 : 81BF;  -- 	CALL   CapVel      ; ensure velocity is valid
           1B7 : 988B;  -- 	OUT    RVELCMD
           1B8 : 09BE;  -- 	LOAD   CMAErr
           1B9 : 81CB;  -- 	CALL   Neg         ; left wheel gets negative differential
           1BA : 19AB;  -- 	ADD    DVel
           1BB : 81BF;  -- 	CALL   CapVel
           1BC : 9883;  -- 	OUT    LVELCMD
           1BD : 8800;  -- 	RETURN
           1BE : 0000;  -- CMAErr: DW 0       ; holds angle error velocity
           1BF : 6E0C;  -- 	ADDI    -500
           1C0 : 39C6;  -- 	JPOS    CapVelHigh
           1C1 : 69F4;  -- 	ADDI    500
           1C2 : 69F4;  -- 	ADDI    500
           1C3 : 31C8;  -- 	JNEG    CapVelLow
           1C4 : 6E0C;  -- 	ADDI    -500
           1C5 : 8800;  -- 	RETURN
           1C6 : B9F4;  -- 	LOADI   500
           1C7 : 8800;  -- 	RETURN
           1C8 : BE0C;  -- 	LOADI   -500
           1C9 : 8800;  -- 	RETURN
           1CA : 39CD;  -- 	JPOS   Abs_r
           1CB : 5A46;  -- 	XOR    NegOne       ; Flip all bits
           1CC : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1CD : 8800;  -- 	RETURN
           1CE : B800;  -- 		LOADI  0
           1CF : 114B;  -- 		STORE  m16sc        ; clear carry
           1D0 : 114E;  -- 		STORE  mres16sH     ; clear result
           1D1 : B810;  -- 		LOADI  16           ; load 16 to counter
           1D2 : 114C;  -- 		STORE  mcnt16s
           1D3 : 094B;  -- 		LOAD   m16sc        ; check the carry (from previous iteration)
           1D4 : 41D8;  -- 		JZERO  Mult16s_noc  ; if no carry, move on
           1D5 : 094E;  -- 		LOAD   mres16sH     ; if a carry,
           1D6 : 1949;  -- 		ADD    m16sA        ;  add multiplicand to result H
           1D7 : 114E;  -- 		STORE  mres16sH
           1D8 : 094A;  -- 		LOAD   m16sB
           1D9 : 4A48;  -- 		AND    One          ; check bit 0 of multiplier
           1DA : 114B;  -- 		STORE  m16sc        ; save as next carry
           1DB : 41DF;  -- 		JZERO  Mult16s_sh   ; if no carry, move on to shift
           1DC : 094E;  -- 		LOAD   mres16sH     ; if bit 0 set,
           1DD : 2149;  -- 		SUB    m16sA        ;  subtract multiplicand from result H
           1DE : 114E;  -- 		STORE  mres16sH
           1DF : 094A;  -- 		LOAD   m16sB
           1E0 : 6011;  -- 		SHIFT  -1           ; shift result L >>1
           1E1 : 4948;  -- 		AND    c7FFF        ; clear msb
           1E2 : 114A;  -- 		STORE  m16sB
           1E3 : 094E;  -- 		LOAD   mres16sH     ; load result H
           1E4 : 600F;  -- 		SHIFT  15           ; move lsb to msb
           1E5 : 514A;  -- 		OR     m16sB
           1E6 : 114A;  -- 		STORE  m16sB        ; result L now includes carry out from H
           1E7 : 094E;  -- 		LOAD   mres16sH
           1E8 : 6011;  -- 		SHIFT  -1
           1E9 : 114E;  -- 		STORE  mres16sH     ; shift result H >>1
           1EA : 094C;  -- 		LOAD   mcnt16s
           1EB : 6FFF;  -- 		ADDI   -1           ; check counter
           1EC : 39D2;  -- 		JPOS   Mult16s_loop ; need to iterate 16 times
           1ED : 094A;  -- 		LOAD   m16sB
           1EE : 114D;  -- 		STORE  mres16sL     ; multiplier and result L shared a word
           1EF : 8800;  -- 		RETURN              ; Done
           1F0 : 9802;  -- 	OUT    TIMER
           1F1 : 9002;  -- 	IN     TIMER
           1F2 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1F3 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1F4 : 31F1;  -- 	JNEG   Wloop
           1F5 : 8800;  -- 	RETURN
           1F6 : 81FE;  -- 	CALL   BlockI2C    ; wait for idle
           1F7 : 0A6C;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1F8 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1F9 : 0A47;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1FA : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1FB : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1FC : 81FE;  -- 	CALL   BlockI2C    ; wait for it to finish
           1FD : 8800;  -- 	RETURN
           1FE : 0A47;  -- 	LOAD   Zero
           1FF : 122A;  -- 	STORE  Temp        ; Used to check for timeout
           200 : 0A2A;  -- 	LOAD   Temp
           201 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           202 : 122A;  -- 	STORE  Temp
           203 : 4207;  -- 	JZERO  I2CError    ; Timeout occurred; error
           204 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           205 : 3A00;  -- 	JPOS   BI2CL       ; If not 0, try again
           206 : 8800;  -- 	RETURN             ; Else return
           207 : 0A47;  -- 	LOAD   Zero
           208 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           209 : 9804;  -- 	OUT    SSEG1
           20A : 9805;  -- 	OUT    SSEG2       ; display error message
           20B : 2A07;  -- 	JUMP   I2CError
           20C : 8224;  -- 	CALL   GetBattLvl
           20D : 420C;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           20E : 226B;  -- 	SUB    MinBatt
           20F : 3212;  -- 	JNEG   DeadBatt
           210 : 1A6B;  -- 	ADD    MinBatt     ; get original value back
           211 : 8800;  -- 	RETURN
           212 : 0A4B;  -- 	LOAD   Four
           213 : 980A;  -- 	OUT    BEEP        ; start beep sound
           214 : 8224;  -- 	CALL   GetBattLvl  ; get the battery level
           215 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           216 : 9805;  -- 	OUT    SSEG2
           217 : 9806;  -- 	OUT    LCD
           218 : 0A47;  -- 	LOAD   Zero
           219 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           21A : 9801;  -- 	OUT    LEDS        ; all LEDs on
           21B : 9807;  -- 	OUT    XLEDS
           21C : 81F0;  -- 	CALL   Wait1       ; 1 second
           21D : 0A47;  -- 	Load   Zero
           21E : 980A;  -- 	OUT    BEEP        ; stop beeping
           21F : 0A47;  -- 	LOAD   Zero
           220 : 9801;  -- 	OUT    LEDS        ; LEDs off
           221 : 9807;  -- 	OUT    XLEDS
           222 : 81F0;  -- 	CALL   Wait1       ; 1 second
           223 : 2A12;  -- 	JUMP   DeadBatt    ; repeat forever
           224 : 0A6D;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           225 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           226 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           227 : 81FE;  -- 	CALL   BlockI2C    ; wait for it to finish
           228 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           229 : 8800;  -- 	RETURN
           22A : 0000;  -- Temp:				DW 0 ; "Temp" is not a great name, but can be useful
           22B : 0000;  -- WaitTime:			DW 0
           22C : 0000;  -- Angle: 				DW 0 ; Used in Rotate function
           22D : 0000;  -- LowErr: 			DW 0 ; Error margin variables
           22E : 0000;  -- HighErr: 			DW 0 ; Used in Rotate function
           22F : 0004;  -- ErrMargin: 			DW 4
           230 : 0000;  -- XDir:				DW 0		; Current direction on the X access robot is moving. 1 = right, 0 = left
           231 : 0000;  -- ObjectXDist:		DW 0 		; The x position of the next closest object
           232 : 0000;  -- ObjectYDist:		DW 0		; The absolute value of the y position of the next closest object
           233 : 0000;  -- AlongLongWall:		DW 0		; Boolean that signifies if robot is aligned along the longest wall
           234 : 0000;  -- ObjectsPosTheta:	DW 0		; Boolean that signifies if the robot has to turn in a positive angle to tag objects
           235 : 0000;  -- TagVelocity:		DW 0		; Number that signifies the speed and direction the robot has to go in to get to the next closest object along the wall
           236 : 0000;  -- EncoderY: 			DW 0		; Stores current value of encoder in Y direction
           237 : FF38;  -- WallThresh: 		DW -200 	; Defines distance away from wall before DE2Bot should stop moving (used in GoHome function)
           238 : 0000;  -- Cell: 				DW 0		; Initialize cell value
           239 : 0000;  -- CellCount:  		DW 0 		; How many values in the occupancy array
           23A : 064C;  -- CellArrI:   		DW &H64c	; Memory location (starting index) of the cell array
           23B : 0000;  -- XposIndex:			DW 0		; Initialize a temporary index for cell array indexing
           23C : 0000;  -- FilterVal:			DW 0		; Updated in the code to set up the max filter
           23D : 0000;  -- y_val:			DW 0
           23E : 0000;  -- THETAtemp2:		DW 0
           23F : 0000;  -- THETAtemp4:		DW 0
           240 : 0000;  -- THETA2:			DW 0
           241 : 0000;  -- THETA4:			DW 0
           242 : 0000;  -- THETA6:			DW 0
           243 : 0000;  -- TCOPY:			DW 0
           244 : 0000;  -- CosSum:			DW 0
           245 : FFFB;  -- NegFive:	DW -5
           246 : FFFF;  -- NegOne:   	DW -1
           247 : 0000;  -- Zero:     	DW 0
           248 : 0001;  -- One:      	DW 1
           249 : 0002;  -- Two:      	DW 2
           24A : 0003;  -- Three:    	DW 3
           24B : 0004;  -- Four:     	DW 4
           24C : 0005;  -- Five:     	DW 5
           24D : 0006;  -- Six:      	DW 6
           24E : 0007;  -- Seven:    	DW 7
           24F : 0008;  -- Eight:    	DW 8
           250 : 0009;  -- Nine:     	DW 9
           251 : 000A;  -- Ten:      	DW 10
           252 : 0001;  -- Mask0:    DW &B00000001
           253 : 0002;  -- Mask1:    DW &B00000010
           254 : 0004;  -- Mask2:    DW &B00000100
           255 : 0008;  -- Mask3:    DW &B00001000
           256 : 0010;  -- Mask4:    DW &B00010000
           257 : 0020;  -- Mask5:    DW &B00100000
           258 : 0040;  -- Mask6:    DW &B01000000
           259 : 0080;  -- Mask7:    DW &B10000000
           25A : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           25B : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           25C : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           25D : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           25E : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           25F : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           260 : 00B4;  -- Deg180:   DW 180       ; 180
           261 : 010E;  -- Deg270:   DW 270       ; 270
           262 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           263 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           264 : FF9C;  -- RSlow:    DW -100
           265 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           266 : FEA2;  -- RMid:     DW -350
           267 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           268 : FE0C;  -- RFast:    DW -500
           269 : 0B73;  -- MaxLong:	DW 2931	   	; 12 ft - 2ft (for home and robot) = 10ft = 3048 mm =~ 2900 increments in position
           26A : 06CC;  -- MaxShort:	DW 1740		; TEST 8ft - 2ft (for home and robot) = 6ft = 1740 mm =~ 1740 increments in position
           26B : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           26C : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           26D : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           64C : 0000;  -- DW		0	; Array start	
  END;
